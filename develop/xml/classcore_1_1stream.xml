<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1stream" kind="class" language="C++" prot="public">
    <compoundname>core::stream</compoundname>
    <includes refid="stream_8hpp" local="no">stream.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590" prot="public" static="no" strong="yes">
        <type></type>
        <name>type</name>
        <enumvalue id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590add5c07036f2975ff4bce568b6511d3bc" prot="public">
          <name>single</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590a87c214e1e77f5e0644a224f3df50fae7" prot="public">
          <name>vec2</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590a97ade28e93c0de60adc075bdbe07ca36" prot="public">
          <name>vec3</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590a1a9028fd802c481a99491a418ca2fe86" prot="public">
          <name>vec4</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590a2e8e00c845516e3865a43b0e4781166c" prot="public">
          <name>mat2</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590a68fd2f70993e47d51bc5c377aebe4791" prot="public">
          <name>mat3x3</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590a8761e87637e7828e67ce545265f2e609" prot="public">
          <name>mat4x4</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the supported internal types of the stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="21" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="20" bodyend="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcore_1_1stream_1ae6e4002148765f114da9fe1b5c64547d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class psl::serialization::accessor</definition>
        <argsstring></argsstring>
        <name>psl::serialization::accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="16" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcore_1_1stream_1a5161b55229068f9b41aef8ef3f959a05" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr psl::string8::view</type>
        <definition>constexpr psl::string8::view core::stream::serialization_name</definition>
        <argsstring></argsstring>
        <name>serialization_name</name>
        <initializer>{&quot;CORE_STREAM&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="386" column="37" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="386" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1stream_1a1fd7faf0bd3dfca1b0ea17c9164ad570" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;DATA&quot;, psl::array&lt; float &gt; &gt;</type>
        <definition>psl::serialization::property&lt;&quot;DATA&quot;, psl::array&lt;float&gt; &gt; core::stream::m_Data</definition>
        <argsstring></argsstring>
        <name>m_Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="388" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1stream_1a81a8fcfc0987c5b4e2aa6fadc541edda" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;TYPE&quot;, type &gt;</type>
        <definition>psl::serialization::property&lt;&quot;TYPE&quot;, type&gt; core::stream::m_Type</definition>
        <argsstring></argsstring>
        <name>m_Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="389" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1stream_1a6bbdd16d33b09dcbfa493e13f9c58de2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>core::stream::stream</definition>
        <argsstring>(type type=type::single)</argsstring>
        <name>stream</name>
        <param>
          <type><ref refid="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590" kindref="member">type</ref></type>
          <declname>type</declname>
          <defval>type::single</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="30" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a7dfe5bee942ee2ae480b337654193e06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>core::stream::stream</definition>
        <argsstring>(psl::array&lt; T &gt; data)</argsstring>
        <name>stream</name>
        <param>
          <type>psl::array&lt; T &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="33" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="33" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a9a06e10a0f7bd261b2bf85c7fe424e82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* core::stream::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>returns the pointer to the head of the memory stream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the head of the memory stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="56" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1ad8c75154b08fbd2e84f9efba17aefb61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* core::stream::cdata</definition>
        <argsstring>() const</argsstring>
        <name>cdata</name>
        <briefdescription>
<para>returns the constant pointer to the head of the memory stream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the constant pointer to the head of the memory stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="60" column="12" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a5e84761233f2f91f9511442289739cd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; psl::array&lt; float &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;psl::array&lt;float&gt; &gt; &gt; core::stream::as_single</definition>
        <argsstring>()</argsstring>
        <name>as_single</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="66" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1ad47e076bdf66446e77f1f3e6f39dd538" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; psl::array&lt; psl::vec2 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;psl::array&lt;psl::vec2&gt; &gt; &gt; core::stream::as_vec2</definition>
        <argsstring>()</argsstring>
        <name>as_vec2</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="79" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a7eb210e7716868f263f1002d4f5220ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; psl::array&lt; psl::vec3 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;psl::array&lt;psl::vec3&gt; &gt; &gt; core::stream::as_vec3</definition>
        <argsstring>()</argsstring>
        <name>as_vec3</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="91" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="91" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1ac4bab4491e0d94f3cb8352aba5ae65f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; psl::array&lt; psl::vec4 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;psl::array&lt;psl::vec4&gt; &gt; &gt; core::stream::as_vec4</definition>
        <argsstring>()</argsstring>
        <name>as_vec4</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="103" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a8ec597c9fe0e35f5f09b6b6b1bc903d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; psl::array&lt; psl::mat2x2 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;psl::array&lt;psl::mat2x2&gt; &gt; &gt; core::stream::as_mat2</definition>
        <argsstring>()</argsstring>
        <name>as_mat2</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="116" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="116" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a5efad521f3513e965afd08f489546595" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; psl::array&lt; psl::mat3x3 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;psl::array&lt;psl::mat3x3&gt; &gt; &gt; core::stream::as_mat3</definition>
        <argsstring>()</argsstring>
        <name>as_mat3</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="128" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="128" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1ae33cda7086b097b0a059124e15bdc0cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; psl::array&lt; psl::mat4x4 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;psl::array&lt;psl::mat4x4&gt; &gt; &gt; core::stream::as_mat4</definition>
        <argsstring>()</argsstring>
        <name>as_mat4</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="140" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="140" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1ac8f6812ad5166c903b77ee54eda821b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const psl::array&lt; float &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;const psl::array&lt;float&gt; &gt; &gt; core::stream::as_single</definition>
        <argsstring>() const</argsstring>
        <name>as_single</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="153" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a748d9a92acf554717bc7df1ccb63ecee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const psl::array&lt; psl::vec2 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;const psl::array&lt;psl::vec2&gt; &gt; &gt; core::stream::as_vec2</definition>
        <argsstring>() const</argsstring>
        <name>as_vec2</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="159" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a0d32cd4b635b02af0282403f52186c78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const psl::array&lt; psl::vec3 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;const psl::array&lt;psl::vec3&gt; &gt; &gt; core::stream::as_vec3</definition>
        <argsstring>() const</argsstring>
        <name>as_vec3</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="171" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a757f9cdf76a7f6ed2d16d7265d7e3c0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const psl::array&lt; psl::vec4 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;const psl::array&lt;psl::vec4&gt; &gt; &gt; core::stream::as_vec4</definition>
        <argsstring>() const</argsstring>
        <name>as_vec4</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="183" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="183" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a8607a74c19090363545c70ce6aa3e8a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const psl::array&lt; psl::mat2x2 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;const psl::array&lt;psl::mat2x2&gt; &gt; &gt; core::stream::as_mat2</definition>
        <argsstring>() const</argsstring>
        <name>as_mat2</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="195" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="195" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a929dea41ca8bba4408307b5b79617e5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const psl::array&lt; psl::mat3x3 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;const psl::array&lt;psl::mat3x3&gt; &gt; &gt; core::stream::as_mat3</definition>
        <argsstring>() const</argsstring>
        <name>as_mat3</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="207" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a5e6ba8cc4623bad7ba401fc24cb6b6ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const psl::array&lt; psl::mat4x4 &gt; &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;const psl::array&lt;psl::mat4x4&gt; &gt; &gt; core::stream::as_mat4</definition>
        <argsstring>() const</argsstring>
        <name>as_mat4</name>
        <briefdescription>
<para>returns the type safe variant of the stream as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the stream is of the correct type, it will return a valid vector, otherwise a std::nullopt <simplesect kind="return"><para>either a valid stream (on success) or a std::nullopt (on failure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="219" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a729c8f7d00b72a61343ec38b3db8a0fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t core::stream::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>returns the size of the stream (in unique element count). </para>
        </briefdescription>
        <detaileddescription>
<para>depending on the contained type, one &quot;element&quot; is bigger/smaller. This method returns the size of one element. for example if the stream contains vec2 data, one element is equal to 2 floats, and so the <ref refid="classcore_1_1stream_1a729c8f7d00b72a61343ec38b3db8a0fa" kindref="member">size()</ref> would be 2 if there were 4 floats present. similarly if the stream contained vec3 data, one element would be equivalent to 3 floats, and so a <ref refid="classcore_1_1stream_1a729c8f7d00b72a61343ec38b3db8a0fa" kindref="member">size()</ref> of 4 would be equal to 12 floats. <simplesect kind="return"><para>the element count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="233" column="8" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a2a7409500fb4cf4b1e3b5222abd19d77" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void core::stream::resize</definition>
        <argsstring>(size_t count) noexcept</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="235" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a8a8e3b8827819da1704a851796c30f14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void core::stream::reserve</definition>
        <argsstring>(size_t count) noexcept</argsstring>
        <name>reserve</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="237" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a626f602096bc9a46cba61422d2ef4141" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t core::stream::bytesize</definition>
        <argsstring>() const</argsstring>
        <name>bytesize</name>
        <briefdescription>
<para>returns the total size of the memory stream in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the total size of the memory stream in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="241" column="8" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a6d4f00772f38bf52a17b4e4cea2484e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t core::stream::elements</definition>
        <argsstring>() const noexcept</argsstring>
        <name>elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="243" column="8" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="243" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a8756df0fea25567a9d8ab3cca2284134" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool core::stream::is</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="284" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="284" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1stream_1a118cbf11922ad42a966a4a3ef961c4f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool core::stream::transform</definition>
        <argsstring>(F &amp;&amp;transformation)</argsstring>
        <name>transform</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>transformation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="314" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="314" bodyend="376"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1stream_1af3b5f6531b92dc61911b2390b395a99f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void core::stream::serialize</definition>
        <argsstring>(S &amp;serializer)</argsstring>
        <name>serialize</name>
        <param>
          <type>S &amp;</type>
          <declname>serializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="380" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="380" bodyend="383"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>stream contains a type erased &quot;stream&quot; of memory with basic facilities to protect it from incorrect casts. </para>
    </briefdescription>
    <detaileddescription>
<para>stream should be used in scenarios where something could contain various, but functionaly similar arrays of float. see <ref refid="classcore_1_1data_1_1geometry__t" kindref="compound">core::data::geometry_t</ref> for an example of this. <simplesect kind="see"><para><ref refid="classcore_1_1data_1_1geometry__t" kindref="compound">core::data::geometry_t</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" line="15" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp" bodystart="14" bodyend="390"/>
    <listofallmembers>
      <member refid="classcore_1_1stream_1a8ec597c9fe0e35f5f09b6b6b1bc903d0" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_mat2</name></member>
      <member refid="classcore_1_1stream_1a8607a74c19090363545c70ce6aa3e8a4" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_mat2</name></member>
      <member refid="classcore_1_1stream_1a5efad521f3513e965afd08f489546595" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_mat3</name></member>
      <member refid="classcore_1_1stream_1a929dea41ca8bba4408307b5b79617e5e" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_mat3</name></member>
      <member refid="classcore_1_1stream_1ae33cda7086b097b0a059124e15bdc0cc" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_mat4</name></member>
      <member refid="classcore_1_1stream_1a5e6ba8cc4623bad7ba401fc24cb6b6ad" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_mat4</name></member>
      <member refid="classcore_1_1stream_1a5e84761233f2f91f9511442289739cd4" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_single</name></member>
      <member refid="classcore_1_1stream_1ac8f6812ad5166c903b77ee54eda821b7" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_single</name></member>
      <member refid="classcore_1_1stream_1ad47e076bdf66446e77f1f3e6f39dd538" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_vec2</name></member>
      <member refid="classcore_1_1stream_1a748d9a92acf554717bc7df1ccb63ecee" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_vec2</name></member>
      <member refid="classcore_1_1stream_1a7eb210e7716868f263f1002d4f5220ea" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_vec3</name></member>
      <member refid="classcore_1_1stream_1a0d32cd4b635b02af0282403f52186c78" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_vec3</name></member>
      <member refid="classcore_1_1stream_1ac4bab4491e0d94f3cb8352aba5ae65f6" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_vec4</name></member>
      <member refid="classcore_1_1stream_1a757f9cdf76a7f6ed2d16d7265d7e3c0c" prot="public" virt="non-virtual"><scope>core::stream</scope><name>as_vec4</name></member>
      <member refid="classcore_1_1stream_1a626f602096bc9a46cba61422d2ef4141" prot="public" virt="non-virtual"><scope>core::stream</scope><name>bytesize</name></member>
      <member refid="classcore_1_1stream_1ad8c75154b08fbd2e84f9efba17aefb61" prot="public" virt="non-virtual"><scope>core::stream</scope><name>cdata</name></member>
      <member refid="classcore_1_1stream_1a9a06e10a0f7bd261b2bf85c7fe424e82" prot="public" virt="non-virtual"><scope>core::stream</scope><name>data</name></member>
      <member refid="classcore_1_1stream_1a6d4f00772f38bf52a17b4e4cea2484e4" prot="public" virt="non-virtual"><scope>core::stream</scope><name>elements</name></member>
      <member refid="classcore_1_1stream_1a8756df0fea25567a9d8ab3cca2284134" prot="public" virt="non-virtual"><scope>core::stream</scope><name>is</name></member>
      <member refid="classcore_1_1stream_1a1fd7faf0bd3dfca1b0ea17c9164ad570" prot="private" virt="non-virtual"><scope>core::stream</scope><name>m_Data</name></member>
      <member refid="classcore_1_1stream_1a81a8fcfc0987c5b4e2aa6fadc541edda" prot="private" virt="non-virtual"><scope>core::stream</scope><name>m_Type</name></member>
      <member refid="classcore_1_1stream_1ae6e4002148765f114da9fe1b5c64547d" prot="public" virt="non-virtual"><scope>core::stream</scope><name>psl::serialization::accessor</name></member>
      <member refid="classcore_1_1stream_1a8a8e3b8827819da1704a851796c30f14" prot="public" virt="non-virtual"><scope>core::stream</scope><name>reserve</name></member>
      <member refid="classcore_1_1stream_1a2a7409500fb4cf4b1e3b5222abd19d77" prot="public" virt="non-virtual"><scope>core::stream</scope><name>resize</name></member>
      <member refid="classcore_1_1stream_1a5161b55229068f9b41aef8ef3f959a05" prot="private" virt="non-virtual"><scope>core::stream</scope><name>serialization_name</name></member>
      <member refid="classcore_1_1stream_1af3b5f6531b92dc61911b2390b395a99f" prot="private" virt="non-virtual"><scope>core::stream</scope><name>serialize</name></member>
      <member refid="classcore_1_1stream_1a729c8f7d00b72a61343ec38b3db8a0fa" prot="public" virt="non-virtual"><scope>core::stream</scope><name>size</name></member>
      <member refid="classcore_1_1stream_1a6bbdd16d33b09dcbfa493e13f9c58de2" prot="public" virt="non-virtual"><scope>core::stream</scope><name>stream</name></member>
      <member refid="classcore_1_1stream_1a7dfe5bee942ee2ae480b337654193e06" prot="public" virt="non-virtual"><scope>core::stream</scope><name>stream</name></member>
      <member refid="classcore_1_1stream_1a118cbf11922ad42a966a4a3ef961c4f3" prot="public" virt="non-virtual"><scope>core::stream</scope><name>transform</name></member>
      <member refid="classcore_1_1stream_1a2141f36b55d92ac83e0a57d858ec8590" prot="public" virt="non-virtual"><scope>core::stream</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
