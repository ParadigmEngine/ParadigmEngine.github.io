<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1os_1_1surface" kind="class" language="C++" prot="public">
    <compoundname>core::os::surface</compoundname>
    <includes refid="surface_8hpp" local="no">surface.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1a99269624200f025a6982d11ba5981e79" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1window" kindref="compound">data::window</ref> &gt;</type>
        <definition>core::resource::handle&lt;data::window&gt; core::os::surface::m_Data</definition>
        <argsstring></argsstring>
        <name>m_Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="125" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1ac060c1e1392efb4cdeeb54bba0169d96" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1swapchain" kindref="compound">core::ivk::swapchain</ref> &gt; &gt;</type>
        <definition>std::vector&lt;core::resource::handle&lt;core::ivk::swapchain&gt; &gt; core::os::surface::m_Swapchains</definition>
        <argsstring></argsstring>
        <name>m_Swapchains</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="126" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1ada71bf0f1e1b45cdd1499e1bed6dc67b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::os::surface::m_Focused</definition>
        <argsstring></argsstring>
        <name>m_Focused</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="127" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1ad27d425a53886fbc6283236ec6cfc13f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::os::surface::m_Open</definition>
        <argsstring></argsstring>
        <name>m_Open</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="128" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1ac8cf7dd7ea0d08f09d6db76148db57bb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::os::surface::m_IndicatorClipped</definition>
        <argsstring></argsstring>
        <name>m_IndicatorClipped</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="129" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1a9c53a7cce547b31f471e4e0e9638eddf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::os::surface::m_IndicatorVisible</definition>
        <argsstring></argsstring>
        <name>m_IndicatorVisible</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="130" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1a0b5a120d13eb164ef9babc8c4242c549" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::os::surface::m_IndicatorLocked</definition>
        <argsstring></argsstring>
        <name>m_IndicatorLocked</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="131" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1os_1_1surface_1ac417c707dc70194ce0922ddb7819952f" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1systems_1_1input" kindref="compound">core::systems::input</ref> *</type>
        <definition>core::systems::input* core::os::surface::m_InputSystem</definition>
        <argsstring></argsstring>
        <name>m_InputSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="132" column="22" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1aece1cea8a1178b2e70cae961dfbe16b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>surface::surface</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::resource::handle&lt; data::window &gt; data)</argsstring>
        <name>surface</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1window" kindref="compound">data::window</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="40" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="11" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a0d468eb3f6583074c61925c838ab7e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>surface::~surface</definition>
        <argsstring>()</argsstring>
        <name>~surface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="44" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a45226bec2e8774f3c321b21a018940af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::os::surface::surface</definition>
        <argsstring>(const surface &amp;)=delete</argsstring>
        <name>surface</name>
        <param>
          <type>const <ref refid="classcore_1_1os_1_1surface" kindref="compound">surface</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1aff3508041f03ed60c80d42e2fb7f4a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::os::surface::surface</definition>
        <argsstring>(surface &amp;&amp;)=delete</argsstring>
        <name>surface</name>
        <param>
          <type><ref refid="classcore_1_1os_1_1surface" kindref="compound">surface</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1ae3b0b37b01aa9cfd1eac224149246841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1os_1_1surface" kindref="compound">surface</ref> &amp;</type>
        <definition>surface&amp; core::os::surface::operator=</definition>
        <argsstring>(const surface &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcore_1_1os_1_1surface" kindref="compound">surface</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="47" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1ad6793b0f5571d2c6818df9f5e8f20691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1os_1_1surface" kindref="compound">surface</ref> &amp;</type>
        <definition>surface&amp; core::os::surface::operator=</definition>
        <argsstring>(surface &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcore_1_1os_1_1surface" kindref="compound">surface</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="48" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a6b2f2142f6360410bd7d7e1a49bd4119" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classcore_1_1data_1_1window" kindref="compound">core::data::window</ref> &amp;</type>
        <definition>const data::window &amp; surface::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>returns the window data that was used to initialize this window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the data can potentially have changed since initialization by external sources. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="52" column="26" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1af91fe0eafeed7556532c53591dd0da4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void surface::terminate</definition>
        <argsstring>()</argsstring>
        <name>terminate</name>
        <briefdescription>
<para>marks the surface to be terminated. </para>
        </briefdescription>
        <detaileddescription>
<para>when invoking this method, the surface will be marked for destruction. <simplesect kind="warning"><para>this is a suggestion, and actual shutdown might still take some time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="59" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1aa23f9470673d35d4439c7e4ffac000a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool surface::open</definition>
        <argsstring>() const</argsstring>
        <name>open</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the surface is &quot;open&quot; (i.e initialized and not-terminated) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="62" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a6e0c9004afdea7cddbc17925b0da4eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool surface::tick</definition>
        <argsstring>()</argsstring>
        <name>tick</name>
        <briefdescription>
<para>ticks the input system and returns if the surface is still <ref refid="classcore_1_1os_1_1surface_1aa23f9470673d35d4439c7e4ffac000a5" kindref="member">open()</ref> after. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the surface has been terminated (false) or is still open (true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="66" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1ab80711d93e4bde3e8c69048aa5dce76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core::os::surface::focus</definition>
        <argsstring>(bool value)</argsstring>
        <name>focus</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>suggests the surface to become focused. </para>
        </briefdescription>
        <detaileddescription>
<para>the strength of the focus suggestion is based on the platform specific implementation of focus. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>sets the focus value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="73" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a810b5dea484b2f6a6506d368e9d3f78d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool surface::focused</definition>
        <argsstring>() const</argsstring>
        <name>focused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the platform considers this surface to be &apos;in focus&apos;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="75" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a247b92e546cb8ddbe22fb62ac90d36f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool surface::resize</definition>
        <argsstring>(uint32_t width, uint32_t height)</argsstring>
        <name>resize</name>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>suggests a new size for the surface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>depending on the platform, resize becomes a no-op, and in general should be considered a no-op unless the surface is rendering windowed, or borderless-windowed. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>the suggested width of the surface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>the suggested height of the surface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if the resize was successfull </para>
</simplesect>
<simplesect kind="note"><para>the changing of the surface to a new resolution, regardless of being the requested width and/or height is considered a success. Only when the surface cannot change its resolution at all will resize return false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="86" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="39" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1aea8c5b3e320e0cd9a48964d318772b2a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classcore_1_1systems_1_1input" kindref="compound">core::systems::input</ref> &amp;</type>
        <definition>core::systems::input &amp; surface::input</definition>
        <argsstring>() const noexcept</argsstring>
        <name>input</name>
        <briefdescription>
<para>the input instance associated with this surface. </para>
        </briefdescription>
        <detaileddescription>
<para>every surface has its own input system even though that some platforms cannot have multiple surfaces, or that their input systems boil down to a singleton. by returning a specific instance, regardless of this we ensure that all access and handling is uniform across the various platforms. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="94" column="22" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1aa7b3ec29b0e211088c166922398989c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void surface::register_swapchain</definition>
        <argsstring>(core::resource::handle&lt; core::ivk::swapchain &gt; swapchain)</argsstring>
        <name>register_swapchain</name>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1swapchain" kindref="compound">core::ivk::swapchain</ref> &gt;</type>
          <declname>swapchain</declname>
        </param>
        <briefdescription>
<para>this method will be called by the swapchain class, so that the surface knows who to notify of resize events, etc.. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>can we hide this? </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="98" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a6663c80a05356802ff32faa6230bce16" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void core::os::surface::trap_cursor</definition>
        <argsstring>(bool state) noexcept</argsstring>
        <name>trap_cursor</name>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="100" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a092b8bc0edd54af600e82bb6e0a8cfef" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::os::surface::is_cursor_trapped</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_cursor_trapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="101" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a762ef959ba0f0cb0f456bae02fd0ad42" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::os::surface::init_surface</definition>
        <argsstring>()</argsstring>
        <name>init_surface</name>
        <briefdescription>
<para>platform specific method that initializes the surface and its resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="114" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1ad40219eaffa800921bbb38b09c47b93a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core::os::surface::deinit_surface</definition>
        <argsstring>()</argsstring>
        <name>deinit_surface</name>
        <briefdescription>
<para>platform specific method that deinitializes the surface and its resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="116" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1aef894665bad26d8223ca11b045347953" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core::os::surface::update_surface</definition>
        <argsstring>()</argsstring>
        <name>update_surface</name>
        <briefdescription>
<para>platform specific method that updates the surface and checks for messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="118" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1os_1_1surface_1a9e90e26528914217cfed9d1dd9589098" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core::os::surface::resize_surface</definition>
        <argsstring>()</argsstring>
        <name>resize_surface</name>
        <briefdescription>
<para>platform specific method that gets called on resize events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="120" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>primitive object that create a surface we can render on. </para>
    </briefdescription>
    <detaileddescription>
<para>create a surface we can render on, which, depending on the platform could be anything from a resizeable window to the sole surface we can present on (ex. mobile and console platforms). </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" line="38" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp" bodystart="37" bodyend="145"/>
    <listofallmembers>
      <member refid="classcore_1_1os_1_1surface_1a6b2f2142f6360410bd7d7e1a49bd4119" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>data</name></member>
      <member refid="classcore_1_1os_1_1surface_1ad40219eaffa800921bbb38b09c47b93a" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>deinit_surface</name></member>
      <member refid="classcore_1_1os_1_1surface_1ab80711d93e4bde3e8c69048aa5dce76f" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>focus</name></member>
      <member refid="classcore_1_1os_1_1surface_1a810b5dea484b2f6a6506d368e9d3f78d" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>focused</name></member>
      <member refid="classcore_1_1os_1_1surface_1a762ef959ba0f0cb0f456bae02fd0ad42" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>init_surface</name></member>
      <member refid="classcore_1_1os_1_1surface_1aea8c5b3e320e0cd9a48964d318772b2a" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>input</name></member>
      <member refid="classcore_1_1os_1_1surface_1a092b8bc0edd54af600e82bb6e0a8cfef" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>is_cursor_trapped</name></member>
      <member refid="classcore_1_1os_1_1surface_1a99269624200f025a6982d11ba5981e79" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_Data</name></member>
      <member refid="classcore_1_1os_1_1surface_1ada71bf0f1e1b45cdd1499e1bed6dc67b" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_Focused</name></member>
      <member refid="classcore_1_1os_1_1surface_1ac8cf7dd7ea0d08f09d6db76148db57bb" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_IndicatorClipped</name></member>
      <member refid="classcore_1_1os_1_1surface_1a0b5a120d13eb164ef9babc8c4242c549" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_IndicatorLocked</name></member>
      <member refid="classcore_1_1os_1_1surface_1a9c53a7cce547b31f471e4e0e9638eddf" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_IndicatorVisible</name></member>
      <member refid="classcore_1_1os_1_1surface_1ac417c707dc70194ce0922ddb7819952f" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_InputSystem</name></member>
      <member refid="classcore_1_1os_1_1surface_1ad27d425a53886fbc6283236ec6cfc13f" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_Open</name></member>
      <member refid="classcore_1_1os_1_1surface_1ac060c1e1392efb4cdeeb54bba0169d96" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>m_Swapchains</name></member>
      <member refid="classcore_1_1os_1_1surface_1aa23f9470673d35d4439c7e4ffac000a5" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>open</name></member>
      <member refid="classcore_1_1os_1_1surface_1ae3b0b37b01aa9cfd1eac224149246841" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>operator=</name></member>
      <member refid="classcore_1_1os_1_1surface_1ad6793b0f5571d2c6818df9f5e8f20691" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>operator=</name></member>
      <member refid="classcore_1_1os_1_1surface_1aa7b3ec29b0e211088c166922398989c7" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>register_swapchain</name></member>
      <member refid="classcore_1_1os_1_1surface_1a247b92e546cb8ddbe22fb62ac90d36f2" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>resize</name></member>
      <member refid="classcore_1_1os_1_1surface_1a9e90e26528914217cfed9d1dd9589098" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>resize_surface</name></member>
      <member refid="classcore_1_1os_1_1surface_1aece1cea8a1178b2e70cae961dfbe16b6" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>surface</name></member>
      <member refid="classcore_1_1os_1_1surface_1a45226bec2e8774f3c321b21a018940af" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>surface</name></member>
      <member refid="classcore_1_1os_1_1surface_1aff3508041f03ed60c80d42e2fb7f4a8c" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>surface</name></member>
      <member refid="classcore_1_1os_1_1surface_1af91fe0eafeed7556532c53591dd0da4e" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>terminate</name></member>
      <member refid="classcore_1_1os_1_1surface_1a6e0c9004afdea7cddbc17925b0da4eb0" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>tick</name></member>
      <member refid="classcore_1_1os_1_1surface_1a6663c80a05356802ff32faa6230bce16" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>trap_cursor</name></member>
      <member refid="classcore_1_1os_1_1surface_1aef894665bad26d8223ca11b045347953" prot="private" virt="non-virtual"><scope>core::os::surface</scope><name>update_surface</name></member>
      <member refid="classcore_1_1os_1_1surface_1a0d468eb3f6583074c61925c838ab7e42" prot="public" virt="non-virtual"><scope>core::os::surface</scope><name>~surface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
