<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="meta_2shader_8cpp" kind="file" language="C++">
    <compoundname>shader.cpp</compoundname>
    <includes refid="meta_2shader_8hpp" local="yes">meta/shader.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/paradigm/paradigm/core/src/meta/shader.cpp</label>
        <link refid="meta_2shader_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="24">
        <label>limits</label>
      </node>
      <node id="37">
        <label>iterator</label>
      </node>
      <node id="36">
        <label>psl/array_view.hpp</label>
        <link refid="array__view_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>psl/memory/range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>psl/math/vec.hpp</label>
        <link refid="vec_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>cstdint</label>
      </node>
      <node id="38">
        <label>psl/library.hpp</label>
        <link refid="library_8hpp_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>variant</label>
      </node>
      <node id="23">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>cassert</label>
      </node>
      <node id="11">
        <label>psl/platform_def.hpp</label>
        <link refid="platform__def_8hpp_source"/>
      </node>
      <node id="45">
        <label>numeric</label>
      </node>
      <node id="8">
        <label>psl/template_utils.hpp</label>
        <link refid="template__utils_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>unordered_set</label>
      </node>
      <node id="14">
        <label>fstream</label>
      </node>
      <node id="42">
        <label>psl/string_utils.hpp</label>
        <link refid="string__utils_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>psl/details/fixed_astring.hpp</label>
        <link refid="fixed__astring_8hpp_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="47">
        <label>string_view</label>
      </node>
      <node id="50">
        <label>psl/binary_utils.hpp</label>
        <link refid="binary__utils_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>psl/logging.hpp</label>
        <link refid="psl_2inc_2psl_2logging_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>bitset</label>
      </node>
      <node id="62">
        <label>psl/crc32.hpp</label>
        <link refid="crc32_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>optional</label>
      </node>
      <node id="49">
        <label>stack</label>
      </node>
      <node id="35">
        <label>vector</label>
      </node>
      <node id="16">
        <label>signal.h</label>
      </node>
      <node id="3">
        <label>gfx/types.hpp</label>
        <link refid="gfx_2types_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>psl/format.hpp</label>
        <link refid="format_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>utility</label>
      </node>
      <node id="6">
        <label>array</label>
      </node>
      <node id="46">
        <label>sstream</label>
      </node>
      <node id="29">
        <label>psl/math/fallback/vec.hpp</label>
        <link refid="fallback_2vec_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>psl/concepts.hpp</label>
        <link refid="concepts_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>psl/math/SSE/vec.hpp</label>
        <link refid="_s_s_e_2vec_8hpp_source"/>
      </node>
      <node id="54">
        <label>clocale</label>
      </node>
      <node id="53">
        <label>cctype</label>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="34">
        <label>psl/array.hpp</label>
        <link refid="array_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>unordered_map</label>
      </node>
      <node id="5">
        <label>psl/static_array.hpp</label>
        <link refid="static__array_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>psl/platform_utils.hpp</label>
        <link refid="platform__utils_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>psl/math/AVX2/vec.hpp</label>
        <link refid="_a_v_x2_2vec_8hpp_source"/>
      </node>
      <node id="57">
        <label>psl/serialization/property.hpp</label>
        <link refid="property_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>psl/meta.hpp</label>
        <link refid="meta_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>concepts</label>
      </node>
      <node id="26">
        <label>psl/math/AVX/vec.hpp</label>
        <link refid="_a_v_x_2vec_8hpp_source"/>
      </node>
      <node id="56">
        <label>thread</label>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
      <node id="32">
        <label>psl/memory/segment.hpp</label>
        <link refid="segment_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>meta/shader.hpp</label>
        <link refid="meta_2shader_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
      <node id="13">
        <label>cstring</label>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="48">
        <label>psl/serialization/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>psl/assertions.hpp</label>
        <link refid="assertions_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>experimental/filesystem</label>
      </node>
      <node id="10">
        <label>psl/ustring.hpp</label>
        <link refid="ustring_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;meta/shader.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecore_1_1meta" kindref="compound">core::meta</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">psl::serialization;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>shader::polymorphic_identity<sp/>{register_polymorphic&lt;shader&gt;()};</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="comment">//<sp/>shader::vertex::attribute::attribute()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shader::vertex::attribute::~attribute()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::vertex::attribute::location()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Location.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>core::gfx::format_t<sp/>shader::vertex::attribute::format()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Format.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::vertex::attribute::offset()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Offset.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::attribute::location(uint32_t<sp/>value)<sp/>{<sp/>m_Location.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::attribute::format(core::gfx::format_t<sp/>value)<sp/>{<sp/>m_Format.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::attribute::offset(uint32_t<sp/>value)<sp/>{<sp/>m_Offset.value<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight><highlight class="comment">//<sp/>shader::vertex::binding::binding()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shader::vertex::binding::~binding()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::vertex::binding::binding_slot()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Binding.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::vertex::binding::size()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Size.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>core::gfx::vertex_input_rate<sp/>shader::vertex::binding::input_rate()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_InputRate.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>psl::string8_t<sp/>shader::vertex::binding::buffer_t()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Buffer.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>std::vector&lt;shader::vertex::attribute&gt;&amp;<sp/>shader::vertex::binding::attributes()<sp/>const<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>m_Attributes.value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::binding::binding_slot(uint32_t<sp/>value)<sp/>{<sp/>m_Binding.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::binding::size(uint32_t<sp/>value)<sp/>{<sp/>m_Size.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::binding::input_rate(core::gfx::vertex_input_rate<sp/>value)<sp/>{<sp/>m_InputRate.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::binding::buffer_t(psl::string8_t<sp/>value)<sp/>{<sp/>m_Buffer.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::binding::attributes(const<sp/>std::vector&lt;shader::vertex::attribute&gt;&amp;<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_Attributes.value<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex::binding::set(attribute<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_Attributes.value),<sp/>std::end(m_Attributes.value),<sp/>[&amp;value](const<sp/>attribute&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//attribute)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>attribute.location()<sp/>==<sp/>value.location()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attribute.format()<sp/>==<sp/>value.format()/*<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//attribute.offset()<sp/>==<sp/>value.offset()*/;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_Attributes.value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m_Attributes.value.emplace_back(std::move(value));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>shader::vertex::binding::erase(attribute<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_Attributes.value),<sp/>std::end(m_Attributes.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>attribute&amp;<sp/>attribute)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>attribute.location()<sp/>==<sp/>value.location()<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attribute.format()<sp/>==<sp/>value.format()/*<sp/>&amp;&amp;<sp/>attribute.offset()<sp/>==<sp/>value.offset()*/;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_Attributes.value))<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_Attributes.value.erase(it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight><highlight class="comment">//<sp/>shader::instance::instance()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shader::instance::~instance()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>std::vector&lt;shader::instance::element&gt;&amp;<sp/>shader::instance::elements()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Elements.value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}<sp/>std::vector&lt;uint8_t&gt;<sp/>shader::instance::default_value()<sp/>const<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for(const<sp/>auto&amp;<sp/>element<sp/>:<sp/>m_Elements.value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>res.insert(std::end(res),<sp/>std::begin(element.default_value()),<sp/>std::end(element.default_value()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::instance::size()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Size.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::instance::elements(const<sp/>std::vector&lt;shader::instance::element&gt;&amp;<sp/>value)<sp/>{<sp/>m_Elements.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::instance::size(uint32_t<sp/>value)<sp/>{<sp/>m_Size.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::instance::set(element<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_Elements.value),<sp/>std::end(m_Elements.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>instance::element&amp;<sp/>element)<sp/>{<sp/>return<sp/>element.name()<sp/>==<sp/>value.name();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_Elements.value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m_Elements.value.emplace_back(std::move(value));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>shader::instance::erase(element<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_Elements.value),<sp/>std::end(m_Elements.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>instance::element&amp;<sp/>element)<sp/>{<sp/>return<sp/>element.name()<sp/>==<sp/>value.name();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_Elements.value))<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_Elements.value.erase(it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>shader::instance::erase(psl::string8::view<sp/>element_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(std::begin(m_Elements.value),<sp/>std::end(m_Elements.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;element_name](const<sp/>instance::element&amp;<sp/>element)<sp/>{<sp/>return<sp/>element.name()<sp/>==<sp/>element_name;<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_Elements.value))<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_Elements.value.erase(it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight><highlight class="comment">//<sp/>shader::instance::element::element()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shader::instance::element::~element()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>psl::string8::view<sp/>shader::instance::element::name()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Name.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>core::gfx::format_t<sp/>shader::instance::element::format()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Format.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::instance::element::offset()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Offset.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>std::vector&lt;uint8_t&gt;&amp;<sp/>shader::instance::element::default_value()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Default.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::instance::element::name(psl::string8::view<sp/>value)<sp/>{<sp/>m_Name.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::instance::element::format(core::gfx::format_t<sp/>value)<sp/>{<sp/>m_Format.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::instance::element::offset(uint32_t<sp/>value)<sp/>{<sp/>m_Offset.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::instance::element::default_value(const<sp/>std::vector&lt;uint8_t&gt;&amp;<sp/>value)<sp/>{<sp/>m_Default.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight><highlight class="comment">//<sp/>shader::descriptor::descriptor()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shader::descriptor::~descriptor()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>shader::descriptor::has_default_value()<sp/>const<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>std::any_of(std::begin(m_SubElements.value),<sp/>std::end(m_SubElements.value),<sp/>[](const<sp/>auto&amp;<sp/>element)<sp/>{<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//element.default_value().size()<sp/>&gt;<sp/>0;});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::descriptor::binding()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Binding.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uint32_t<sp/>shader::descriptor::size()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Size.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>psl::string8::view<sp/>shader::descriptor::name()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Name.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::vector&lt;uint8_t&gt;<sp/>shader::descriptor::default_value()<sp/>const<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for(const<sp/>auto&amp;<sp/>element<sp/>:<sp/>m_SubElements.value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>res.insert(std::end(res),<sp/>std::begin(element.default_value()),<sp/>std::end(element.default_value()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>core::gfx::binding_type<sp/>shader::descriptor::type()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Type.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>std::vector&lt;shader::instance::element&gt;&amp;<sp/>shader::descriptor::sub_elements()<sp/>const<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>m_SubElements.value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::descriptor::binding(uint32_t<sp/>value)<sp/>{<sp/>m_Binding.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::descriptor::size(uint32_t<sp/>value)<sp/>{<sp/>m_Size.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::descriptor::name(psl::string8::view<sp/>value)<sp/>{<sp/>m_Name.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::descriptor::type(core::gfx::binding_type<sp/>value)<sp/>{<sp/>m_Type.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::descriptor::sub_elements(const<sp/>std::vector&lt;shader::instance::element&gt;&amp;<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_SubElements.value<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::descriptor::set(instance::element<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_SubElements.value),<sp/>std::end(m_SubElements.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>instance::element&amp;<sp/>element)<sp/>{<sp/>return<sp/>element.name()<sp/>==<sp/>value.name();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_SubElements.value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m_SubElements.value.emplace_back(std::move(value));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>shader::descriptor::erase(instance::element<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_SubElements.value),<sp/>std::end(m_SubElements.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>instance::element&amp;<sp/>element)<sp/>{<sp/>return<sp/>element.name()<sp/>==<sp/>value.name();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_SubElements.value))<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_SubElements.value.erase(it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="199"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>core::gfx::shader_stage<sp/>shader::stage()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Stage.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>std::vector&lt;shader::vertex::binding&gt;&amp;<sp/>shader::vertex_bindings()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_VertexBindings.value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}<sp/>const<sp/>std::vector&lt;shader::descriptor&gt;&amp;<sp/>shader::descriptors()<sp/>const<sp/>noexcept<sp/>{<sp/>return<sp/>m_Descriptors.value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::stage(core::gfx::shader_stage<sp/>value)<sp/>noexcept<sp/>{<sp/>m_Stage.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::vertex_bindings(const<sp/>std::vector&lt;shader::vertex::binding&gt;&amp;<sp/>value)<sp/>{<sp/>m_VertexBindings.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::descriptors(const<sp/>std::vector&lt;descriptor&gt;&amp;<sp/>value)<sp/>{<sp/>m_Descriptors.value<sp/>=<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::set(shader::descriptor<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(std::begin(m_Descriptors.value),<sp/>std::end(m_Descriptors.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>shader::descriptor&amp;<sp/>descriptor)<sp/>{<sp/>return<sp/>descriptor.binding()<sp/>==<sp/>value.binding();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_Descriptors.value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m_Descriptors.value.emplace_back(std::move(value));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>shader::set(shader::vertex::binding<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_VertexBindings.value),<sp/>std::end(m_VertexBindings.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>shader::vertex::binding&amp;<sp/>binding)<sp/>{<sp/>return<sp/>binding.binding_slot()<sp/>==<sp/>value.binding_slot();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_VertexBindings.value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m_VertexBindings.value.emplace_back(std::move(value));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>shader::erase(shader::vertex::binding<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_VertexBindings.value),<sp/>std::end(m_VertexBindings.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>shader::vertex::binding&amp;<sp/>binding)<sp/>{<sp/>return<sp/>binding.binding_slot()<sp/>==<sp/>value.binding_slot();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_VertexBindings.value))<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_VertexBindings.value.erase(it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>shader::erase(shader::descriptor<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(std::begin(m_Descriptors.value),<sp/>std::end(m_Descriptors.value),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>[&amp;value](const<sp/>shader::descriptor&amp;<sp/>descriptor)<sp/>{<sp/>return<sp/>descriptor.binding()<sp/>==<sp/>value.binding();<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>==<sp/>std::end(m_Descriptors.value))<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_Descriptors.value.erase(it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::vector&lt;shader::vertex::binding&gt;<sp/>shader::instance_bindings()<sp/>const<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::vector&lt;shader::vertex::binding&gt;<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for(const<sp/>auto&amp;<sp/>binding<sp/>:<sp/>m_VertexBindings.value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if(psl::string8::view(binding.buffer()).substr(0,<sp/>9)<sp/>!=<sp/>&quot;INSTANCE_&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>res.emplace_back(binding);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::optional&lt;shader::descriptor&gt;<sp/>shader::material_data()<sp/>const<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>auto<sp/>it<sp/>=<sp/>std::find_if(std::begin(m_Descriptors.value),<sp/>std::end(m_Descriptors.value),<sp/>[](const<sp/>auto&amp;<sp/>descriptor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return(descriptor.name()<sp/>==<sp/>&quot;MATERIAL_DATA&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::optional&lt;shader::descriptor&gt;<sp/>res{std::nullopt};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(it<sp/>!=<sp/>std::end(m_Descriptors.value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>*it;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/paradigm/paradigm/core/src/meta/shader.cpp"/>
  </compounddef>
</doxygen>
