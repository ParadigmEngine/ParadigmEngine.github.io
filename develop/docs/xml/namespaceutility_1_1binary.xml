<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceutility_1_1binary" kind="namespace" language="C++">
    <compoundname>utility::binary</compoundname>
    <innerclass refid="structutility_1_1binary_1_1byte__size" prot="public">utility::binary::byte_size</innerclass>
    <innerclass refid="structutility_1_1binary_1_1byte__size_3_01double_01_4" prot="public">utility::binary::byte_size&lt; double &gt;</innerclass>
    <innerclass refid="structutility_1_1binary_1_1byte__size_3_01float_01_4" prot="public">utility::binary::byte_size&lt; float &gt;</innerclass>
    <innerclass refid="structutility_1_1binary_1_1byte__size_3_01int_01_4" prot="public">utility::binary::byte_size&lt; int &gt;</innerclass>
    <innerclass refid="structutility_1_1binary_1_1byte__size_3_01psl_1_1string8__t_01_4" prot="public">utility::binary::byte_size&lt; psl::string8_t &gt;</innerclass>
    <innerclass refid="structutility_1_1binary_1_1get__contained__type" prot="public">utility::binary::get_contained_type</innerclass>
    <innerclass refid="structutility_1_1binary_1_1get__contained__type_3_01std_1_1vector_3_01_t_00_01_a_01_4_01_4" prot="public">utility::binary::get_contained_type&lt; std::vector&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1binary_1_1has__contained__type" prot="public">utility::binary::has_contained_type</innerclass>
    <innerclass refid="structutility_1_1binary_1_1has__contained__type_3_01std_1_1vector_3_01_t_00_01_a_01_4_01_4" prot="public">utility::binary::has_contained_type&lt; std::vector&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1binary_1_1is__container" prot="public">utility::binary::is_container</innerclass>
    <innerclass refid="structutility_1_1binary_1_1is__container_3_01std_1_1tuple_3_01_t_00_01_a_8_8_8_01_4_01_4" prot="public">utility::binary::is_container&lt; std::tuple&lt; T, A... &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1binary_1_1is__container_3_01std_1_1vector_3_01_t_00_01_a_01_4_01_4" prot="public">utility::binary::is_container&lt; std::vector&lt; T, A &gt; &gt;</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceutility_1_1binary_1a07f9073154118c53540adfcbf1133bf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::write_8b</definition>
        <argsstring>(T *target, std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>write_8b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>writes in sets of 8 bytes to the target location </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the source of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in the source data (offset is in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier to the size of to write (1 size is equivalent to 8 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="77" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a754b31d213c32473be6209e1fb87c74d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::write_4b</definition>
        <argsstring>(T *target, std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>write_4b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>writes in sets of 4 bytes to the target location </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the source of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in the source data (offset is in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier to the size of to write (1 size is equivalent to 4 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="88" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a18bf3958d005904c59665fb6d0c5edc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::write_2b</definition>
        <argsstring>(T *target, std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>write_2b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>writes in sets of 2 bytes to the target location </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the source of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in the source data (offset is in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier to the size of to write (1 size is equivalent to 2 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="99" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1ad300b6a4c023c9bc6f552d4f3d67d193" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::write_1b</definition>
        <argsstring>(T *target, std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>write_1b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>writes in sets of 1 byte to the target location </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the source of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in the source data (offset is in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier to the size of to write (1 size is equivalent to 1 byte). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="110" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a8822d1ebbee1193306d034a114f806d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void utility::binary::write</definition>
        <argsstring>(void *target, std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t bytes, size_t size=1)</argsstring>
        <name>write</name>
        <param>
          <type>void *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="115" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a9b04b275947bc52860121ef5911e9e08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_8b</definition>
        <argsstring>(T *target, const std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_8b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="121" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1aeb944ec6cd7d05d5dff5bb73b954b9a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_4b</definition>
        <argsstring>(T *target, const std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_4b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="127" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a7c5f5c136fc3aa5bdf47a70d07601373" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_2b</definition>
        <argsstring>(T *target, const std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_2b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="134" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a5175a815e2ac37ad68dfb73be270a589" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_1b</definition>
        <argsstring>(T *target, const std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_1b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="140" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a5b4e0bc7af49788e885905982d38aa51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void utility::binary::read</definition>
        <argsstring>(void *target, const std::vector&lt; uint8_t &gt; &amp;buffer, size_t offset, size_t bytes, size_t size=1)</argsstring>
        <name>read</name>
        <param>
          <type>void *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="146" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1afca8efe191b45d2f8629599961c44f57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_8b</definition>
        <argsstring>(T *target, const psl::string8::view &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_8b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const psl::string8::view &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="152" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a857a39f98693a0ca3619df9061285066" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_4b</definition>
        <argsstring>(T *target, const psl::string8::view &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_4b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const psl::string8::view &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="158" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a3a114789f2baf9d5345d736056ba845f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_2b</definition>
        <argsstring>(T *target, const psl::string8::view &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_2b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const psl::string8::view &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="165" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a924768c602cbd77b6c0d2c7ec7c4f77d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::binary::read_1b</definition>
        <argsstring>(T *target, const psl::string8::view &amp;buffer, size_t offset, size_t size=1)</argsstring>
        <name>read_1b</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const psl::string8::view &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="171" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1_1binary_1a6bf717ebba726940d2a5100d05e14882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void utility::binary::read</definition>
        <argsstring>(void *target, const psl::string8::view &amp;buffer, size_t offset, size_t bytes, size_t size=1)</argsstring>
        <name>read</name>
        <param>
          <type>void *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const psl::string8::view &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="176" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" bodystart="176" bodyend="179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>contains various utilities in helping you to convert to, and from a byte stream. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp" line="12" column="1"/>
  </compounddef>
</doxygen>
