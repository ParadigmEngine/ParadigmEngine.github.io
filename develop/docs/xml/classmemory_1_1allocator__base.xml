<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmemory_1_1allocator__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>memory::allocator_base</compoundname>
    <derivedcompoundref refid="classmemory_1_1block__allocator" prot="public" virt="non-virtual">memory::block_allocator</derivedcompoundref>
    <derivedcompoundref refid="classmemory_1_1default__allocator" prot="public" virt="non-virtual">memory::default_allocator</derivedcompoundref>
    <includes refid="allocator_8hpp" local="no">allocator.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmemory_1_1allocator__base_1a0c1a2dfb50d276e1264e5aedb56c3069" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class region</definition>
        <argsstring></argsstring>
        <name>region</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="17" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmemory_1_1allocator__base_1a11967f3a2bb3fa52ef5f6536fd7147cd" prot="private" static="no" mutable="no">
        <type><ref refid="classmemory_1_1region" kindref="compound">region</ref> *</type>
        <definition>region* memory::allocator_base::m_Region</definition>
        <argsstring></argsstring>
        <name>m_Region</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="49" column="8" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmemory_1_1allocator__base_1ad90335ee69f72cca3874cabe4332b487" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool memory::allocator_base::m_IsPhysicallyBacked</definition>
        <argsstring></argsstring>
        <name>m_IsPhysicallyBacked</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="57" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmemory_1_1allocator__base_1ad5d9bee43e84374b6a472eab100778f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>memory::allocator_base::allocator_base</definition>
        <argsstring>(bool physically_backed=true)</argsstring>
        <name>allocator_base</name>
        <param>
          <type>bool</type>
          <declname>physically_backed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="20" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1aaed0b3e05165b0016a06efa6d3a82253" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual memory::allocator_base::~allocator_base</definition>
        <argsstring>()=default</argsstring>
        <name>~allocator_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="21" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a8a739e71de034018dc1bad3b5c4610a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>memory::allocator_base::allocator_base</definition>
        <argsstring>(const allocator_base &amp;)=delete</argsstring>
        <name>allocator_base</name>
        <param>
          <type>const <ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a128d2b0abaa5c09d15b4dfb45c8c6a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref> &amp;</type>
        <definition>allocator_base&amp; memory::allocator_base::operator=</definition>
        <argsstring>(const allocator_base &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="24" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a70fc8dd6504d162ef9fcec2f2d430d8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &gt;</type>
        <definition>std::optional&lt;segment&gt; memory::allocator_base::allocate</definition>
        <argsstring>(std::size_t bytes)</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="26" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a2bc4dab10acef2888165886767a82788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool allocator_base::deallocate</definition>
        <argsstring>(segment &amp;segment)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="32" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="17" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1af09c2414bdc81b836406c69fe41cf213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &gt;</type>
        <definition>std::vector&lt; range_t &gt; allocator_base::committed</definition>
        <argsstring>()</argsstring>
        <name>committed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="34" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a0a7a8654e4d91232cbca36f77de1062a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &gt;</type>
        <definition>std::vector&lt; range_t &gt; allocator_base::available</definition>
        <argsstring>()</argsstring>
        <name>available</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="35" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a965361530e1829cd69d075f1ea3f894b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool memory::allocator_base::is_physically_backed</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_physically_backed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="36" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a631aaea05e2227040676bacd1a815978" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t allocator_base::alignment</definition>
        <argsstring>() const noexcept</argsstring>
        <name>alignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="38" column="8" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1ae30458b0f04867bebd9cf36b957a260b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool allocator_base::owns</definition>
        <argsstring>(const memory::segment &amp;segment) const noexcept</argsstring>
        <name>owns</name>
        <param>
          <type>const <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="40" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="8" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a55afd4a585a25537de1ad96ea5d30537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void allocator_base::compact</definition>
        <argsstring>()</argsstring>
        <name>compact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="42" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="33" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmemory_1_1allocator__base_1adfcea51583c36bc5a9819ed4d0e49cc6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool allocator_base::commit</definition>
        <argsstring>(const range_t &amp;range)</argsstring>
        <name>commit</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="45" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1aae63c94cb09359c6b7aa79bec30029b4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmemory_1_1range__t" kindref="compound">memory::range_t</ref></type>
        <definition>memory::range_t allocator_base::get_range</definition>
        <argsstring>() const</argsstring>
        <name>get_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="46" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="38" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmemory_1_1allocator__base_1ac57d9a6f0c8063ed5e95922838d29b13" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; <ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &gt;</type>
        <definition>virtual std::optional&lt;segment&gt; memory::allocator_base::do_allocate</definition>
        <argsstring>(region *region, std::size_t bytes)=0</argsstring>
        <name>do_allocate</name>
        <reimplementedby refid="classmemory_1_1default__allocator_1a52f20d2bdc1e11d61b5b3be00ea8565f">do_allocate</reimplementedby>
        <reimplementedby refid="classmemory_1_1block__allocator_1ad496019c22724eba2725f6e5540fabc6">do_allocate</reimplementedby>
        <param>
          <type><ref refid="classmemory_1_1region" kindref="compound">region</ref> *</type>
          <declname>region</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="50" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a000d33a26cec374ac82daaa9dc01f70c" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool memory::allocator_base::do_deallocate</definition>
        <argsstring>(segment &amp;segment)=0</argsstring>
        <name>do_deallocate</name>
        <reimplementedby refid="classmemory_1_1default__allocator_1a3f21ba3804606679ea10fcb1b3230b2a">do_deallocate</reimplementedby>
        <reimplementedby refid="classmemory_1_1block__allocator_1a937ad924132c90ae73d77f52c5372c88">do_deallocate</reimplementedby>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="51" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a85cb176746b240372274d6c6214efd51" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void memory::allocator_base::initialize</definition>
        <argsstring>([[maybe_unused]] region *region)</argsstring>
        <name>initialize</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] <ref refid="classmemory_1_1region" kindref="compound">region</ref> *</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="52" column="14" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1aeb02d1e41dfeca4bd6ab3814e9f2b6fd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &gt;</type>
        <definition>virtual std::vector&lt;range_t&gt; memory::allocator_base::get_committed</definition>
        <argsstring>() const =0</argsstring>
        <name>get_committed</name>
        <reimplementedby refid="classmemory_1_1default__allocator_1aa616219b14872d2e033f40d22129c7fb">get_committed</reimplementedby>
        <reimplementedby refid="classmemory_1_1block__allocator_1a55b9209c8b9586a24daefda61ca4b942">get_committed</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="53" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a50ede03cd6c7958855a4528e6adb87ff" prot="private" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &gt;</type>
        <definition>virtual std::vector&lt;range_t&gt; memory::allocator_base::get_available</definition>
        <argsstring>() const =0</argsstring>
        <name>get_available</name>
        <reimplementedby refid="classmemory_1_1default__allocator_1ab2d18a991bbd75472803a360876a176d">get_available</reimplementedby>
        <reimplementedby refid="classmemory_1_1block__allocator_1a2b36454af71bd94468a7dcc297827b3e">get_available</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="54" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a96c1ba1da804e6619e15b413c8dd1ea2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void memory::allocator_base::do_compact</definition>
        <argsstring>([[maybe_unused]] region *region)</argsstring>
        <name>do_compact</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] <ref refid="classmemory_1_1region" kindref="compound">region</ref> *</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="55" column="14" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1allocator__base_1a72a4b8ebe8f787316686d311a3fadc83" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool memory::allocator_base::get_owns</definition>
        <argsstring>(const memory::segment &amp;segment) const noexcept=0</argsstring>
        <name>get_owns</name>
        <reimplementedby refid="classmemory_1_1default__allocator_1a026bf7783583b270d6a8b6c6d144e167">get_owns</reimplementedby>
        <reimplementedby refid="classmemory_1_1block__allocator_1ad8511c83dafe8fda792e92c6792e9471">get_owns</reimplementedby>
        <param>
          <type>const <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="56" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>base class that defines the interface for an allocator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>memory::block_allocator</label>
        <link refid="classmemory_1_1block__allocator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>memory::default_allocator</label>
        <link refid="classmemory_1_1default__allocator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>memory::allocator_base</label>
        <link refid="classmemory_1_1allocator__base"/>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="16" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="15" bodyend="58"/>
    <listofallmembers>
      <member refid="classmemory_1_1allocator__base_1a631aaea05e2227040676bacd1a815978" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>alignment</name></member>
      <member refid="classmemory_1_1allocator__base_1a70fc8dd6504d162ef9fcec2f2d430d8b" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>allocate</name></member>
      <member refid="classmemory_1_1allocator__base_1ad5d9bee43e84374b6a472eab100778f4" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>allocator_base</name></member>
      <member refid="classmemory_1_1allocator__base_1a8a739e71de034018dc1bad3b5c4610a3" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>allocator_base</name></member>
      <member refid="classmemory_1_1allocator__base_1a0a7a8654e4d91232cbca36f77de1062a" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>available</name></member>
      <member refid="classmemory_1_1allocator__base_1adfcea51583c36bc5a9819ed4d0e49cc6" prot="protected" virt="non-virtual"><scope>memory::allocator_base</scope><name>commit</name></member>
      <member refid="classmemory_1_1allocator__base_1af09c2414bdc81b836406c69fe41cf213" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>committed</name></member>
      <member refid="classmemory_1_1allocator__base_1a55afd4a585a25537de1ad96ea5d30537" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>compact</name></member>
      <member refid="classmemory_1_1allocator__base_1a2bc4dab10acef2888165886767a82788" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>deallocate</name></member>
      <member refid="classmemory_1_1allocator__base_1ac57d9a6f0c8063ed5e95922838d29b13" prot="private" virt="pure-virtual"><scope>memory::allocator_base</scope><name>do_allocate</name></member>
      <member refid="classmemory_1_1allocator__base_1a96c1ba1da804e6619e15b413c8dd1ea2" prot="private" virt="virtual"><scope>memory::allocator_base</scope><name>do_compact</name></member>
      <member refid="classmemory_1_1allocator__base_1a000d33a26cec374ac82daaa9dc01f70c" prot="private" virt="pure-virtual"><scope>memory::allocator_base</scope><name>do_deallocate</name></member>
      <member refid="classmemory_1_1allocator__base_1a50ede03cd6c7958855a4528e6adb87ff" prot="private" virt="pure-virtual"><scope>memory::allocator_base</scope><name>get_available</name></member>
      <member refid="classmemory_1_1allocator__base_1aeb02d1e41dfeca4bd6ab3814e9f2b6fd" prot="private" virt="pure-virtual"><scope>memory::allocator_base</scope><name>get_committed</name></member>
      <member refid="classmemory_1_1allocator__base_1a72a4b8ebe8f787316686d311a3fadc83" prot="private" virt="pure-virtual"><scope>memory::allocator_base</scope><name>get_owns</name></member>
      <member refid="classmemory_1_1allocator__base_1aae63c94cb09359c6b7aa79bec30029b4" prot="protected" virt="non-virtual"><scope>memory::allocator_base</scope><name>get_range</name></member>
      <member refid="classmemory_1_1allocator__base_1a85cb176746b240372274d6c6214efd51" prot="private" virt="virtual"><scope>memory::allocator_base</scope><name>initialize</name></member>
      <member refid="classmemory_1_1allocator__base_1a965361530e1829cd69d075f1ea3f894b" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>is_physically_backed</name></member>
      <member refid="classmemory_1_1allocator__base_1ad90335ee69f72cca3874cabe4332b487" prot="private" virt="non-virtual"><scope>memory::allocator_base</scope><name>m_IsPhysicallyBacked</name></member>
      <member refid="classmemory_1_1allocator__base_1a11967f3a2bb3fa52ef5f6536fd7147cd" prot="private" virt="non-virtual"><scope>memory::allocator_base</scope><name>m_Region</name></member>
      <member refid="classmemory_1_1allocator__base_1a128d2b0abaa5c09d15b4dfb45c8c6a0b" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>operator=</name></member>
      <member refid="classmemory_1_1allocator__base_1ae30458b0f04867bebd9cf36b957a260b" prot="public" virt="non-virtual"><scope>memory::allocator_base</scope><name>owns</name></member>
      <member refid="classmemory_1_1allocator__base_1a0c1a2dfb50d276e1264e5aedb56c3069" prot="private" virt="non-virtual"><scope>memory::allocator_base</scope><name>region</name></member>
      <member refid="classmemory_1_1allocator__base_1aaed0b3e05165b0016a06efa6d3a82253" prot="public" virt="virtual"><scope>memory::allocator_base</scope><name>~allocator_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
