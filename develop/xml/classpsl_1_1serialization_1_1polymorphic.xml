<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpsl_1_1serialization_1_1polymorphic" kind="class" language="C++" prot="public" final="yes">
    <compoundname>psl::serialization::polymorphic</compoundname>
    <basecompoundref prot="public" virt="non-virtual">psl::serialization::polymorphic_base</basecompoundref>
    <includes refid="serializer_8hpp" local="no">serializer.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classpsl_1_1serialization_1_1polymorphic_1a23be1c2c9d8122aa3488f5894650560a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t psl::serialization::polymorphic&lt; T &gt;::ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <initializer>{accessor::id&lt;T&gt;()}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" line="853" column="27" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" bodystart="853" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsl_1_1serialization_1_1polymorphic_1a05dd8b6018cde9a496f09138cae7bc4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>psl::serialization::polymorphic&lt; T &gt;::polymorphic</definition>
        <argsstring>()</argsstring>
        <name>polymorphic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" line="821" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" bodystart="821" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1serialization_1_1polymorphic_1a2d47d1e173bb75ce9d78ba870efded5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual psl::serialization::polymorphic&lt; T &gt;::~polymorphic</definition>
        <argsstring>()</argsstring>
        <name>~polymorphic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" line="851" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" bodystart="851" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1serialization_1_1polymorphic_1ade579c5f084c6de2c297f2fa12604e06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t psl::serialization::polymorphic&lt; T &gt;::PolymorphicID</definition>
        <argsstring>() const override</argsstring>
        <name>PolymorphicID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" line="852" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" bodystart="852" bodyend="852"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>contains the polymorphic lambda constructor for your polymorphic type </para>
    </briefdescription>
    <detaileddescription>
<para>This will be used by the deserializer to create the correct type for the format node. All polymorphic types are internally mapped to an ID (generated from a name you give). These values are saved in the format, and on deserialization are used to figure out how to construct the object in the format. Aside from the fact you need to register your polymorphic types (once), there should be no further interaction with this class. </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" line="819" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp" bodystart="818" bodyend="854"/>
    <listofallmembers>
      <member refid="classpsl_1_1serialization_1_1polymorphic_1a23be1c2c9d8122aa3488f5894650560a" prot="public" virt="non-virtual"><scope>psl::serialization::polymorphic</scope><name>ID</name></member>
      <member refid="classpsl_1_1serialization_1_1polymorphic_1a05dd8b6018cde9a496f09138cae7bc4e" prot="public" virt="non-virtual"><scope>psl::serialization::polymorphic</scope><name>polymorphic</name></member>
      <member refid="classpsl_1_1serialization_1_1polymorphic_1ade579c5f084c6de2c297f2fa12604e06" prot="public" virt="non-virtual"><scope>psl::serialization::polymorphic</scope><name>PolymorphicID</name></member>
      <member refid="classpsl_1_1serialization_1_1polymorphic_1a2d47d1e173bb75ce9d78ba870efded5e" prot="public" virt="virtual"><scope>psl::serialization::polymorphic</scope><name>~polymorphic</name></member>
      <member refid="structpsl_1_1serialization_1_1polymorphic__base_1ada518ead960ab32464578296cbc7fbe0" prot="public" virt="virtual"><scope>psl::serialization::polymorphic</scope><name>~polymorphic_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
