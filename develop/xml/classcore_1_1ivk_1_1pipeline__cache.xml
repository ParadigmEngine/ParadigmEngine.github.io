<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1ivk_1_1pipeline__cache" kind="class" language="C++" prot="public">
    <compoundname>core::ivk::pipeline_cache</compoundname>
    <includes refid="vk_2pipeline__cache_8hpp" local="no">pipeline_cache.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline__cache_1a0ab8950cfc4753d8fcd245d86bc4a8eb" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1context" kindref="compound">core::ivk::context</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::context&gt; core::ivk::pipeline_cache::m_Context</definition>
        <argsstring></argsstring>
        <name>m_Context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="125" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline__cache_1a0c5f6470c147e3a909807234ec06eb71" prot="private" static="no" mutable="no">
        <type>core::resource::cache_t &amp;</type>
        <definition>core::resource::cache_t&amp; core::ivk::pipeline_cache::m_Cache</definition>
        <argsstring></argsstring>
        <name>m_Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="126" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline__cache_1afd75d1eab77ca25356621bf952b7da7d" prot="private" static="no" mutable="no">
        <type>vk::PipelineCache</type>
        <definition>vk::PipelineCache core::ivk::pipeline_cache::m_PipelineCache</definition>
        <argsstring></argsstring>
        <name>m_PipelineCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="127" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline__cache_1a4707506c2771233673fcfdd6b34f5f94" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structcore_1_1ivk_1_1pipeline__key" kindref="compound">pipeline_key</ref>, <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;pipeline_key, core::resource::handle&lt;core::ivk::pipeline&gt; &gt; core::ivk::pipeline_cache::m_Pipelines</definition>
        <argsstring></argsstring>
        <name>m_Pipelines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="131" column="20" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1a2387ee1a5db7623e71edc166f648de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pipeline_cache::pipeline_cache</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::resource::handle&lt; core::ivk::context &gt; context)</argsstring>
        <name>pipeline_cache</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1context" kindref="compound">core::ivk::context</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="97" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline_cache.cpp" bodystart="16" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1acfc0a1fa55a2b4e66fd2735a1408449c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline_cache::~pipeline_cache</definition>
        <argsstring>()</argsstring>
        <name>~pipeline_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1a42d2c1ae7e08ab4021ec8037333bf2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline_cache::pipeline_cache</definition>
        <argsstring>(const pipeline_cache &amp;)=delete</argsstring>
        <name>pipeline_cache</name>
        <param>
          <type>const <ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">pipeline_cache</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1adb98824497b3b98b4dcf170216d03ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline_cache::pipeline_cache</definition>
        <argsstring>(pipeline_cache &amp;&amp;)=delete</argsstring>
        <name>pipeline_cache</name>
        <param>
          <type><ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">pipeline_cache</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1a5fd189e2223e1a60d5e08ea6ca343215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">pipeline_cache</ref> &amp;</type>
        <definition>pipeline_cache&amp; core::ivk::pipeline_cache::operator=</definition>
        <argsstring>(const pipeline_cache &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">pipeline_cache</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="104" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1ad58e96f21cd4a7680ccd9a2ac6725026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">pipeline_cache</ref> &amp;</type>
        <definition>pipeline_cache&amp; core::ivk::pipeline_cache::operator=</definition>
        <argsstring>(pipeline_cache &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">pipeline_cache</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="105" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1a25d14449ec619f9588066d7aa671a81a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::pipeline&gt; core::ivk::pipeline_cache::get</definition>
        <argsstring>(const psl::UID &amp;uid, core::resource::handle&lt; core::data::material_t &gt; data, core::resource::handle&lt; core::ivk::framebuffer_t &gt; framebuffer)</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>uid</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1framebuffer__t" kindref="compound">core::ivk::framebuffer_t</ref> &gt;</type>
          <declname>framebuffer</declname>
        </param>
        <briefdescription>
<para>allows you to get a pipeline that satisfy the material requirements and is bound to the given framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a handle to a pipeline object. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the material containing the description of all bindings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">framebuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the framebuffer that will be bound to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="112" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline__cache_1a6413cc4930dc417788f920549eb5b8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::pipeline&gt; core::ivk::pipeline_cache::get</definition>
        <argsstring>(const psl::UID &amp;uid, core::resource::handle&lt; core::data::material_t &gt; data, core::resource::handle&lt; core::ivk::swapchain &gt; swapchain)</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>uid</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1swapchain" kindref="compound">core::ivk::swapchain</ref> &gt;</type>
          <declname>swapchain</declname>
        </param>
        <briefdescription>
<para>allows you to get a pipeline that satisfy the material requirements and is bound to the given swapchain. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a handle to a pipeline object. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the material containing the description of all bindings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>the swapchain that will be bound to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="120" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>the pipeline cache allows sharing of pipelines between various materials. </para>
    </briefdescription>
    <detaileddescription>
<para>the pipeline cache allows sharing of pipelines between various materials. it is responsible for the creation and destruction of all pipeline objects, as well as providing easy facilities to get pipelines based on material descriptions. </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="95" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="94" bodyend="132"/>
    <listofallmembers>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a25d14449ec619f9588066d7aa671a81a" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>get</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a6413cc4930dc417788f920549eb5b8e8" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>get</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a0c5f6470c147e3a909807234ec06eb71" prot="private" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>m_Cache</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a0ab8950cfc4753d8fcd245d86bc4a8eb" prot="private" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>m_Context</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1afd75d1eab77ca25356621bf952b7da7d" prot="private" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>m_PipelineCache</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a4707506c2771233673fcfdd6b34f5f94" prot="private" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>m_Pipelines</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a5fd189e2223e1a60d5e08ea6ca343215" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>operator=</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1ad58e96f21cd4a7680ccd9a2ac6725026" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>operator=</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a2387ee1a5db7623e71edc166f648de4e" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>pipeline_cache</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1a42d2c1ae7e08ab4021ec8037333bf2e8" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>pipeline_cache</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1adb98824497b3b98b4dcf170216d03ac5" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>pipeline_cache</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline__cache_1acfc0a1fa55a2b4e66fd2735a1408449c" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_cache</scope><name>~pipeline_cache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
