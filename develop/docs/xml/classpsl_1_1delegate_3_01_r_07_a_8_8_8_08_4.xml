<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>psl::delegate&lt; R(A...)&gt;</compoundname>
    <innerclass refid="structpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1_1is__const__member__pair" prot="private">psl::delegate&lt; R(A...)&gt;::is_const_member_pair</innerclass>
    <innerclass refid="structpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1_1is__const__member__pair_3_1_1std_1_1pair_3_01_c_c682189a83da45e6407b17a880cf8b28" prot="private">psl::delegate&lt; R(A...)&gt;::is_const_member_pair&lt;::std::pair&lt; C const *const, R(C::*const)(A...) const &gt; &gt;</innerclass>
    <innerclass refid="structpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1_1is__member__pair" prot="private">psl::delegate&lt; R(A...)&gt;::is_member_pair</innerclass>
    <innerclass refid="structpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1_1is__member__pair_3_1_1std_1_1pair_3_01_c_01_5conf148ed9980903e5aa1a4110094a10658" prot="private">psl::delegate&lt; R(A...)&gt;::is_member_pair&lt;::std::pair&lt; C *const, R(C::*const)(A...)&gt; &gt;</innerclass>
    <templateparamlist>
      <param>
        <type>class R</type>
      </param>
      <param>
        <type>class...</type>
        <declname>A</declname>
        <defname>A</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a4b78f6fe7c7aee16e981730cd6ee8f2f" prot="private" static="no">
        <type>R(*)(void *, A &amp;&amp;...)</type>
        <definition>using psl::delegate&lt; R(A...)&gt;::stub_ptr_type =  R (*)(void*, A&amp;&amp;...)</definition>
        <argsstring></argsstring>
        <name>stub_ptr_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="24" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a414008feef9e705cb055cc75270bbb8d" prot="private" static="no">
        <type>void(*)(void *)</type>
        <definition>using psl::delegate&lt; R(A...)&gt;::deleter_type =  void (*)(void*)</definition>
        <argsstring></argsstring>
        <name>deleter_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="238" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ac4ca88f2c7dfe654c37848877794b4c1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>::std::pair&lt; C *const, R(C::*const)(A...)&gt;</type>
        <definition>using psl::delegate&lt; R(A...)&gt;::member_pair =  ::std::pair&lt;C* const, R (C::*const)(A...)&gt;</definition>
        <argsstring></argsstring>
        <name>member_pair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="172" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a7b69f088d18bffe293fce37b7909320f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>::std::pair&lt; C const  *const, R(C::*const)(A...) const  &gt;</type>
        <definition>using psl::delegate&lt; R(A...)&gt;::const_member_pair =  ::std::pair&lt;C const* const, R (C::*const)(A...) const&gt;</definition>
        <argsstring></argsstring>
        <name>const_member_pair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="175" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a950778971a6c7f9e9a520dadb55fb49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct ::std::hash&lt; delegate &gt;</definition>
        <argsstring></argsstring>
        <name>::std::hash&lt; delegate &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="229" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a0873be9752ce01c956039f7b34f1293f" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* psl::delegate&lt; R(A...)&gt;::object_ptr_</definition>
        <argsstring></argsstring>
        <name>object_ptr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="240" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a30b9695eba66c4e95cb73f4c81cbf06d" prot="private" static="no" mutable="no">
        <type>stub_ptr_type</type>
        <definition>stub_ptr_type psl::delegate&lt; R(A...)&gt;::stub_ptr_</definition>
        <argsstring></argsstring>
        <name>stub_ptr_</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="241" column="15" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ada7157355cfa87dc0e985623597c65ed" prot="private" static="no" mutable="no">
        <type>deleter_type</type>
        <definition>deleter_type psl::delegate&lt; R(A...)&gt;::deleter_</definition>
        <argsstring></argsstring>
        <name>deleter_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="243" column="14" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ad62554d53134a8f785aacdb8f6a207db" prot="private" static="no" mutable="no">
        <type>::std::shared_ptr&lt; void &gt;</type>
        <definition>::std::shared_ptr&lt;void&gt; psl::delegate&lt; R(A...)&gt;::store_</definition>
        <argsstring></argsstring>
        <name>store_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="245" column="19" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a8d1c41ec40251e0d9203dffd84705e2f" prot="private" static="no" mutable="no">
        <type>::std::size_t</type>
        <definition>::std::size_t psl::delegate&lt; R(A...)&gt;::store_size_</definition>
        <argsstring></argsstring>
        <name>store_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="246" column="15" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a911b00688e15f1706eacbea59dbfb528" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(void *const o, stub_ptr_type const m) noexcept</argsstring>
        <name>delegate</name>
        <param>
          <type>void *const</type>
          <declname>o</declname>
        </param>
        <param>
          <type>stub_ptr_type const</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="26" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a5a0b9d128a0fdafffd92f83d4ae1b8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>()=default</argsstring>
        <name>delegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a56c1997dc286bed4567b179776550d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(delegate const &amp;)=default</argsstring>
        <name>delegate</name>
        <param>
          <type>delegate const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab8716b7fd42ec11caa92aeeabac683cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(delegate &amp;&amp;)=default</argsstring>
        <name>delegate</name>
        <param>
          <type>delegate &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a706eb51e61656f651de372dfe7ff4fb5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(::std::nullptr_t const) noexcept</argsstring>
        <name>delegate</name>
        <param>
          <type>::std::nullptr_t const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="35" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a22c821715a1aec8c1b34521559a8d7c9" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename ::std::enable_if&lt;::std::is_class&lt;C&gt; {}&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(C const *const o) noexcept</argsstring>
        <name>delegate</name>
        <param>
          <type>C const *const</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="38" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="38" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a7d1c070b236da2cbc2dc67d7e856a694" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename ::std::enable_if&lt;::std::is_class&lt;C&gt; {}&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(C const &amp;o) noexcept</argsstring>
        <name>delegate</name>
        <param>
          <type>C const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="42" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a6ffe93d6ae5580d26026ea69c99535f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(C *const object_ptr, R(C::*const method_ptr)(A...))</argsstring>
        <name>delegate</name>
        <param>
          <type>C *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>R(C::*)(A...)</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="46" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a5244731240431b5e4669353068b358a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(C *const object_ptr, R(C::*const method_ptr)(A...) const)</argsstring>
        <name>delegate</name>
        <param>
          <type>C *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>R(C::*)(A...) const</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="52" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1aa6e609153edaf07626970a413f8cf44f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(C &amp;object, R(C::*const method_ptr)(A...))</argsstring>
        <name>delegate</name>
        <param>
          <type>C &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>R(C::*)(A...)</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="58" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ad551aa165fe4442fbedb92488d85182a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(C const &amp;object, R(C::*const method_ptr)(A...) const)</argsstring>
        <name>delegate</name>
        <param>
          <type>C const &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>R(C::*)(A...) const</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="64" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab477e245007e984e8ee486266b8baee1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename ::std::enable_if&lt;!::std::is_same&lt;delegate, typename ::std::decay&lt;T&gt;::type&gt; {}&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::delegate</definition>
        <argsstring>(T &amp;&amp;f)</argsstring>
        <name>delegate</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="72" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="72" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a71504901399f678de92d786159be1417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate &amp;</type>
        <definition>delegate&amp; psl::delegate&lt; R(A...)&gt;::operator=</definition>
        <argsstring>(delegate const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>delegate const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="88" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ac863f1cbcef41b7e529254a9d8fa34b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate &amp;</type>
        <definition>delegate&amp; psl::delegate&lt; R(A...)&gt;::operator=</definition>
        <argsstring>(delegate &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>delegate &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="90" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab4b6385bf12e11514bdf0921842d3f57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>delegate &amp;</type>
        <definition>delegate&amp; psl::delegate&lt; R(A...)&gt;::operator=</definition>
        <argsstring>(R(C::*const rhs)(A...))</argsstring>
        <name>operator=</name>
        <param>
          <type>R(C::*)(A...)</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="93" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1acf68e25a0f412cf23b42cf538a08d4a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>delegate &amp;</type>
        <definition>delegate&amp; psl::delegate&lt; R(A...)&gt;::operator=</definition>
        <argsstring>(R(C::*const rhs)(A...) const)</argsstring>
        <name>operator=</name>
        <param>
          <type>R(C::*)(A...) const</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="99" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a53f78003f17196ad8ee6dc4fdeff7db6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename ::std::enable_if&lt;!::std::is_same&lt;delegate, typename ::std::decay&lt;T&gt;::type&gt; {}&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>delegate &amp;</type>
        <definition>delegate&amp; psl::delegate&lt; R(A...)&gt;::operator=</definition>
        <argsstring>(T &amp;&amp;f)</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="107" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="107" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab22e75b2493ad0bc4bf8f753ae8b2459" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::delegate&lt; R(A...)&gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="201" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1af47ddacfac2c5393f490ab6acd2e4870" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::delegate&lt; R(A...)&gt;::reset_stub</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset_stub</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="207" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a011b5425abbee7add9eb456b2b1ff2cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::delegate&lt; R(A...)&gt;::swap</definition>
        <argsstring>(delegate &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type>delegate &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="209" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a265796e27c216e64db4e6169c83da015" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::delegate&lt; R(A...)&gt;::operator==</definition>
        <argsstring>(delegate const &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>delegate const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="211" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a802bd57bd062dc816930d6f07203a0a8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::delegate&lt; R(A...)&gt;::operator!=</definition>
        <argsstring>(delegate const &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>delegate const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="216" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a5d7c6f38ecc6f278c33590f5c13e28ec" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::delegate&lt; R(A...)&gt;::operator&lt;</definition>
        <argsstring>(delegate const &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>delegate const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="218" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a913d0dfd0a63c0606bad3fc66a73177e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::delegate&lt; R(A...)&gt;::operator==</definition>
        <argsstring>(::std::nullptr_t const) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>::std::nullptr_t const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="223" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a88c463e4cabefcef2e6a1654eff7105d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::delegate&lt; R(A...)&gt;::operator!=</definition>
        <argsstring>(::std::nullptr_t const) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>::std::nullptr_t const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="225" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1af8d9210f09c16bce87d3b2535847ee40" prot="public" static="no" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::delegate&lt; R(A...)&gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="227" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a51f9177bce8c42d00c5143070253f3f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R psl::delegate&lt; R(A...)&gt;::operator()</definition>
        <argsstring>(A... args) const</argsstring>
        <name>operator()</name>
        <param>
          <type>A...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="229" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="229" bodyend="233"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a37c89bf38ee26d6a0bcfb1c5a0f3689c" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>R(*)(A...)</type>
            <declname>function_ptr</declname>
            <defname>function_ptr</defname>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>() noexcept</argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="134" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a1858ac3a85eec4c3fb9722ba3de9bc40" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>R(C::*)(A...)</type>
            <declname>method_ptr</declname>
            <defname>method_ptr</defname>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C *const object_ptr) noexcept</argsstring>
        <name>from</name>
        <param>
          <type>C *const</type>
          <declname>object_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="140" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ad231cb69bd3465e46d48e19be877ad2e" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>R(C::*)(A...) const</type>
            <declname>method_ptr</declname>
            <defname>method_ptr</defname>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C const *const object_ptr) noexcept</argsstring>
        <name>from</name>
        <param>
          <type>C const *const</type>
          <declname>object_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="146" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a31c4039f8757f2da0c6a8a4867e25f78" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>R(C::*)(A...)</type>
            <declname>method_ptr</declname>
            <defname>method_ptr</defname>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C &amp;object) noexcept</argsstring>
        <name>from</name>
        <param>
          <type>C &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="152" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a0b7d4c50cc1139d3fa1fcb0512845239" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>R(C::*)(A...) const</type>
            <declname>method_ptr</declname>
            <defname>method_ptr</defname>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C const &amp;object) noexcept</argsstring>
        <name>from</name>
        <param>
          <type>C const &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="158" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab79ca93dfe9681eabd644131cc68cfe4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(T &amp;&amp;f)</argsstring>
        <name>from</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="164" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a0c0e83e54c754dee0a146f84bcd47469" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(R(*const function_ptr)(A...))</argsstring>
        <name>from</name>
        <param>
          <type>R(*)(A...)</type>
          <declname>function_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="169" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ac230543437328b67d138c7bcff559ef0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C *const object_ptr, R(C::*const method_ptr)(A...))</argsstring>
        <name>from</name>
        <param>
          <type>C *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>R(C::*)(A...)</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="178" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a318e5d18df7640692d6304054920cb29" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C const *const object_ptr, R(C::*const method_ptr)(A...) const)</argsstring>
        <name>from</name>
        <param>
          <type>C const *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>R(C::*)(A...) const</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="184" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a14a3f187a14e19ab5339bdd9e9d9c478" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C &amp;object, R(C::*const method_ptr)(A...))</argsstring>
        <name>from</name>
        <param>
          <type>C &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>R(C::*)(A...)</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="190" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a98b3e66268a458a173e6a4ae5afeb763" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>delegate</type>
        <definition>static delegate psl::delegate&lt; R(A...)&gt;::from</definition>
        <argsstring>(C const &amp;object, R(C::*const method_ptr)(A...) const)</argsstring>
        <name>from</name>
        <param>
          <type>C const &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>R(C::*)(A...) const</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="196" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="196" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a200475682ea9af07724dc6e84cbb4b66" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void psl::delegate&lt; R(A...)&gt;::functor_deleter</definition>
        <argsstring>(void *const p)</argsstring>
        <name>functor_deleter</name>
        <param>
          <type>void *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="249" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a858086a2e7c79e0a1559be38736dab18" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void psl::delegate&lt; R(A...)&gt;::deleter_stub</definition>
        <argsstring>(void *const p)</argsstring>
        <name>deleter_stub</name>
        <param>
          <type>void *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="257" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a38ab0c294750ff48f1c9e39a60f23426" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>R(*)(A...)</type>
            <declname>function_ptr</declname>
            <defname>function_ptr</defname>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>static R psl::delegate&lt; R(A...)&gt;::function_stub</definition>
        <argsstring>(void *const, A &amp;&amp;... args)</argsstring>
        <name>function_stub</name>
        <param>
          <type>void * const</type>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="263" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1aadffc4e50e515b83f3d3331037d62d25" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>R(C::*)(A...)</type>
            <declname>method_ptr</declname>
            <defname>method_ptr</defname>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>static R psl::delegate&lt; R(A...)&gt;::method_stub</definition>
        <argsstring>(void *const object_ptr, A &amp;&amp;... args)</argsstring>
        <name>method_stub</name>
        <param>
          <type>void *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="269" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a04a57b1511dd8d1a7b6eafc695f803eb" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>R(C::*)(A...) const</type>
            <declname>method_ptr</declname>
            <defname>method_ptr</defname>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>static R psl::delegate&lt; R(A...)&gt;::const_method_stub</definition>
        <argsstring>(void *const object_ptr, A &amp;&amp;... args)</argsstring>
        <name>const_method_stub</name>
        <param>
          <type>void *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="275" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a66a32d1e4f57993698e0ed2b3d889ebf" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename ::std::enable_if&lt;!(is_member_pair&lt; T &gt;::value||is_const_member_pair&lt; T &gt;::value), R &gt;::type</type>
        <definition>static typename ::std::enable_if&lt;!(is_member_pair&lt;T&gt;::value || is_const_member_pair&lt;T&gt;::value), R&gt;::type psl::delegate&lt; R(A...)&gt;::functor_stub</definition>
        <argsstring>(void *const object_ptr, A &amp;&amp;... args)</argsstring>
        <name>functor_stub</name>
        <param>
          <type>void *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="298" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a27d97aba123401cd4ea943ba53b42296" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename ::std::enable_if&lt; is_member_pair&lt; T &gt;::value||is_const_member_pair&lt; T &gt;::value, R &gt;::type</type>
        <definition>static typename ::std::enable_if&lt;is_member_pair&lt;T&gt;::value || is_const_member_pair&lt;T&gt;::value, R&gt;::type psl::delegate&lt; R(A...)&gt;::functor_stub</definition>
        <argsstring>(void *const object_ptr, A &amp;&amp;... args)</argsstring>
        <name>functor_stub</name>
        <param>
          <type>void *const</type>
          <declname>object_ptr</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="305" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="305" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" line="23" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/delegate.hpp" bodystart="22" bodyend="310"/>
    <listofallmembers>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a950778971a6c7f9e9a520dadb55fb49f" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>::std::hash&lt; delegate &gt;</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a7b69f088d18bffe293fce37b7909320f" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>const_member_pair</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a04a57b1511dd8d1a7b6eafc695f803eb" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>const_method_stub</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a911b00688e15f1706eacbea59dbfb528" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a5a0b9d128a0fdafffd92f83d4ae1b8b1" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a56c1997dc286bed4567b179776550d70" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab8716b7fd42ec11caa92aeeabac683cb" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a706eb51e61656f651de372dfe7ff4fb5" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a22c821715a1aec8c1b34521559a8d7c9" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a7d1c070b236da2cbc2dc67d7e856a694" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a6ffe93d6ae5580d26026ea69c99535f3" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a5244731240431b5e4669353068b358a7" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1aa6e609153edaf07626970a413f8cf44f" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ad551aa165fe4442fbedb92488d85182a" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab477e245007e984e8ee486266b8baee1" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>delegate</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ada7157355cfa87dc0e985623597c65ed" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>deleter_</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a858086a2e7c79e0a1559be38736dab18" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>deleter_stub</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a414008feef9e705cb055cc75270bbb8d" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>deleter_type</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a37c89bf38ee26d6a0bcfb1c5a0f3689c" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a1858ac3a85eec4c3fb9722ba3de9bc40" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ad231cb69bd3465e46d48e19be877ad2e" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a31c4039f8757f2da0c6a8a4867e25f78" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a0b7d4c50cc1139d3fa1fcb0512845239" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab79ca93dfe9681eabd644131cc68cfe4" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a0c0e83e54c754dee0a146f84bcd47469" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ac230543437328b67d138c7bcff559ef0" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a318e5d18df7640692d6304054920cb29" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a14a3f187a14e19ab5339bdd9e9d9c478" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a98b3e66268a458a173e6a4ae5afeb763" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>from</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a38ab0c294750ff48f1c9e39a60f23426" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>function_stub</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a200475682ea9af07724dc6e84cbb4b66" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>functor_deleter</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a66a32d1e4f57993698e0ed2b3d889ebf" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>functor_stub</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a27d97aba123401cd4ea943ba53b42296" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>functor_stub</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ac4ca88f2c7dfe654c37848877794b4c1" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>member_pair</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1aadffc4e50e515b83f3d3331037d62d25" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>method_stub</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a0873be9752ce01c956039f7b34f1293f" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>object_ptr_</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1af8d9210f09c16bce87d3b2535847ee40" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator bool</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a802bd57bd062dc816930d6f07203a0a8" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator!=</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a88c463e4cabefcef2e6a1654eff7105d" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator!=</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a51f9177bce8c42d00c5143070253f3f3" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator()</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a5d7c6f38ecc6f278c33590f5c13e28ec" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator&lt;</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a71504901399f678de92d786159be1417" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator=</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ac863f1cbcef41b7e529254a9d8fa34b6" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator=</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab4b6385bf12e11514bdf0921842d3f57" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator=</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1acf68e25a0f412cf23b42cf538a08d4a7" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator=</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a53f78003f17196ad8ee6dc4fdeff7db6" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator=</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a265796e27c216e64db4e6169c83da015" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator==</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a913d0dfd0a63c0606bad3fc66a73177e" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>operator==</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ab22e75b2493ad0bc4bf8f753ae8b2459" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>reset</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1af47ddacfac2c5393f490ab6acd2e4870" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>reset_stub</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1ad62554d53134a8f785aacdb8f6a207db" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>store_</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a8d1c41ec40251e0d9203dffd84705e2f" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>store_size_</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a30b9695eba66c4e95cb73f4c81cbf06d" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>stub_ptr_</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a4b78f6fe7c7aee16e981730cd6ee8f2f" prot="private" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>stub_ptr_type</name></member>
      <member refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4_1a011b5425abbee7add9eb456b2b1ff2cd" prot="public" virt="non-virtual"><scope>psl::delegate&lt; R(A...)&gt;</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
