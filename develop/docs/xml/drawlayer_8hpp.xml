<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="drawlayer_8hpp" kind="file" language="C++">
    <compoundname>drawlayer.hpp</compoundname>
    <includedby refid="drawgroup_8hpp" local="yes">/home/runner/work/paradigm/paradigm/core/inc/gfx/drawgroup.hpp</includedby>
    <includedby refid="gles_2drawpass_8cpp" local="yes">/home/runner/work/paradigm/paradigm/core/src/gles/drawpass.cpp</includedby>
    <invincdepgraph>
      <node id="9">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/drawgroup.cpp</label>
        <link refid="drawgroup_8cpp_source"/>
      </node>
      <node id="10">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/drawpass.cpp</label>
        <link refid="gfx_2drawpass_8cpp_source"/>
      </node>
      <node id="5">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/lighting.cpp</label>
        <link refid="lighting_8cpp_source"/>
      </node>
      <node id="11">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/drawpass.cpp</label>
        <link refid="vk_2drawpass_8cpp_source"/>
      </node>
      <node id="2">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/drawgroup.hpp</label>
        <link refid="drawgroup_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/drawlayer.hpp</label>
        <link refid="drawlayer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/drawpass.hpp</label>
        <link refid="gles_2drawpass_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/drawpass.cpp</label>
        <link refid="gles_2drawpass_8cpp_source"/>
      </node>
      <node id="3">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/render.hpp</label>
        <link refid="render_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/render.cpp</label>
        <link refid="render_8cpp_source"/>
      </node>
      <node id="4">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/lighting.hpp</label>
        <link refid="systems_2lighting_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcore_1_1gfx_1_1drawlayer" prot="public">core::gfx::drawlayer</innerclass>
    <innerclass refid="structstd_1_1less_3_01core_1_1gfx_1_1drawlayer_01_4" prot="public">std::less&lt; core::gfx::drawlayer &gt;</innerclass>
    <innerclass refid="structstd_1_1hash_3_01core_1_1gfx_1_1drawlayer_01_4" prot="public">std::hash&lt; core::gfx::drawlayer &gt;</innerclass>
    <innerclass refid="structstd_1_1hash_3_01core_1_1gfx_1_1drawlayer_01_5_01_4" prot="public">std::hash&lt; core::gfx::drawlayer * &gt;</innerclass>
    <innernamespace refid="namespacecore">core</innernamespace>
    <innernamespace refid="namespacecore_1_1gfx">core::gfx</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecore_1_1gfx" kindref="compound">core::gfx</ref></highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">drawlayer</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawlayer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>psl::string&amp;<sp/>name,<sp/>uint32_t<sp/>priority<sp/>=<sp/>1000u,<sp/>uint32_t<sp/>extent<sp/>=<sp/>1000u)<sp/>:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name(name),<sp/>priority(priority),<sp/>extent(extent)<sp/>{};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>begin()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>priority;<sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>end()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>priority<sp/>+<sp/>extent;<sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psl::string<sp/>name;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>priority<sp/>{1000u};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>extent<sp/>{1000u};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>drawlayer&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>priority<sp/>&lt;<sp/>other.priority;<sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>core::gfx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">less&lt;<ref refid="namespacecore" kindref="compound">core</ref>::gfx::drawlayer&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>core::gfx::drawlayer&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>core::gfx::drawlayer&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="namespacecore" kindref="compound">core</ref>::gfx::drawlayer&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>core::gfx::drawlayer&amp;<sp/>k)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="38"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>individual<sp/>hash<sp/>values<sp/>for<sp/>first,<sp/>second<sp/>and<sp/>third</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>http://stackoverflow.com/a/1646913/126995</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>res<sp/>*<sp/>31<sp/>+<sp/>hash&lt;psl::string&gt;()(k.name);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>res<sp/>*<sp/>31<sp/>+<sp/>hash&lt;uint32_t&gt;()(k.begin());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>res<sp/>*<sp/>31<sp/>+<sp/>hash&lt;uint32_t&gt;()(k.end());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="namespacecore" kindref="compound">core</ref>::gfx::drawlayer*&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>core::gfx::drawlayer*<sp/>k)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="53"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>res<sp/>*<sp/>31<sp/>+<sp/>hash&lt;psl::string&gt;()(k-&gt;name);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>res<sp/>*<sp/>31<sp/>+<sp/>hash&lt;uint32_t&gt;()(k-&gt;begin());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>res<sp/>*<sp/>31<sp/>+<sp/>hash&lt;uint32_t&gt;()(k-&gt;end());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/drawlayer.hpp"/>
  </compounddef>
</doxygen>
