<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="template__utils_8hpp" kind="file" language="C++">
    <compoundname>template_utils.hpp</compoundname>
    <includes refid="assertions_8hpp" local="yes">psl/assertions.hpp</includes>
    <includes local="no">functional</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">variant</includes>
    <includedby refid="scheduler_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp</includedby>
    <includedby refid="binary__utils_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp</includedby>
    <includedby refid="psl_2inc_2psl_2buffer_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/buffer.hpp</includedby>
    <includedby refid="command__buffer_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/command_buffer.hpp</includedby>
    <includedby refid="system__information_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/details/system_information.hpp</includedby>
    <includedby refid="filtering_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/filtering.hpp</includedby>
    <includedby refid="state_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/state.hpp</includedby>
    <includedby refid="matrix_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp</includedby>
    <includedby refid="vec_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp</includedby>
    <includedby refid="pack__view_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp</includedby>
    <includedby refid="serializer_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp</includedby>
    <includedby refid="stdafx__psl_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/stdafx_psl.hpp</includedby>
    <includedby refid="string__utils_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/string_utils.hpp</includedby>
    <includedby refid="view__ptr_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="14">
        <label>variant</label>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>psl/platform_def.hpp</label>
        <link refid="platform__def_8hpp_source"/>
      </node>
      <node id="1">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/template_utils.hpp</label>
        <link refid="template__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="7">
        <label>fstream</label>
      </node>
      <node id="9">
        <label>signal.h</label>
      </node>
      <node id="12">
        <label>unordered_map</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="2">
        <label>psl/assertions.hpp</label>
        <link refid="assertions_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>psl/ustring.hpp</label>
        <link refid="ustring_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="47">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/material.cpp</label>
        <link refid="data_2material_8cpp_source"/>
      </node>
      <node id="65">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/window.hpp</label>
        <link refid="window_8hpp_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/render_graph.hpp</label>
        <link refid="render__graph_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp</label>
        <link refid="scheduler_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="200">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/async/token.hpp</label>
        <link refid="token_8hpp_source"/>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp</label>
        <link refid="pipeline_8cpp_source"/>
      </node>
      <node id="99">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/computepass.cpp</label>
        <link refid="vk_2computepass_8cpp_source"/>
      </node>
      <node id="138">
        <label>/home/runner/work/paradigm/paradigm/psl/src/library.cpp</label>
        <link refid="library_8cpp_source"/>
      </node>
      <node id="100">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/compute.hpp</label>
        <link refid="gles_2compute_8hpp_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="165">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/shader.hpp</label>
        <link refid="fwd_2gfx_2shader_8hpp_source"/>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="180">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/pack.hpp</label>
        <link refid="pack_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp</label>
        <link refid="vk_2material_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/framebuffer.cpp</label>
        <link refid="gfx_2framebuffer_8cpp_source"/>
      </node>
      <node id="12">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/geometry_instance.cpp</label>
        <link refid="geometry__instance_8cpp_source"/>
      </node>
      <node id="84">
        <label>/home/runner/work/paradigm/paradigm/core/src/meta/shader.cpp</label>
        <link refid="meta_2shader_8cpp_source"/>
      </node>
      <node id="186">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/compute.hpp</label>
        <link refid="vk_2compute_8hpp_source"/>
        <childnode refid="187" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/stdafx_psl.hpp</label>
        <link refid="stdafx__psl_8hpp_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp</label>
        <link refid="gfx_2bundle_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/text.cpp</label>
        <link refid="text_8cpp_source"/>
      </node>
      <node id="145">
        <label>/home/runner/work/paradigm/paradigm/core/inc/conversion_utils.hpp</label>
        <link refid="conversion__utils_8hpp_source"/>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/drawgroup.cpp</label>
        <link refid="drawgroup_8cpp_source"/>
      </node>
      <node id="118">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp</label>
        <link refid="gfx_2pipeline__cache_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/drawpass.cpp</label>
        <link refid="gfx_2drawpass_8cpp_source"/>
      </node>
      <node id="171">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/context.hpp</label>
        <link refid="vk_2context_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/debug/grid.cpp</label>
        <link refid="grid_8cpp_source"/>
      </node>
      <node id="10">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/fly.cpp</label>
        <link refid="fly_8cpp_source"/>
      </node>
      <node id="104">
        <label>/home/runner/work/paradigm/paradigm/core/inc/resource/resource.hpp</label>
        <link refid="resource_2resource_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/home/runner/work/paradigm/paradigm/psl/src/ecs/state.cpp</label>
        <link refid="state_8cpp_source"/>
      </node>
      <node id="122">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/swapchain.hpp</label>
        <link refid="gfx_2swapchain_8hpp_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/swapchain.hpp</label>
        <link refid="gles_2swapchain_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp</label>
        <link refid="vec_8hpp_source"/>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>/home/runner/work/paradigm/paradigm/core/inc/os/surface.hpp</label>
        <link refid="surface_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>/home/runner/work/paradigm/paradigm/psl/src/serialization/serializer.cpp</label>
        <link refid="serializer_8cpp_source"/>
      </node>
      <node id="83">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/shader.cpp</label>
        <link refid="gles_2shader_8cpp_source"/>
      </node>
      <node id="17">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/lighting.cpp</label>
        <link refid="lighting_8cpp_source"/>
      </node>
      <node id="21">
        <label>/home/runner/work/paradigm/paradigm/psl/src/ecs/command_buffer.cpp</label>
        <link refid="command__buffer_8cpp_source"/>
      </node>
      <node id="170">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/context.cpp</label>
        <link refid="gles_2context_8cpp_source"/>
      </node>
      <node id="131">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp</label>
        <link refid="vk_2pipeline__cache_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/library.hpp</label>
        <link refid="library_8hpp_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/attractor.hpp</label>
        <link refid="attractor_8hpp_source"/>
      </node>
      <node id="128">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/framebuffer.hpp</label>
        <link refid="vk_2framebuffer_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="201">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/async/details/packet.hpp</label>
        <link refid="packet_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/material.cpp</label>
        <link refid="gfx_2material_8cpp_source"/>
      </node>
      <node id="36">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp</label>
        <link refid="vk_2material_8cpp_source"/>
      </node>
      <node id="44">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/drawpass.cpp</label>
        <link refid="vk_2drawpass_8cpp_source"/>
      </node>
      <node id="86">
        <label>/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp</label>
        <link refid="meta_2texture_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/limits.hpp</label>
        <link refid="limits_8hpp_source"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/drawcall.hpp</label>
        <link refid="drawcall_8hpp_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="178">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/details/entity_info.hpp</label>
        <link refid="entity__info_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/shader.hpp</label>
        <link refid="vk_2shader_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/drawpass.hpp</label>
        <link refid="vk_2drawpass_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/buffer.hpp</label>
        <link refid="psl_2inc_2psl_2buffer_8hpp_source"/>
      </node>
      <node id="106">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/buffer.hpp</label>
        <link refid="core_2inc_2gfx_2buffer_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="175">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/math/utility.hpp</label>
        <link refid="utility_8hpp_source"/>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/details/system_information.hpp</label>
        <link refid="system__information_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="189">
        <label>/home/runner/work/paradigm/paradigm/psl/src/format.cpp</label>
        <link refid="format_8cpp_source"/>
      </node>
      <node id="45">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/framebuffer.cpp</label>
        <link refid="vk_2framebuffer_8cpp_source"/>
      </node>
      <node id="67">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/swapchain.cpp</label>
        <link refid="gfx_2swapchain_8cpp_source"/>
      </node>
      <node id="92">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/components/renderable.hpp</label>
        <link refid="renderable_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/compute.cpp</label>
        <link refid="vk_2compute_8cpp_source"/>
      </node>
      <node id="176">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/noise/perlin.hpp</label>
        <link refid="perlin_8hpp_source"/>
        <childnode refid="154" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/template_utils.hpp</label>
        <link refid="template__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>/home/runner/work/paradigm/paradigm/core/inc/utility/geometry.hpp</label>
        <link refid="utility_2geometry_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/math/math.hpp</label>
        <link refid="math_8hpp_source"/>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp</label>
        <link refid="pack__view_8hpp_source"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/sampler.hpp</label>
        <link refid="vk_2sampler_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/swapchain.cpp</label>
        <link refid="gles_2swapchain_8cpp_source"/>
      </node>
      <node id="153">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/collections/spmc/producer.hpp</label>
        <link refid="producer_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
      </node>
      <node id="199">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/computepass.hpp</label>
        <link refid="vk_2computepass_8hpp_source"/>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/pipeline_cache.cpp</label>
        <link refid="vk_2pipeline__cache_8cpp_source"/>
      </node>
      <node id="148">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/components/camera.hpp</label>
        <link refid="camera_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/computepass.hpp</label>
        <link refid="gles_2computepass_8hpp_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/computecall.hpp</label>
        <link refid="computecall_8hpp_source"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp</label>
        <link refid="core_2inc_2data_2buffer_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/debug/grid.hpp</label>
        <link refid="grid_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/framebuffer.cpp</label>
        <link refid="gles_2framebuffer_8cpp_source"/>
      </node>
      <node id="129">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/geometry.hpp</label>
        <link refid="vk_2geometry_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/sampler.cpp</label>
        <link refid="vk_2sampler_8cpp_source"/>
      </node>
      <node id="4">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/state.hpp</label>
        <link refid="state_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/texture.hpp</label>
        <link refid="fwd_2gfx_2texture_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/geometry_instance.hpp</label>
        <link refid="geometry__instance_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="162">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/material.hpp</label>
        <link refid="fwd_2gfx_2material_8hpp_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/context.hpp</label>
        <link refid="gles_2context_8hpp_source"/>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/computecall.cpp</label>
        <link refid="computecall_8cpp_source"/>
      </node>
      <node id="183">
        <label>/home/runner/work/paradigm/paradigm/psl/src/ecs/details/component_info.cpp</label>
        <link refid="component__info_8cpp_source"/>
      </node>
      <node id="89">
        <label>/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp</label>
        <link refid="meta_2texture_8cpp_source"/>
      </node>
      <node id="120">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/sampler.hpp</label>
        <link refid="gfx_2sampler_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/geometry.hpp</label>
        <link refid="fwd_2gfx_2geometry_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/pipeline_cache.cpp</label>
        <link refid="gfx_2pipeline__cache_8cpp_source"/>
      </node>
      <node id="48">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp</label>
        <link refid="gfx_2bundle_8cpp_source"/>
      </node>
      <node id="141">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/command_buffer.hpp</label>
        <link refid="command__buffer_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/context.hpp</label>
        <link refid="gfx_2context_8hpp_source"/>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/geometry.hpp</label>
        <link refid="data_2geometry_8hpp_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>/home/runner/work/paradigm/paradigm/core/inc/resource/handle.hpp</label>
        <link refid="handle_8hpp_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/framebuffer.hpp</label>
        <link refid="gles_2framebuffer_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/drawgroup.hpp</label>
        <link refid="drawgroup_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/texture.cpp</label>
        <link refid="gles_2texture_8cpp_source"/>
      </node>
      <node id="69">
        <label>/home/runner/work/paradigm/paradigm/core/src/os/surface.cpp</label>
        <link refid="surface_8cpp_source"/>
      </node>
      <node id="184">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/string_utils.hpp</label>
        <link refid="string__utils_8hpp_source"/>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/gpu_camera.cpp</label>
        <link refid="gpu__camera_8cpp_source"/>
      </node>
      <node id="78">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/drawpass.hpp</label>
        <link refid="gles_2drawpass_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="194">
        <label>/home/runner/work/paradigm/paradigm/psl/src/meta.cpp</label>
        <link refid="meta_8cpp_source"/>
      </node>
      <node id="14">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/movement.hpp</label>
        <link refid="movement_8hpp_source"/>
      </node>
      <node id="198">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp</label>
        <link refid="view__ptr_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/details/selectors.hpp</label>
        <link refid="details_2selectors_8hpp_source"/>
        <childnode refid="180" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/components/velocity.hpp</label>
        <link refid="velocity_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="191">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/bundle.hpp</label>
        <link refid="data_2bundle_8hpp_source"/>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/shader.cpp</label>
        <link refid="gfx_2shader_8cpp_source"/>
      </node>
      <node id="55">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/sampler.cpp</label>
        <link refid="data_2sampler_8cpp_source"/>
      </node>
      <node id="124">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/buffer.hpp</label>
        <link refid="core_2inc_2gles_2buffer_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/swapchain.cpp</label>
        <link refid="vk_2swapchain_8cpp_source"/>
      </node>
      <node id="49">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/compute.cpp</label>
        <link refid="gfx_2compute_8cpp_source"/>
      </node>
      <node id="146">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/matrix.hpp</label>
        <link refid="fallback_2matrix_8hpp_source"/>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/geometry.cpp</label>
        <link refid="gles_2geometry_8cpp_source"/>
      </node>
      <node id="123">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/texture.hpp</label>
        <link refid="gfx_2texture_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/binary_utils.hpp</label>
        <link refid="binary__utils_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/stream.hpp</label>
        <link refid="stream_8hpp_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/details/instance.cpp</label>
        <link refid="instance_8cpp_source"/>
      </node>
      <node id="159">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/context.hpp</label>
        <link refid="fwd_2gfx_2context_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/details/instance.hpp</label>
        <link refid="instance_8hpp_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/geometry.cpp</label>
        <link refid="vk_2geometry_8cpp_source"/>
      </node>
      <node id="117">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/material.hpp</label>
        <link refid="gfx_2material_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="163">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/pipeline_cache.hpp</label>
        <link refid="fwd_2gfx_2pipeline__cache_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/components/lighting.hpp</label>
        <link refid="components_2lighting_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/filtering.hpp</label>
        <link refid="filtering_8hpp_source"/>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/buffer.cpp</label>
        <link refid="gfx_2buffer_8cpp_source"/>
      </node>
      <node id="6">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/death.hpp</label>
        <link refid="death_8hpp_source"/>
      </node>
      <node id="70">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/context.cpp</label>
        <link refid="vk_2context_8cpp_source"/>
      </node>
      <node id="126">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/buffer.hpp</label>
        <link refid="core_2inc_2vk_2buffer_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/window.cpp</label>
        <link refid="window_8cpp_source"/>
      </node>
      <node id="157">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp</label>
        <link refid="gfx_2types_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="173">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/conversion.hpp</label>
        <link refid="vk_2conversion_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/computepass.hpp</label>
        <link refid="gfx_2computepass_8hpp_source"/>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>/home/runner/work/paradigm/paradigm/core/inc/resource/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/render_graph.cpp</label>
        <link refid="render__graph_8cpp_source"/>
      </node>
      <node id="64">
        <label>/home/runner/work/paradigm/paradigm/core/inc/stdafx.hpp</label>
        <link refid="stdafx_8hpp_source"/>
      </node>
      <node id="172">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/conversion.hpp</label>
        <link refid="gles_2conversion_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/compute.cpp</label>
        <link refid="gles_2compute_8cpp_source"/>
      </node>
      <node id="188">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/format.hpp</label>
        <link refid="format_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/fly.hpp</label>
        <link refid="fly_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp</label>
        <link refid="pipeline_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="193">
        <label>/home/runner/work/paradigm/paradigm/core/inc/resource/tag.hpp</label>
        <link refid="tag_8hpp_source"/>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/texture.cpp</label>
        <link refid="gfx_2texture_8cpp_source"/>
      </node>
      <node id="54">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/sampler.hpp</label>
        <link refid="data_2sampler_8hpp_source"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/texture.cpp</label>
        <link refid="vk_2texture_8cpp_source"/>
      </node>
      <node id="149">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/components/transform.hpp</label>
        <link refid="transform_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/lifetime.hpp</label>
        <link refid="systems_2lifetime_8hpp_source"/>
      </node>
      <node id="154">
        <label>/home/runner/work/paradigm/paradigm/psl/src/noise/perlin.cpp</label>
        <link refid="perlin_8cpp_source"/>
      </node>
      <node id="174">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp</label>
        <link refid="fallback_2vec_8hpp_source"/>
        <childnode refid="155" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/material.hpp</label>
        <link refid="gles_2material_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/drawpass.cpp</label>
        <link refid="gles_2drawpass_8cpp_source"/>
      </node>
      <node id="105">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/gpu_camera.hpp</label>
        <link refid="gpu__camera_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>/home/runner/work/paradigm/paradigm/psl/src/stdafx_psl.cpp</label>
        <link refid="stdafx__psl_8cpp_source"/>
      </node>
      <node id="112">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/context.cpp</label>
        <link refid="gfx_2context_8cpp_source"/>
      </node>
      <node id="114">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/drawpass.hpp</label>
        <link refid="gfx_2drawpass_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/sampler.cpp</label>
        <link refid="gfx_2sampler_8cpp_source"/>
      </node>
      <node id="116">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/geometry.hpp</label>
        <link refid="gfx_2geometry_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/render.hpp</label>
        <link refid="render_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="195">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp</label>
        <link refid="platform__utils_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/framebuffer.hpp</label>
        <link refid="fwd_2gfx_2framebuffer_8hpp_source"/>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="196">
        <label>/home/runner/work/paradigm/paradigm/psl/src/platform_utils.cpp</label>
        <link refid="platform__utils_8cpp_source"/>
      </node>
      <node id="152">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/collections/spmc.hpp</label>
        <link refid="spmc_8hpp_source"/>
      </node>
      <node id="107">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/geometry.cpp</label>
        <link refid="gfx_2geometry_8cpp_source"/>
      </node>
      <node id="185">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/ivk.hpp</label>
        <link refid="ivk_8hpp_source"/>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/buffer.cpp</label>
        <link refid="vk_2buffer_8cpp_source"/>
      </node>
      <node id="136">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/swapchain.hpp</label>
        <link refid="vk_2swapchain_8hpp_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="151">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/collections/spmc/consumer.hpp</label>
        <link refid="consumer_8hpp_source"/>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="164">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/sampler.hpp</label>
        <link refid="fwd_2gfx_2sampler_8hpp_source"/>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/meta.hpp</label>
        <link refid="meta_8hpp_source"/>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/material.cpp</label>
        <link refid="gles_2material_8cpp_source"/>
      </node>
      <node id="108">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/compute.hpp</label>
        <link refid="gfx_2compute_8hpp_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/async/async.hpp</label>
        <link refid="async_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/buffer.cpp</label>
        <link refid="gles_2buffer_8cpp_source"/>
      </node>
      <node id="57">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/sampler.cpp</label>
        <link refid="gles_2sampler_8cpp_source"/>
      </node>
      <node id="121">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/shader.hpp</label>
        <link refid="gfx_2shader_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp</label>
        <link refid="data_2framebuffer_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gles/geometry.hpp</label>
        <link refid="gles_2geometry_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp</label>
        <link refid="data_2framebuffer_8cpp_source"/>
      </node>
      <node id="52">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/program.cpp</label>
        <link refid="program_8cpp_source"/>
      </node>
      <node id="158">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/buffer.hpp</label>
        <link refid="core_2inc_2fwd_2gfx_2buffer_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp</label>
        <link refid="data_2buffer_8cpp_source"/>
      </node>
      <node id="192">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/bundle.cpp</label>
        <link refid="data_2bundle_8cpp_source"/>
      </node>
      <node id="23">
        <label>/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp</label>
        <link refid="scheduler_8cpp_source"/>
      </node>
      <node id="73">
        <label>/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp</label>
        <link refid="meta_2shader_8hpp_source"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/text.hpp</label>
        <link refid="systems_2text_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/shader.cpp</label>
        <link refid="vk_2shader_8cpp_source"/>
      </node>
      <node id="24">
        <label>/home/runner/work/paradigm/paradigm/psl/src/async/token.cpp</label>
        <link refid="token_8cpp_source"/>
      </node>
      <node id="18">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/render.cpp</label>
        <link refid="render_8cpp_source"/>
      </node>
      <node id="16">
        <label>/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/lighting.hpp</label>
        <link refid="systems_2lighting_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/drawcall.cpp</label>
        <link refid="drawcall_8cpp_source"/>
      </node>
      <node id="135">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/program_cache.cpp</label>
        <link refid="program__cache_8cpp_source"/>
      </node>
      <node id="62">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/geometry.cpp</label>
        <link refid="data_2geometry_8cpp_source"/>
      </node>
      <node id="98">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/computepass.cpp</label>
        <link refid="gfx_2computepass_8cpp_source"/>
      </node>
      <node id="144">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp</label>
        <link refid="matrix_8hpp_source"/>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>/home/runner/work/paradigm/paradigm/core/inc/vk/texture.hpp</label>
        <link refid="vk_2texture_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/computepass.cpp</label>
        <link refid="gles_2computepass_8cpp_source"/>
      </node>
      <node id="166">
        <label>/home/runner/work/paradigm/paradigm/core/inc/fwd/gfx/swapchain.hpp</label>
        <link refid="fwd_2gfx_2swapchain_8hpp_source"/>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/serialization/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
      </node>
      <node id="197">
        <label>/home/runner/work/paradigm/paradigm/psl/src/profiling/profiler.cpp</label>
        <link refid="profiler_8cpp_source"/>
      </node>
      <node id="115">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/framebuffer.hpp</label>
        <link refid="gfx_2framebuffer_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/material.hpp</label>
        <link refid="data_2material_8hpp_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structutility_1_1templates_1_1overloaded" prot="public">utility::templates::overloaded</innerclass>
    <innerclass refid="structutility_1_1templates_1_1type__container" prot="public">utility::templates::type_container</innerclass>
    <innerclass refid="structutility_1_1templates_1_1has__type" prot="public">utility::templates::has_type</innerclass>
    <innerclass refid="structutility_1_1templates_1_1has__type_3_01_t_00_01std_1_1tuple_3_4_01_4" prot="public">utility::templates::has_type&lt; T, std::tuple&lt;&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1has__type_3_01_t_00_01std_1_1tuple_3_01_u_00_01_ts_8_8_8_01_4_01_4" prot="public">utility::templates::has_type&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1has__type_3_01_t_00_01std_1_1tuple_3_01_t_00_01_ts_8_8_8_01_4_01_4" prot="public">utility::templates::has_type&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1always__false" prot="public">utility::templates::always_false</innerclass>
    <innerclass refid="structutility_1_1templates_1_1detail_1_1is__detected" prot="public">utility::templates::detail::is_detected</innerclass>
    <innerclass refid="structutility_1_1templates_1_1detail_1_1is__detected_3_01_trait_00_01std_1_1void__t_3_01_trait_383569b7c35ce9a7f0b939dbc9fd03633" prot="public">utility::templates::detail::is_detected&lt; Trait, std::void_t&lt; Trait&lt; Args... &gt; &gt;, Args... &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1all__same" prot="public">utility::templates::all_same</innerclass>
    <innerclass refid="structutility_1_1templates_1_1all__same_3_01_t_01_4" prot="public">utility::templates::all_same&lt; T &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1all__same_3_01_t_00_01_t_00_01args_8_8_8_01_4" prot="public">utility::templates::all_same&lt; T, T, args... &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1remove__all" prot="public">utility::templates::remove_all</innerclass>
    <innerclass refid="structutility_1_1templates_1_1remove__all_3_01_t_01_5_01_4" prot="public">utility::templates::remove_all&lt; T * &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1conditional__value" prot="public">utility::templates::conditional_value</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__pair" prot="public">utility::templates::is_pair</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__associative__container" prot="public">utility::templates::is_associative_container</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__trivial__container" prot="public">utility::templates::is_trivial_container</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__complex__container" prot="public">utility::templates::is_complex_container</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__container" prot="public">utility::templates::is_container</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__trivial__container_3_01std_1_1vector_3_01_t_00_01_a_01_4_01_4" prot="public">utility::templates::is_trivial_container&lt; std::vector&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__complex__container_3_01std_1_1tuple_3_01_t_00_01_a_8_8_8_01_4_01_4" prot="public">utility::templates::is_complex_container&lt; std::tuple&lt; T, A... &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__complex__container_3_01std_1_1unordered__set_3_01_t_00_01_a_01_4_01_4" prot="public">utility::templates::is_complex_container&lt; std::unordered_set&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__associative__container_3_01std_1_1unordered__map_3_01_t_00_01_a_01_4_01_4" prot="public">utility::templates::is_associative_container&lt; std::unordered_map&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__pair_3_01std_1_1pair_3_01_t_00_01_a_01_4_01_4" prot="public">utility::templates::is_pair&lt; std::pair&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1get__key__type" prot="public">utility::templates::get_key_type</innerclass>
    <innerclass refid="structutility_1_1templates_1_1get__key__type_3_01std_1_1unordered__map_3_01_t_00_01_a_01_4_01_4" prot="public">utility::templates::get_key_type&lt; std::unordered_map&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1get__value__type" prot="public">utility::templates::get_value_type</innerclass>
    <innerclass refid="structutility_1_1templates_1_1get__value__type_3_01std_1_1unordered__map_3_01_t_00_01_a_01_4_01_4" prot="public">utility::templates::get_value_type&lt; std::unordered_map&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1op__valid__impl" prot="public">utility::templates::operators::details::op_valid_impl</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__pre__increment" prot="public">utility::templates::operators::details::has_pre_increment</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__post__increment" prot="public">utility::templates::operators::details::has_post_increment</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__pre__decrement" prot="public">utility::templates::operators::details::has_pre_decrement</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__post__decrement" prot="public">utility::templates::operators::details::has_post_decrement</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__bool__operator" prot="public">utility::templates::operators::details::has_bool_operator</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__subscript__operator" prot="public">utility::templates::operators::details::has_subscript_operator</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__subscript__operator_3_01_t_00_01_inde0f64fa23dc6c7695da3a8fb9ff7c366e" prot="public">utility::templates::operators::details::has_subscript_operator&lt; T, Index, std::void_t&lt; decltype(std::declval&lt; T &gt;()[std::declval&lt; Index &gt;()])&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__plus" prot="public">utility::templates::operators::details::has_arithmetic_plus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__plus_3_01_t_00_01_u_00_016e64af6e08653477aa695113caf10194" prot="public">utility::templates::operators::details::has_arithmetic_plus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator+(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__minus" prot="public">utility::templates::operators::details::has_arithmetic_minus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__minus_3_01_t_00_01_u_00_0a855cb59655bc97925b4d08e1a291724" prot="public">utility::templates::operators::details::has_arithmetic_minus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator-(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__multiply" prot="public">utility::templates::operators::details::has_arithmetic_multiply</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__multiply_3_01_t_00_01_u_0f8e730205acc1acecfa79135d6e036a5" prot="public">utility::templates::operators::details::has_arithmetic_multiply&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator*(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__divide" prot="public">utility::templates::operators::details::has_arithmetic_divide</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__divide_3_01_t_00_01_u_00_980d0a19c9d5319fdda442938c8e434e" prot="public">utility::templates::operators::details::has_arithmetic_divide&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator/(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__modulus" prot="public">utility::templates::operators::details::has_arithmetic_modulus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__modulus_3_01_t_00_01_u_005f9a4642ba45433abeb773e60a49be78" prot="public">utility::templates::operators::details::has_arithmetic_modulus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator%(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__plus" prot="public">utility::templates::operators::details::has_assignment_plus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__plus_3_01_t_00_01_u_00_01019ffc1c4b47eee8b122aeb8b5feda7f" prot="public">utility::templates::operators::details::has_assignment_plus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator+=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__minus" prot="public">utility::templates::operators::details::has_assignment_minus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__minus_3_01_t_00_01_u_00_009af612045799834b3cfdefdda074a6f" prot="public">utility::templates::operators::details::has_assignment_minus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator-=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__multiply" prot="public">utility::templates::operators::details::has_assignment_multiply</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__multiply_3_01_t_00_01_u_028f50dc3a43f623a4813cdaf243e1d8b" prot="public">utility::templates::operators::details::has_assignment_multiply&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator*=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__divide" prot="public">utility::templates::operators::details::has_assignment_divide</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__divide_3_01_t_00_01_u_00_8461f5a4294bae06394b9d502d3a8e38" prot="public">utility::templates::operators::details::has_assignment_divide&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator/=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__modulus" prot="public">utility::templates::operators::details::has_assignment_modulus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__modulus_3_01_t_00_01_u_006f74c3eb77922a9b1e269c751c7e0236" prot="public">utility::templates::operators::details::has_assignment_modulus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator%=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__and" prot="public">utility::templates::operators::details::has_assignment_and</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__and_3_01_t_00_01_u_00_01s09f5b95a09b9e968c998306542736af6" prot="public">utility::templates::operators::details::has_assignment_and&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator&amp;=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__or" prot="public">utility::templates::operators::details::has_assignment_or</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__or_3_01_t_00_01_u_00_01st78dcbb489edd917c06325455542ef993" prot="public">utility::templates::operators::details::has_assignment_or&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator|=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__xor" prot="public">utility::templates::operators::details::has_assignment_xor</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__xor_3_01_t_00_01_u_00_01sd66eeda738a2ef8849e615c03084dc2d" prot="public">utility::templates::operators::details::has_assignment_xor&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator^=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__left__shift" prot="public">utility::templates::operators::details::has_assignment_left_shift</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__left__shift_3_01_t_00_01_bc42704a0722920cab751b299cd79a78" prot="public">utility::templates::operators::details::has_assignment_left_shift&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator&lt;&lt;=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__right__shift" prot="public">utility::templates::operators::details::has_assignment_right_shift</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__right__shift_0a_07std_1_1a32ae4d1c356ab5f3c405068a892e793" prot="public">utility::templates::operators::details::has_assignment_right_shift=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1left__shift" prot="public">utility::templates::operators::details::left_shift</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1right__shift" prot="public">utility::templates::operators::details::right_shift</innerclass>
    <innerclass refid="structutility_1_1templates_1_1func__traits" prot="public">utility::templates::func_traits</innerclass>
    <innerclass refid="structutility_1_1templates_1_1func__traits_3_01std_1_1function_3_01_t_01_4_01_4" prot="public">utility::templates::func_traits&lt; std::function&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1func__traits_3_01std_1_1function_3_01_t_01_4_01_6_01_4" prot="public">utility::templates::func_traits&lt; std::function&lt; T &gt; &amp; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1func__traits_3_01const_01std_1_1function_3_01_t_01_4_01_6_01_4" prot="public">utility::templates::func_traits&lt; const std::function&lt; T &gt; &amp; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1func__traits_3_01_ret_07_c_1_1_5_08_07_args_8_8_8_08_4" prot="public">utility::templates::func_traits&lt; Ret(C::*)(Args...)&gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1func__traits_3_01_ret_07_5_08_07_args_8_8_8_08_4" prot="public">utility::templates::func_traits&lt; Ret(*)(Args...)&gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1func__traits_3_01_ret_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4" prot="public">utility::templates::func_traits&lt; Ret(C::*)(Args...) const &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__invocable" prot="public">utility::templates::is_invocable</innerclass>
    <innerclass refid="structutility_1_1templates_1_1proxy__type" prot="public">utility::templates::proxy_type</innerclass>
    <innerclass refid="structutility_1_1templates_1_1any" prot="public">utility::templates::any</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__callable__n" prot="public">utility::templates::is_callable_n</innerclass>
    <innerclass refid="structutility_1_1templates_1_1is__callable__n_3_01_f_00_01_n_00_01std_1_1index__sequence_3_01_id66b63670e47385aaccc89064b6f9bc7b" prot="public">utility::templates::is_callable_n&lt; F, N, std::index_sequence&lt; Idx... &gt;, std::void_t&lt; decltype(std::declval&lt; F &gt;()((Idx, std::declval&lt; any const &amp;&amp; &gt;())...))&gt; &gt;</innerclass>
    <innernamespace refid="namespaceutility">utility</innernamespace>
    <innernamespace refid="namespaceutility_1_1templates">utility::templates</innernamespace>
    <innernamespace refid="namespaceutility_1_1templates_1_1details">utility::templates::details</innernamespace>
    <innernamespace refid="namespaceutility_1_1templates_1_1detail">utility::templates::detail</innernamespace>
    <innernamespace refid="namespaceutility_1_1templates_1_1match__detail">utility::templates::match_detail</innernamespace>
    <innernamespace refid="namespaceutility_1_1templates_1_1operators">utility::templates::operators</innernamespace>
    <innernamespace refid="namespaceutility_1_1templates_1_1operators_1_1details">utility::templates::operators::details</innernamespace>
    <innernamespace refid="namespacepsl">psl</innernamespace>
    <innernamespace refid="namespacepsl_1_1templates">psl::templates</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;psl/assertions.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutility_1_1templates" kindref="compound">utility::templates</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">details</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>second,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>remainder&gt;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_impl()<sp/>noexcept</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>(first<sp/>&gt;<sp/>second)<sp/>?<sp/>first<sp/>:<sp/>second;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(remainder)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>details::max_impl&lt;val,<sp/>remainder...&gt;();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>second,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>remainder&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_impl()<sp/>noexcept</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>(first<sp/>&lt;<sp/>second)<sp/>?<sp/>first<sp/>:<sp/>second;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(remainder)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>details::min_impl&lt;val,<sp/>remainder...&gt;();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>remainder&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max()<sp/>noexcept</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(remainder)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>details::max_impl&lt;first,<sp/>remainder...&gt;();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>remainder&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min()<sp/>noexcept</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(remainder)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>details::min_impl&lt;first,<sp/>remainder...&gt;();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">overloaded<sp/>:<sp/>Ts...</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Ts::operator()...;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>overloaded(Ts...)<sp/>-&gt;<sp/>overloaded&lt;Ts...&gt;;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>std::array&lt;T,<sp/>N&gt;<sp/>make_array(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>v)<sp/>noexcept</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;T,<sp/>N&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.fill(v);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_container</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_type;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_type&lt;T,<sp/>std::tuple&lt;&gt;&gt;<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_type&lt;T,<sp/>std::tuple&lt;U,<sp/>Ts...&gt;&gt;<sp/>:<sp/>has_type&lt;T,<sp/>std::tuple&lt;Ts...&gt;&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_type&lt;T,<sp/>std::tuple&lt;T,<sp/>Ts...&gt;&gt;<sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tuple_contains_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>has_type&lt;T,<sp/>Tuple&gt;::type;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handy<sp/>utility<sp/>for<sp/>the<sp/>compilers<sp/>that<sp/>wish<sp/>to<sp/>compile<sp/>static_assert(false,&quot;&quot;)<sp/>in<sp/>dead<sp/>code<sp/>paths<sp/>that<sp/>should<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">always_false<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>always_false_v<sp/>=<sp/>always_false&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Trait,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Enabler,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_detected<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Trait,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_detected&lt;Trait,<sp/>std::void_t&lt;Trait&lt;Args...&gt;&gt;,<sp/>Args...&gt;<sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Trait,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_detected<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::is_detected&lt;Trait,<sp/>void,<sp/>Args...&gt;::type;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">match_detail</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variant_index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VariantType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OneFunc&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>match(VariantType&amp;&amp;<sp/>variant,<sp/>OneFunc<sp/>func)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(variant.index()<sp/>==<sp/>variant_index);<sp/>//<sp/>todo<sp/>write<sp/>correct<sp/>assertation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(variant.index()<sp/>!=<sp/>variant_index)<sp/>debug_break();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(get&lt;variant_index&gt;(std::forward&lt;VariantType&gt;(variant)));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variant_index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VariantType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FirstFunc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SecondFunc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Rest&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>match(VariantType&amp;&amp;<sp/>variant,<sp/>FirstFunc<sp/>func1,<sp/>SecondFunc<sp/>func2,<sp/>Rest...<sp/>funcs)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(variant.index()<sp/>==<sp/>variant_index)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match&lt;variant_index&gt;(variant,<sp/>func1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>single<sp/>func<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match&lt;variant_index<sp/>+<sp/>1&gt;(std::forward&lt;VariantType&gt;(variant),<sp/>func2,<sp/>funcs...);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>match_detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">all_same<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">all_same&lt;T&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">all_same&lt;T,<sp/>T,<sp/>args...&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>all_same&lt;T,<sp/>args...&gt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VariantType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Funcs&gt;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>match(VariantType&amp;&amp;<sp/>variant,<sp/>Funcs...<sp/>funcs)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>VT<sp/>=<sp/>std::remove_reference_t&lt;VariantType&gt;;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(funcs)<sp/>==<sp/>std::variant_size&lt;VT&gt;::value,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>functions<sp/>must<sp/>match<sp/>number<sp/>of<sp/>variant<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_detail::match&lt;0&gt;(std::forward&lt;VariantType&gt;(variant),<sp/>funcs...);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">remove_all</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">remove_all&lt;T*&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>remove_all&lt;T&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>T<sp/>trueval,<sp/>T<sp/>falseval&gt;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">conditional_value<sp/>:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::conditional&lt;B,<sp/>std::integral_constant&lt;T,<sp/>trueval&gt;,<sp/>std::integral_constant&lt;T,<sp/>falseval&gt;&gt;::type</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_pair<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_associative_container</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_trivial_container</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_complex_container</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_container</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{is_trivial_container&lt;T&gt;::value<sp/>||<sp/>is_complex_container&lt;T&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_associative_container&lt;T&gt;::value};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_trivial_container&lt;std::vector&lt;T,<sp/>A&gt;&gt;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_complex_container&lt;std::tuple&lt;T,<sp/>A...&gt;&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_complex_container&lt;std::unordered_set&lt;T,<sp/>A&gt;&gt;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_associative_container&lt;std::unordered_map&lt;T,<sp/>A&gt;&gt;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_pair&lt;std::pair&lt;T,<sp/>A&gt;&gt;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">get_key_type</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">get_key_type&lt;std::unordered_map&lt;T,<sp/>A&gt;&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">get_value_type</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">get_value_type&lt;std::unordered_map&lt;T,<sp/>A&gt;&gt;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">operators</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">details</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/6534041/how-to-check-whether-operator-exists/6534951</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">op_valid_impl</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(std::declval&lt;U&gt;()(std::declval&lt;L&gt;(),<sp/>std::declval&lt;R&gt;()),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(),<sp/>std::true_type());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>decltype(test&lt;Op,<sp/>X,<sp/>Y&gt;(0));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_pre_increment</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>U,<sp/>typename<sp/>=<sp/>decltype(++(std::declval&lt;U&amp;&gt;()))&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;&amp;);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test(std::declval&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_post_increment</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>U,<sp/>typename<sp/>=<sp/>decltype((std::declval&lt;U&amp;&gt;())++)&gt;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;&amp;);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test(std::declval&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_pre_decrement</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>decltype(--(std::declval&lt;U&amp;&gt;()))&gt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;&amp;);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test(std::declval&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_post_decrement</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>U,<sp/>typename<sp/>=<sp/>decltype((std::declval&lt;U&amp;&gt;())--)&gt;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;&amp;);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test(std::declval&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_bool_operator</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>U,<sp/>typename<sp/>=<sp/>decltype((std::declval&lt;U&amp;&gt;()).</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">())&gt;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;&amp;);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test(std::declval&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/31305894/how-to-check-for-the-existence-of-a-subscript-operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_subscript_operator<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index&gt;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_subscript_operator&lt;T,<sp/>Index,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;()[std::declval&lt;Index&gt;()])&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_plus<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_plus&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator+(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_minus<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_minus&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator-(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_multiply<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_multiply&lt;T,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator*(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_divide<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_divide&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator/(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_modulus<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_arithmetic_modulus&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator%(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_plus<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_plus&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator+=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_minus<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_minus&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator-=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_multiply<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_multiply&lt;T,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator*=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_divide<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_divide&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator/=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_modulus<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_modulus&lt;T,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator%=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_and<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_and&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator&amp;=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_or<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_or&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator|=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_xor<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_xor&lt;T,<sp/>U,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator^=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_left_shift<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_assignment_left_shift&lt;T,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator&lt;&lt;=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>U,<sp/>typename<sp/>=<sp/>void&gt;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>has_assignment_right_shift<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>has_assignment_right_shift&lt;T,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().operator&gt;&gt;=(std::declval&lt;U&gt;()))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>op_valid<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>op_valid_impl&lt;X,<sp/>Y,<sp/>Op&gt;::type;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">left_shift</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(L&amp;&amp;<sp/>l,<sp/>R&amp;&amp;<sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept(noexcept(std::forward&lt;L&gt;(l)<sp/>&lt;&lt;<sp/>std::forward&lt;R&gt;(r)))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(std::forward&lt;L&gt;(l)<sp/>&lt;&lt;<sp/>std::forward&lt;R&gt;(r))</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;L&gt;(l)<sp/>&lt;&lt;<sp/>std::forward&lt;R&gt;(r);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">right_shift</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(L&amp;&amp;<sp/>l,<sp/>R&amp;&amp;<sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept(noexcept(std::forward&lt;L&gt;(l)<sp/>&gt;&gt;<sp/>std::forward&lt;R&gt;(r)))</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(std::forward&lt;L&gt;(l)<sp/>&gt;&gt;<sp/>std::forward&lt;R&gt;(r))</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;L&gt;(l)<sp/>&gt;&gt;<sp/>std::forward&lt;R&gt;(r);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logical<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_logical_not<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::logical_not&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_logical_and<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::logical_and&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_logical_or<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::logical_or&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relational<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_equality<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::equal_to&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_inequality<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::not_equal_to&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_less_than<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::less&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_less_equal<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::less_equal&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_greater_than<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::greater&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_greater_equal<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::greater_equal&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bitshift<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_bit_xor<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::bit_xor&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_bit_or<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::bit_or&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_bit_and<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::bit_and&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_bit_complement<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>std::bit_not&lt;&gt;&gt;;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_bit_not<sp/>=<sp/>has_bit_complement&lt;X,<sp/>Y&gt;;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_left_shift<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>details::left_shift&gt;;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_right_shift<sp/>=<sp/>details::op_valid&lt;X,<sp/>Y,<sp/>details::right_shift&gt;;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment/decrement<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_pre_increment<sp/>=<sp/>details::has_pre_increment&lt;X&gt;;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_post_increment<sp/>=<sp/>details::has_post_increment&lt;X&gt;;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_pre_decrement<sp/>=<sp/>details::has_pre_decrement&lt;X&gt;;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_post_decrement<sp/>=<sp/>details::has_post_decrement&lt;X&gt;;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_bool_operator<sp/>=<sp/>details::has_bool_operator&lt;X&gt;;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subscript<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index&gt;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_subscript_operator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_subscript_operator&lt;T,<sp/>Index&gt;::type;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index&gt;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_bracket_operator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>has_subscript_operator&lt;T,<sp/>Index&gt;::type;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arithmetic<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_arithmetic_plus<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_arithmetic_plus&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_arithmetic_minus<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_arithmetic_minus&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_arithmetic_multiply<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_arithmetic_multiply&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_arithmetic_divide<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_arithmetic_divide&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_arithmetic_modulus<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_arithmetic_modulus&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment<sp/>=<sp/>std::is_assignable&lt;X,<sp/>Y&gt;;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compound<sp/>assignment<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_plus<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_plus&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_minus<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_minus&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_multiply<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_multiply&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_divide<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_divide&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_modulus<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_modulus&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_and<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_and&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_or<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_or&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_xor<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_xor&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_left_shift<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_left_shift&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_assignment_right_shift<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>details::has_assignment_right_shift&lt;T,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo<sp/>move<sp/>these<sp/>helpers<sp/>to<sp/>a<sp/>better<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>struct<sp/>func_traits<sp/>:<sp/>public<sp/>func_traits&lt;decltype(&amp;decltype(std::function(std::declval&lt;T&gt;()))::operator())<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_traits<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>func_traits&lt;decltype(&amp;T::operator())&gt;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_traits&lt;std::function&lt;T&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>func_traits&lt;T&gt;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_traits&lt;std::function&lt;T&gt;&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>func_traits&lt;T&gt;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_traits&lt;const<sp/>std::function&lt;T&gt;&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>func_traits&lt;T&gt;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_traits&lt;Ret<sp/>(C::*)(Args...)&gt;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>result_t<sp/><sp/><sp/><sp/>=<sp/>Ret;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>arguments_t<sp/>=<sp/>std::tuple&lt;Args...&gt;;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_traits&lt;Ret<sp/>(*)(Args...)&gt;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>result_t<sp/><sp/><sp/><sp/>=<sp/>Ret;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>arguments_t<sp/>=<sp/>std::tuple&lt;Args...&gt;;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_traits&lt;Ret<sp/>(C::*)(Args...)<sp/>const&gt;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>result_t<sp/><sp/><sp/><sp/>=<sp/>Ret;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>arguments_t<sp/>=<sp/>std::tuple&lt;Args...&gt;;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_invocable</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>decltype(&amp;T::operator())&gt;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;&amp;);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test(std::declval&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">proxy_type</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">any</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T&amp;&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/>std::make_index_sequence&lt;N&gt;,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_callable_n<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/>std::size_t<sp/>N,<sp/>std::size_t...<sp/>Idx&gt;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_callable_n&lt;F,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::index_sequence&lt;Idx...&gt;,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::void_t&lt;decltype(std::declval&lt;F&gt;()((Idx,<sp/>std::declval&lt;any<sp/>const&amp;&amp;&gt;())...))&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utility::templates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">psl::templates</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutility_1_1templates" kindref="compound">utility::templates</ref>;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/template_utils.hpp"/>
  </compounddef>
</doxygen>
