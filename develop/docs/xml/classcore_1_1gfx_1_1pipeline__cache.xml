<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1gfx_1_1pipeline__cache" kind="class" language="C++" prot="public">
    <compoundname>core::gfx::pipeline_cache</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1gfx_1_1pipeline__cache_1a2f78072e44c00b137ac9e7b92ce0a4fa" prot="private" static="no" mutable="no">
        <type>core::gfx::graphics_backend</type>
        <definition>core::gfx::graphics_backend core::gfx::pipeline_cache::m_Backend</definition>
        <argsstring></argsstring>
        <name>m_Backend</name>
        <initializer>{graphics_backend::undefined}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="44" column="29" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1gfx_1_1pipeline__cache_1ab6482e975bbf7dc3a7de77cb95c4b019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pipeline_cache::pipeline_cache</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::resource::handle&lt; core::gfx::context &gt; context)</argsstring>
        <name>pipeline_cache</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::context &gt;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="21" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/pipeline_cache.cpp" bodystart="27" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1pipeline__cache_1a202cf0a15c5cb7d62e6c03b25dd5e8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pipeline_cache::~pipeline_cache</definition>
        <argsstring>()=default</argsstring>
        <name>~pipeline_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="25" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline_cache.cpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1pipeline__cache_1af2d982d78b5d4ad1f8d31a4e16f13525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::gfx::pipeline_cache::pipeline_cache</definition>
        <argsstring>(const pipeline_cache &amp;other)=default</argsstring>
        <name>pipeline_cache</name>
        <param>
          <type>const pipeline_cache &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1pipeline__cache_1a9b36e091dc8157bec3c3a67495c8ec0f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>core::gfx::pipeline_cache::pipeline_cache</definition>
        <argsstring>(pipeline_cache &amp;&amp;other) noexcept=default</argsstring>
        <name>pipeline_cache</name>
        <param>
          <type>pipeline_cache &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1pipeline__cache_1a6c99aa72ca1b23a7357876de8db1c147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pipeline_cache &amp;</type>
        <definition>pipeline_cache&amp; core::gfx::pipeline_cache::operator=</definition>
        <argsstring>(const pipeline_cache &amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const pipeline_cache &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="29" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1pipeline__cache_1a4edec78caf259cc9e3fb02308f42404e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>pipeline_cache &amp;</type>
        <definition>pipeline_cache&amp; core::gfx::pipeline_cache::operator=</definition>
        <argsstring>(pipeline_cache &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>pipeline_cache &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="30" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1pipeline__cache_1a6086f213304262459ae1501ad16bd6b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>core::gfx::graphics_backend</type>
            <declname>backend</declname>
            <defname>backend</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; backend_type_t&lt; pipeline_cache, backend &gt; &gt;</type>
        <definition>core::resource::handle&lt;backend_type_t&lt;pipeline_cache, backend&gt; &gt; core::gfx::pipeline_cache::resource</definition>
        <argsstring>() const noexcept</argsstring>
        <name>resource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="33" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" bodystart="33" bodyend="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" line="11" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/pipeline_cache.hpp" bodystart="10" bodyend="51"/>
    <listofallmembers>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1a2f78072e44c00b137ac9e7b92ce0a4fa" prot="private" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>m_Backend</name></member>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1a6c99aa72ca1b23a7357876de8db1c147" prot="public" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>operator=</name></member>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1a4edec78caf259cc9e3fb02308f42404e" prot="public" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>operator=</name></member>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1ab6482e975bbf7dc3a7de77cb95c4b019" prot="public" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>pipeline_cache</name></member>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1af2d982d78b5d4ad1f8d31a4e16f13525" prot="public" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>pipeline_cache</name></member>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1a9b36e091dc8157bec3c3a67495c8ec0f" prot="public" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>pipeline_cache</name></member>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1a6086f213304262459ae1501ad16bd6b5" prot="public" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>resource</name></member>
      <member refid="classcore_1_1gfx_1_1pipeline__cache_1a202cf0a15c5cb7d62e6c03b25dd5e8ff" prot="public" virt="non-virtual"><scope>core::gfx::pipeline_cache</scope><name>~pipeline_cache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
