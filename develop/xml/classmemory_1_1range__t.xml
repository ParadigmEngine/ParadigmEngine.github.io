<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmemory_1_1range__t" kind="class" language="C++" prot="public">
    <compoundname>memory::range_t</compoundname>
    <includes refid="range_8hpp" local="no">range.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmemory_1_1range__t_1ab7ede76a50160a250e9b9ff61761b4c8" prot="public" static="no" mutable="no">
        <type>std::uintptr_t</type>
        <definition>std::uintptr_t memory::range_t::begin</definition>
        <argsstring></argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="32" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmemory_1_1range__t_1a2bedd5c7f0a42ac2f2c9a0c9dc4d9437" prot="public" static="no" mutable="no">
        <type>std::uintptr_t</type>
        <definition>std::uintptr_t memory::range_t::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="33" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmemory_1_1range__t_1a80173caf59beaafa10a05337d31824c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>memory::range_t::range_t</definition>
        <argsstring>()=default</argsstring>
        <name>range_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="10" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1afccc5ea8bdf2f774a583b2de04b54c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>range_t::range_t</definition>
        <argsstring>(std::uintptr_t begin, std::uintptr_t end)</argsstring>
        <name>range_t</name>
        <param>
          <type>std::uintptr_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>std::uintptr_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="11" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="6" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1ad07071142a013c6db4ce4922a0fdedac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>memory::range_t::range_t</definition>
        <argsstring>(range_t &amp;&amp;other)=default</argsstring>
        <name>range_t</name>
        <param>
          <type><ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1adc05a38a48620ecbdecf13fefcba2e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>memory::range_t::range_t</definition>
        <argsstring>(const range_t &amp;other)=default</argsstring>
        <name>range_t</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1afe4acfeab5525fd21f65d20a049569e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
        <definition>range_t&amp; memory::range_t::operator=</definition>
        <argsstring>(range_t &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="15" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1acd763d8704ff0534fd7a1e5f08d8a97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
        <definition>range_t&amp; memory::range_t::operator=</definition>
        <argsstring>(const range_t &amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="16" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a69ee7b61e8d3cf82f54beaba4a0962d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator==</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="18" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="8" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1ac177c8d9d7d3d137072314ff64bdb527" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator!=</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="19" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="11" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a47cbb15b29d4efe63cc70ed40641ade0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator&lt;</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="20" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a5a571e9a7c1a0c547af73dba847074f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator&gt;</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="21" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a2b554088fa1ff7411948aec6a0b8b5ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator&lt;=</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="22" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a93420c058399828f4d917b67d5943b42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator&gt;=</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="23" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a151cbc905ef020502ae99e7353c77665" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::contains</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="25" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a31d1a993980dc4ef9686510339b4c1c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::is_contained_by</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>is_contained_by</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="26" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a639df1f1fe9d603718451d9a8ece9075" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::overlaps</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>overlaps</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="27" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a92c1c66e1a49aea72d80c8cefb524ee5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::touches</definition>
        <argsstring>(const range_t &amp;other) const</argsstring>
        <name>touches</name>
        <param>
          <type>const <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="28" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1range__t_1a09f155e0ab27824548380909c06d3ae5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t range_t::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="30" column="8" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/range.cpp" bodystart="31" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>defines a begin/end location in (virtual) memory (in respect to the region, or segment). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" line="8" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/range.hpp" bodystart="7" bodyend="34"/>
    <listofallmembers>
      <member refid="classmemory_1_1range__t_1ab7ede76a50160a250e9b9ff61761b4c8" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>begin</name></member>
      <member refid="classmemory_1_1range__t_1a151cbc905ef020502ae99e7353c77665" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>contains</name></member>
      <member refid="classmemory_1_1range__t_1a2bedd5c7f0a42ac2f2c9a0c9dc4d9437" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>end</name></member>
      <member refid="classmemory_1_1range__t_1a31d1a993980dc4ef9686510339b4c1c7" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>is_contained_by</name></member>
      <member refid="classmemory_1_1range__t_1ac177c8d9d7d3d137072314ff64bdb527" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator!=</name></member>
      <member refid="classmemory_1_1range__t_1a47cbb15b29d4efe63cc70ed40641ade0" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator&lt;</name></member>
      <member refid="classmemory_1_1range__t_1a2b554088fa1ff7411948aec6a0b8b5ce" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator&lt;=</name></member>
      <member refid="classmemory_1_1range__t_1afe4acfeab5525fd21f65d20a049569e6" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator=</name></member>
      <member refid="classmemory_1_1range__t_1acd763d8704ff0534fd7a1e5f08d8a97d" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator=</name></member>
      <member refid="classmemory_1_1range__t_1a69ee7b61e8d3cf82f54beaba4a0962d8" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator==</name></member>
      <member refid="classmemory_1_1range__t_1a5a571e9a7c1a0c547af73dba847074f4" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator&gt;</name></member>
      <member refid="classmemory_1_1range__t_1a93420c058399828f4d917b67d5943b42" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>operator&gt;=</name></member>
      <member refid="classmemory_1_1range__t_1a639df1f1fe9d603718451d9a8ece9075" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>overlaps</name></member>
      <member refid="classmemory_1_1range__t_1a80173caf59beaafa10a05337d31824c2" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>range_t</name></member>
      <member refid="classmemory_1_1range__t_1afccc5ea8bdf2f774a583b2de04b54c43" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>range_t</name></member>
      <member refid="classmemory_1_1range__t_1ad07071142a013c6db4ce4922a0fdedac" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>range_t</name></member>
      <member refid="classmemory_1_1range__t_1adc05a38a48620ecbdecf13fefcba2e6e" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>range_t</name></member>
      <member refid="classmemory_1_1range__t_1a09f155e0ab27824548380909c06d3ae5" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>size</name></member>
      <member refid="classmemory_1_1range__t_1a92c1c66e1a49aea72d80c8cefb524ee5" prot="public" virt="non-virtual"><scope>memory::range_t</scope><name>touches</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
