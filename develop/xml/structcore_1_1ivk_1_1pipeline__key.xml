<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structcore_1_1ivk_1_1pipeline__key" kind="struct" language="C++" prot="public">
    <compoundname>core::ivk::pipeline_key</compoundname>
    <includes refid="vk_2pipeline__cache_8hpp" local="no">pipeline_cache.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structcore_1_1ivk_1_1pipeline__key_1adfa46ecc94775203dbbd0d00b1727f96" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; std::pair&lt; vk::DescriptorType, uint32_t &gt; &gt;</type>
        <definition>const std::vector&lt;std::pair&lt;vk::DescriptorType, uint32_t&gt; &gt; core::ivk::pipeline_key::descriptors</definition>
        <argsstring></argsstring>
        <name>descriptors</name>
        <briefdescription>
<para>the contained descriptors that describe this key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="61" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcore_1_1ivk_1_1pipeline__key_1ae6edadff4f8065089cc94dc616bb31a6" prot="public" static="no" mutable="no">
        <type>const vk::RenderPass</type>
        <definition>const vk::RenderPass core::ivk::pipeline_key::renderPass</definition>
        <argsstring></argsstring>
        <name>renderPass</name>
        <briefdescription>
<para>the bound renderpass of this key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="63" column="22" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcore_1_1ivk_1_1pipeline__key_1aa79474132651d2c5242ba30ccef5bb1f" prot="public" static="no" mutable="no">
        <type><ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref></type>
        <definition>psl::UID core::ivk::pipeline_key::uid</definition>
        <argsstring></argsstring>
        <name>uid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="64" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcore_1_1ivk_1_1pipeline__key_1a477c98bf49b20cdcaca6eb2ee5bcb1af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline_key::pipeline_key</definition>
        <argsstring>()=default</argsstring>
        <name>pipeline_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structcore_1_1ivk_1_1pipeline__key_1a6dfe740390c772c3131a5fa92278ab2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pipeline_key::pipeline_key</definition>
        <argsstring>(const psl::UID &amp;uid, core::resource::handle&lt; core::data::material_t &gt; data, vk::RenderPass pass)</argsstring>
        <name>pipeline_key</name>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>uid</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>vk::RenderPass</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
<para>constructor based on the data you wish to store. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="structcore_1_1ivk_1_1pipeline__key" kindref="compound">pipeline_key</ref> does not update when the material data has been updated. the material will no longer be able to use this key when it changes its properties. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="39" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline_cache.cpp" bodystart="80" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structcore_1_1ivk_1_1pipeline__key_1a92a116941c11a01d0679945d79ed2b1c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::ivk::pipeline_key::operator==</definition>
        <argsstring>(const pipeline_key &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structcore_1_1ivk_1_1pipeline__key" kindref="compound">pipeline_key</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="41" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="41" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structcore_1_1ivk_1_1pipeline__key_1a8657102ba2ec609ab9628510d6a33827" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::ivk::pipeline_key::operator!=</definition>
        <argsstring>(const pipeline_key &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structcore_1_1ivk_1_1pipeline__key" kindref="compound">pipeline_key</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="50" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="50" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>the pipeline key creates a hash of the important elements of a vk::Pipeline </para>
    </briefdescription>
    <detaileddescription>
<para>when you want to store, and lookup pipelines based on their properties, then <ref refid="structcore_1_1ivk_1_1pipeline__key" kindref="compound">pipeline_key</ref> is the way to go. the pipeline key allows you to calculate a hash based on the identifying properties that make it unique (for the GPU), and easily retrieve it. to see this being used, check <ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">core::ivk::pipeline_cache</ref>. <simplesect kind="see"><para><ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">core::ivk::pipeline_cache</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>core::ivk::pipeline_key</label>
        <link refid="structcore_1_1ivk_1_1pipeline__key"/>
        <childnode refid="2" relation="usage">
          <edgelabel>uid</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>psl::UID</label>
        <link refid="structpsl_1_1_u_i_d"/>
        <childnode refid="2" relation="usage">
          <edgelabel>invalid_uid</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" line="34" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline_cache.hpp" bodystart="33" bodyend="65"/>
    <listofallmembers>
      <member refid="structcore_1_1ivk_1_1pipeline__key_1adfa46ecc94775203dbbd0d00b1727f96" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_key</scope><name>descriptors</name></member>
      <member refid="structcore_1_1ivk_1_1pipeline__key_1a8657102ba2ec609ab9628510d6a33827" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_key</scope><name>operator!=</name></member>
      <member refid="structcore_1_1ivk_1_1pipeline__key_1a92a116941c11a01d0679945d79ed2b1c" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_key</scope><name>operator==</name></member>
      <member refid="structcore_1_1ivk_1_1pipeline__key_1a477c98bf49b20cdcaca6eb2ee5bcb1af" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_key</scope><name>pipeline_key</name></member>
      <member refid="structcore_1_1ivk_1_1pipeline__key_1a6dfe740390c772c3131a5fa92278ab2c" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_key</scope><name>pipeline_key</name></member>
      <member refid="structcore_1_1ivk_1_1pipeline__key_1ae6edadff4f8065089cc94dc616bb31a6" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_key</scope><name>renderPass</name></member>
      <member refid="structcore_1_1ivk_1_1pipeline__key_1aa79474132651d2c5242ba30ccef5bb1f" prot="public" virt="non-virtual"><scope>core::ivk::pipeline_key</scope><name>uid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
