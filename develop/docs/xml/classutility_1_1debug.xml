<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classutility_1_1debug" kind="class" language="C++" prot="public">
    <compoundname>utility::debug</compoundname>
    <includes refid="platform__utils_8hpp" local="no">platform_utils.hpp</includes>
    <innerclass refid="structutility_1_1debug_1_1trace__info" prot="public">utility::debug::trace_info</innerclass>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classutility_1_1debug_1a6db55b80eb229ac025f2f807a8b83126" prot="private" static="yes" mutable="no">
        <type>std::unordered_map&lt; std::thread::id, psl::string8_t &gt;</type>
        <definition>std::unordered_map&lt;std::thread::id, psl::string8_t&gt; utility::debug::m_ThreadMap</definition>
        <argsstring></argsstring>
        <name>m_ThreadMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="112" column="27" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classutility_1_1debug_1a1ec7f06ca0a38996310911871bfa1293" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structutility_1_1debug_1_1trace__info" kindref="compound">trace_info</ref> &gt;</type>
        <definition>std::vector&lt; utility::debug::trace_info &gt; utility::debug::trace</definition>
        <argsstring>(size_t offset=0u, size_t depth=255u, std::optional&lt; std::thread::id &gt; id=std::nullopt)</argsstring>
        <name>trace</name>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
          <defval>0u</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>depth</declname>
          <defval>255u</defval>
        </param>
        <param>
          <type>std::optional&lt; std::thread::id &gt;</type>
          <declname>id</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>method to get trace information of the current callstack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>what height of the callstack to start from (0 being the bottom, not root of the callstack).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">depth</parametername>
</parameternamelist>
<parameterdescription>
<para>how far up should we get information from (i.e. a depth of 1 would only get the current information, while 255 would likely get you to the root). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an std::vector containing a struct of <ref refid="structutility_1_1debug_1_1trace__info" kindref="compound">trace_info</ref> of the current callstack (excluding this method). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="48" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/platform_utils.cpp" bodystart="193" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1aa100d76b555c7af54c99052e22158500" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; void * &gt;</type>
        <definition>std::vector&lt; void * &gt; utility::debug::raw_trace</definition>
        <argsstring>(size_t offset=0u, size_t depth=255u)</argsstring>
        <name>raw_trace</name>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
          <defval>0u</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>depth</declname>
          <defval>255u</defval>
        </param>
        <briefdescription>
<para>method to get raw trace information of the current callstack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>what height of the callstack to start from (0 being the bottom, not root of the callstack).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">depth</parametername>
</parameternamelist>
<parameterdescription>
<para>how far up should we get information from (i.e. a depth of 1 would only get the current information, while 255 would likely get you to the root). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an std::vector containing void pointers pointing to the address of the current callstack (excluding this method). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="56" column="20" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/platform_utils.cpp" bodystart="285" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1aa72d2fd2798790c6025d0d13bc1c77c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structutility_1_1debug_1_1trace__info" kindref="compound">utility::debug::trace_info</ref></type>
        <definition>utility::debug::trace_info utility::debug::demangle</definition>
        <argsstring>(void *target)</argsstring>
        <name>demangle</name>
        <param>
          <type>void *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="58" column="35" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/platform_utils.cpp" bodystart="304" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1ad0d6d960216bf55aa17585db20a951cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void utility::debug::register_thread</definition>
        <argsstring>(const std::thread::id &amp;id, const psl::string8_t &amp;name)</argsstring>
        <name>register_thread</name>
        <param>
          <type>const std::thread::id &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const psl::string8_t &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>helper method to give a name to a specific thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>thread::id that will be named. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name to assign to the given thread::id. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="62" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1ab93368888d1d1a3311a5df14dfd2dba6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void utility::debug::register_thread</definition>
        <argsstring>(const psl::string8_t &amp;name)</argsstring>
        <name>register_thread</name>
        <param>
          <type>const psl::string8_t &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>helper method to name the current (this) thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name to assign to std::this_thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="69" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1a38befb772a017c465a37c4089ddcb20e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const psl::string8_t</type>
        <definition>static const psl::string8_t utility::debug::thread_name</definition>
        <argsstring>(const std::thread::id &amp;id)</argsstring>
        <name>thread_name</name>
        <param>
          <type>const std::thread::id &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>gets the name of the given thread::id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the thread to look up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name (if any) that is assigned to the given thread::id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="74" column="29" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1aaec83230468c7421c7a70b42aaa2b473" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const psl::string8_t</type>
        <definition>static const psl::string8_t utility::debug::thread_name</definition>
        <argsstring>()</argsstring>
        <name>thread_name</name>
        <briefdescription>
<para>gets the name of the current (this) thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the name (if any) that is assigned to the current thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="78" column="29" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1a6f4261699633c5a33c27ff5bae12a7b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const psl::string8_t</type>
        <definition>static const psl::string8_t utility::debug::func_to_class</definition>
        <argsstring>(const char *fullFuncName)</argsstring>
        <name>func_to_class</name>
        <param>
          <type>const char *</type>
          <declname>fullFuncName</declname>
        </param>
        <briefdescription>
<para>helper method to extract just the class from a trace. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fullFuncName</parametername>
</parameternamelist>
<parameterdescription>
<para>the signature of the trace. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the class name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="83" column="29" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="83" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classutility_1_1debug_1a206f696e795144931a432607b1dc2c6e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const psl::string8_t</type>
        <definition>static const psl::string8_t utility::debug::func_to_namespace</definition>
        <argsstring>(const char *fullFuncName)</argsstring>
        <name>func_to_namespace</name>
        <param>
          <type>const char *</type>
          <declname>fullFuncName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="100" column="29" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="100" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>contains some debug information, such as trace information, as well as utilities to debug. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" line="31" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/platform_utils.hpp" bodystart="30" bodyend="113"/>
    <listofallmembers>
      <member refid="classutility_1_1debug_1aa72d2fd2798790c6025d0d13bc1c77c0" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>demangle</name></member>
      <member refid="classutility_1_1debug_1a6f4261699633c5a33c27ff5bae12a7b9" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>func_to_class</name></member>
      <member refid="classutility_1_1debug_1a206f696e795144931a432607b1dc2c6e" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>func_to_namespace</name></member>
      <member refid="classutility_1_1debug_1a6db55b80eb229ac025f2f807a8b83126" prot="private" virt="non-virtual"><scope>utility::debug</scope><name>m_ThreadMap</name></member>
      <member refid="classutility_1_1debug_1aa100d76b555c7af54c99052e22158500" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>raw_trace</name></member>
      <member refid="classutility_1_1debug_1ad0d6d960216bf55aa17585db20a951cb" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>register_thread</name></member>
      <member refid="classutility_1_1debug_1ab93368888d1d1a3311a5df14dfd2dba6" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>register_thread</name></member>
      <member refid="classutility_1_1debug_1a38befb772a017c465a37c4089ddcb20e" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>thread_name</name></member>
      <member refid="classutility_1_1debug_1aaec83230468c7421c7a70b42aaa2b473" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>thread_name</name></member>
      <member refid="classutility_1_1debug_1a1ec7f06ca0a38996310911871bfa1293" prot="public" virt="non-virtual"><scope>utility::debug</scope><name>trace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
