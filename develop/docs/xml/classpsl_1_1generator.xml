<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpsl_1_1generator" kind="class" language="C++" prot="public">
    <compoundname>psl::generator</compoundname>
    <innerclass refid="structpsl_1_1generator_1_1range" prot="private">psl::generator::range</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>uint32_t</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpsl_1_1generator_1a6f8b96d439977c98c69e9222028e25e2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; range &gt;</type>
        <definition>std::vector&lt;range&gt; psl::generator&lt; T &gt;::m_FreeRanges</definition>
        <argsstring></argsstring>
        <name>m_FreeRanges</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="44" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1generator_1a7fa2ac467b9893eb53de2de0c164a7d0" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T psl::generator&lt; T &gt;::m_Max</definition>
        <argsstring></argsstring>
        <name>m_Max</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="45" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsl_1_1generator_1ace06b22e8290d27cf5145f5d8ecf3dde" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>psl::generator&lt; T &gt;::generator</definition>
        <argsstring>(T max)</argsstring>
        <name>generator</name>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="48" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1ad425ca49cc64455a627fe8eea812b8d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>psl::generator&lt; T &gt;::generator</definition>
        <argsstring>()</argsstring>
        <name>generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="50" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1ab2bd889ad0ea0de525a64eb620513bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>generator &amp;</type>
        <definition>generator&amp; psl::generator&lt; T &gt;::operator=</definition>
        <argsstring>(const generator &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const generator &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="52" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a0bc00963bff714603b9419bf0af4b441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>psl::generator&lt; T &gt;::generator</definition>
        <argsstring>(const generator &amp;)=default</argsstring>
        <name>generator</name>
        <param>
          <type>const generator &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a8edb1a40ba98b538e9086c8427396112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>psl::generator&lt; T &gt;::generator</definition>
        <argsstring>(generator &amp;&amp;other)</argsstring>
        <name>generator</name>
        <param>
          <type>generator &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="55" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a41747b65818f908918485f5c64c45530" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>generator &amp;</type>
        <definition>generator&amp; psl::generator&lt; T &gt;::operator=</definition>
        <argsstring>(generator &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>generator &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="57" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="57" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1acf475a73605d4a0a71fb0c4ca900842b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T psl::generator&lt; T &gt;::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="67" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1afb00592a5f904f3ff352b5b9ba1d6fbe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T psl::generator&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="68" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1afb857da89ac6d748b850fe69e4a8bba7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T psl::generator&lt; T &gt;::available</definition>
        <argsstring>() const noexcept</argsstring>
        <name>available</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="69" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="69" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a70ffb94cfbead4da9d4cad1d6e86e268" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T psl::generator&lt; T &gt;::create</definition>
        <argsstring>(T count=1)</argsstring>
        <name>create</name>
        <param>
          <type>T</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="80" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="80" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a431440cd922f49f59bea27b4c2e1ea0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; T, T &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;T, T&gt; &gt; psl::generator&lt; T &gt;::create_multi</definition>
        <argsstring>(T count=1)</argsstring>
        <name>create_multi</name>
        <param>
          <type>T</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="103" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="103" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a2564ae2259703abeb0f19d5ae67d2829" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::generator&lt; T &gt;::try_create</definition>
        <argsstring>(T &amp;out, T count=1)</argsstring>
        <name>try_create</name>
        <param>
          <type>T &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="130" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="130" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a6541afa15f529d871849569acc8bfef9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::generator&lt; T &gt;::destroy</definition>
        <argsstring>(T id, T count=1)</argsstring>
        <name>destroy</name>
        <param>
          <type>T</type>
          <declname>id</declname>
        </param>
        <param>
          <type>T</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="155" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="155" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a9661914cf24096ee1b3f217b0bb1c986" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::generator&lt; T &gt;::valid</definition>
        <argsstring>(T id, T count=1) const noexcept</argsstring>
        <name>valid</name>
        <param>
          <type>T</type>
          <declname>id</declname>
        </param>
        <param>
          <type>T</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="183" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="183" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a9884500dc4c68d30ead302f3cf9828cc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T psl::generator&lt; T &gt;::largest_continuous_range</definition>
        <argsstring>() const noexcept</argsstring>
        <name>largest_continuous_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="196" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="196" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1generator_1a3808f90508de5bbeaf87d69410932c50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::generator&lt; T &gt;::resize</definition>
        <argsstring>(T size)</argsstring>
        <name>resize</name>
        <param>
          <type>T</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="206" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="206" bodyend="233"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" line="17" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/IDGenerator.hpp" bodystart="16" bodyend="234"/>
    <listofallmembers>
      <member refid="classpsl_1_1generator_1afb857da89ac6d748b850fe69e4a8bba7" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>available</name></member>
      <member refid="classpsl_1_1generator_1acf475a73605d4a0a71fb0c4ca900842b" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>capacity</name></member>
      <member refid="classpsl_1_1generator_1a70ffb94cfbead4da9d4cad1d6e86e268" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>create</name></member>
      <member refid="classpsl_1_1generator_1a431440cd922f49f59bea27b4c2e1ea0d" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>create_multi</name></member>
      <member refid="classpsl_1_1generator_1a6541afa15f529d871849569acc8bfef9" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>destroy</name></member>
      <member refid="classpsl_1_1generator_1ace06b22e8290d27cf5145f5d8ecf3dde" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>generator</name></member>
      <member refid="classpsl_1_1generator_1ad425ca49cc64455a627fe8eea812b8d4" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>generator</name></member>
      <member refid="classpsl_1_1generator_1a0bc00963bff714603b9419bf0af4b441" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>generator</name></member>
      <member refid="classpsl_1_1generator_1a8edb1a40ba98b538e9086c8427396112" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>generator</name></member>
      <member refid="classpsl_1_1generator_1a9884500dc4c68d30ead302f3cf9828cc" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>largest_continuous_range</name></member>
      <member refid="classpsl_1_1generator_1a6f8b96d439977c98c69e9222028e25e2" prot="private" virt="non-virtual"><scope>psl::generator</scope><name>m_FreeRanges</name></member>
      <member refid="classpsl_1_1generator_1a7fa2ac467b9893eb53de2de0c164a7d0" prot="private" virt="non-virtual"><scope>psl::generator</scope><name>m_Max</name></member>
      <member refid="classpsl_1_1generator_1ab2bd889ad0ea0de525a64eb620513bd4" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>operator=</name></member>
      <member refid="classpsl_1_1generator_1a41747b65818f908918485f5c64c45530" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>operator=</name></member>
      <member refid="classpsl_1_1generator_1a3808f90508de5bbeaf87d69410932c50" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>resize</name></member>
      <member refid="classpsl_1_1generator_1afb00592a5f904f3ff352b5b9ba1d6fbe" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>size</name></member>
      <member refid="classpsl_1_1generator_1a2564ae2259703abeb0f19d5ae67d2829" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>try_create</name></member>
      <member refid="classpsl_1_1generator_1a9661914cf24096ee1b3f217b0bb1c986" prot="public" virt="non-virtual"><scope>psl::generator</scope><name>valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
