<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1meta_1_1shader" kind="class" language="C++" prot="public" final="yes">
    <compoundname>core::meta::shader</compoundname>
    <basecompoundref refid="classpsl_1_1meta_1_1file" prot="public" virt="non-virtual">psl::meta::file</basecompoundref>
    <includes refid="meta_2shader_8hpp" local="no">shader.hpp</includes>
    <innerclass refid="classcore_1_1meta_1_1shader_1_1attribute" prot="public">core::meta::shader::attribute</innerclass>
    <innerclass refid="classcore_1_1meta_1_1shader_1_1descriptor" prot="public">core::meta::shader::descriptor</innerclass>
    <innerclass refid="classcore_1_1meta_1_1shader_1_1member" prot="public">core::meta::shader::member</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcore_1_1meta_1_1shader_1ae6e4002148765f114da9fe1b5c64547d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class psl::serialization::accessor</definition>
        <argsstring></argsstring>
        <name>psl::serialization::accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="19" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1meta_1_1shader_1a680a620b8b5cab3863cf39764b535ad2" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;STAGE&quot;, core::gfx::shader_stage &gt;</type>
        <definition>psl::serialization::property&lt;&quot;STAGE&quot;, core::gfx::shader_stage&gt; core::meta::shader::m_Stage</definition>
        <argsstring></argsstring>
        <name>m_Stage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="239" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1shader_1ad5116acd9d2b43020a1d087b36fdd083" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;DESCRIPTORS&quot;, psl::array&lt; descriptor &gt; &gt;</type>
        <definition>psl::serialization::property&lt;&quot;DESCRIPTORS&quot;, psl::array&lt;descriptor&gt; &gt; core::meta::shader::m_Descriptors</definition>
        <argsstring></argsstring>
        <name>m_Descriptors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="240" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1shader_1a0be699a82cec4a9ca61e32f694f9ef73" prot="private" static="no" mutable="no">
        <type>psl::array&lt; attribute &gt;</type>
        <definition>psl::array&lt;attribute&gt; core::meta::shader::m_Attributes</definition>
        <argsstring></argsstring>
        <name>m_Attributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="241" column="12" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1shader_1a6fd7532def6a796ca3308c479f25d212" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t core::meta::shader::m_InputAttributesSize</definition>
        <argsstring></argsstring>
        <name>m_InputAttributesSize</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="242" column="8" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcore_1_1meta_1_1shader_1a0c09e95c706d2b219692089758981fbe" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr psl::string8::view</type>
        <definition>constexpr psl::string8::view core::meta::shader::polymorphic_name</definition>
        <argsstring></argsstring>
        <name>polymorphic_name</name>
        <initializer>{&quot;SHADER_META&quot;}</initializer>
        <briefdescription>
<para>the polymorphic serialization name for the psl::format::node that will be used to calculate the CRC64 ID of this type on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="246" column="37" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1shader_1a9d38e46b065837910ab477be4a2d62d4" prot="private" static="yes" mutable="no">
        <type>const uint64_t</type>
        <definition>const uint64_t shader::polymorphic_identity</definition>
        <argsstring></argsstring>
        <name>polymorphic_identity</name>
        <initializer>{register_polymorphic&lt;<ref refid="classcore_1_1meta_1_1shader" kindref="compound">shader</ref>&gt;()}</initializer>
        <briefdescription>
<para>the associated unique ID (per type, not instance) for the polymorphic system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="250" column="23" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="250" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a2a9563e563fc973911d63ca240a3f100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::meta::shader::shader</definition>
        <argsstring>()=default</argsstring>
        <name>shader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a9791d26da5a99038126ca238630fe14c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>core::meta::shader::shader</definition>
        <argsstring>(const psl::UID &amp;key)</argsstring>
        <name>shader</name>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="161" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a20876dee06e6e2890408e2a8d6a0dce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::meta::shader::~shader</definition>
        <argsstring>()=default</argsstring>
        <name>~shader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1aedfc9e338b714754ab4a1f31c22e6cdc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::meta::shader::per_instance</definition>
        <argsstring>(size_t attribute_index) const noexcept</argsstring>
        <name>per_instance</name>
        <param>
          <type>size_t</type>
          <declname>attribute_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="165" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a229887ec0e289bebe4f10cd8862d3ea8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::meta::shader::per_instance</definition>
        <argsstring>(const attribute &amp;attribute) const noexcept</argsstring>
        <name>per_instance</name>
        <param>
          <type>const attribute &amp;</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="166" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a73c79a7e7e625782f6e37ec696a257d1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacecore_1_1gfx_1a217cb4e725d207cca042f2b79b1142b5" kindref="member">core::gfx::shader_stage</ref></type>
        <definition>core::gfx::shader_stage core::meta::shader::stage</definition>
        <argsstring>() const noexcept</argsstring>
        <name>stage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the shader stage of this SPIR-V module (i.e. vertex, fragment, compute, etc..) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="170" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1aaf78de802903d48e0f112d7b2588d1cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void core::meta::shader::stage</definition>
        <argsstring>(core::gfx::shader_stage value) noexcept</argsstring>
        <name>stage</name>
        <param>
          <type><ref refid="namespacecore_1_1gfx_1a217cb4e725d207cca042f2b79b1142b5" kindref="member">core::gfx::shader_stage</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>sets the stage of this SPIR-V module to the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>it is assumed this stage flag is the actual stage flag, otherwise binding the shader will fail during creation. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>the stage to expect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="175" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1ac5c20020d7940240df48aae647d75579" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>psl::array_view&lt; attribute &gt;</type>
        <definition>psl::array_view&lt;attribute&gt; core::meta::shader::inputs</definition>
        <argsstring>() noexcept</argsstring>
        <name>inputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="177" column="17" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a5cc5b98c554c1d2cf37bce85837e6c80" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void core::meta::shader::inputs</definition>
        <argsstring>(psl::array&lt; attribute &gt; value) noexcept</argsstring>
        <name>inputs</name>
        <param>
          <type>psl::array&lt; attribute &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="181" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a02185beb052bdeb62a16d90a375dda27" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>psl::array_view&lt; attribute &gt;</type>
        <definition>psl::array_view&lt;attribute&gt; core::meta::shader::outputs</definition>
        <argsstring>() noexcept</argsstring>
        <name>outputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="188" column="17" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="188" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a27bf74d0004eb8cdcc6f7fe0bd8242b9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void core::meta::shader::outputs</definition>
        <argsstring>(psl::array&lt; attribute &gt; value) noexcept</argsstring>
        <name>outputs</name>
        <param>
          <type>psl::array&lt; attribute &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="193" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a1d893e8313127547e4038320abbe7b82" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>psl::array_view&lt; descriptor &gt;</type>
        <definition>psl::array_view&lt;descriptor&gt; core::meta::shader::descriptors</definition>
        <argsstring>() const noexcept</argsstring>
        <name>descriptors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="200" column="17" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a226355dff88bab2f903145c73fc9de23" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void core::meta::shader::descriptors</definition>
        <argsstring>(psl::array&lt; descriptor &gt; value) noexcept</argsstring>
        <name>descriptors</name>
        <param>
          <type>psl::array&lt; descriptor &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="201" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="201" bodyend="201"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1a1fd07e984605a8f295f3cbf18fbc3fb5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void core::meta::shader::serialize</definition>
        <argsstring>(S &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>S &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>method that will be invoked by the serialization system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the serializer/deserializer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>instance of a serializer that you can read from, or write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="208" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="208" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1shader_1affdc4728024114c84271c4cffcccee3b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const uint64_t</type>
        <definition>virtual const uint64_t core::meta::shader::polymorphic_id</definition>
        <argsstring>() override</argsstring>
        <name>polymorphic_id</name>
        <reimplements refid="classpsl_1_1meta_1_1file_1a2938e3799ca254316fcf0b2220911d85">polymorphic_id</reimplements>
        <briefdescription>
<para>returns the polymorphic ID at runtime, to resolve what type this is. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="248" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="248" bodyend="248"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>contains extensions for meta data when loading shader files. </para>
    </briefdescription>
    <detaileddescription>
<para>shaders need various metadata that can describe the binding points and types of resources a SPIR-V might be expecting, as well as the pipeline stage it is assigned to. This extension to <ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> contains that type of data. <xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>add a way to deal with push_constants </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>core::meta::shader</label>
        <link refid="classcore_1_1meta_1_1shader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>psl::meta::file</label>
        <link refid="classpsl_1_1meta_1_1file"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>core::meta::shader</label>
        <link refid="classcore_1_1meta_1_1shader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>psl::meta::file</label>
        <link refid="classpsl_1_1meta_1_1file"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" line="18" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/shader.hpp" bodystart="17" bodyend="251"/>
    <listofallmembers>
      <member refid="classcore_1_1meta_1_1shader_1a1d893e8313127547e4038320abbe7b82" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>descriptors</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a226355dff88bab2f903145c73fc9de23" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>descriptors</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a9dd6ad47b1a46c01c0195e1f7feaea66" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1aa8ba3e3715bfb8ffb1956414093cecff" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1add07f982eb38df2274a1146be5c057d0" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1ab2bcf7b6e0c00bf8441de0d6bccde949" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a1ba2901274565fa94ef76b19465cc4c2" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1abea97c4747d4e435033ec7b73270c103" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>ID</name></member>
      <member refid="classcore_1_1meta_1_1shader_1ac5c20020d7940240df48aae647d75579" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>inputs</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a5cc5b98c554c1d2cf37bce85837e6c80" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>inputs</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a0be699a82cec4a9ca61e32f694f9ef73" prot="private" virt="non-virtual"><scope>core::meta::shader</scope><name>m_Attributes</name></member>
      <member refid="classcore_1_1meta_1_1shader_1ad5116acd9d2b43020a1d087b36fdd083" prot="private" virt="non-virtual"><scope>core::meta::shader</scope><name>m_Descriptors</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a6fd7532def6a796ca3308c479f25d212" prot="private" virt="non-virtual"><scope>core::meta::shader</scope><name>m_InputAttributesSize</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a680a620b8b5cab3863cf39764b535ad2" prot="private" virt="non-virtual"><scope>core::meta::shader</scope><name>m_Stage</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a80e158a6feeaef638312d8298d47761d" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>name</name></member>
      <member refid="classpsl_1_1meta_1_1file_1aa9ee8e8b9e867bbaf3dbcdfad83530a0" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>operator=</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a5ed845814586f964ccc5f3c268c0861e" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>operator=</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a02185beb052bdeb62a16d90a375dda27" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>outputs</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a27bf74d0004eb8cdcc6f7fe0bd8242b9" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>outputs</name></member>
      <member refid="classcore_1_1meta_1_1shader_1aedfc9e338b714754ab4a1f31c22e6cdc" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>per_instance</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a229887ec0e289bebe4f10cd8862d3ea8" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>per_instance</name></member>
      <member refid="classcore_1_1meta_1_1shader_1affdc4728024114c84271c4cffcccee3b" prot="private" virt="virtual"><scope>core::meta::shader</scope><name>polymorphic_id</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a9d38e46b065837910ab477be4a2d62d4" prot="private" virt="non-virtual"><scope>core::meta::shader</scope><name>polymorphic_identity</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a0c09e95c706d2b219692089758981fbe" prot="private" virt="non-virtual"><scope>core::meta::shader</scope><name>polymorphic_name</name></member>
      <member refid="classcore_1_1meta_1_1shader_1ae6e4002148765f114da9fe1b5c64547d" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>psl::serialization::accessor</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a1fd07e984605a8f295f3cbf18fbc3fb5" prot="private" virt="non-virtual"><scope>core::meta::shader</scope><name>serialize</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a2a9563e563fc973911d63ca240a3f100" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>shader</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a9791d26da5a99038126ca238630fe14c" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>shader</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a73c79a7e7e625782f6e37ec696a257d1" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>stage</name></member>
      <member refid="classcore_1_1meta_1_1shader_1aaf78de802903d48e0f112d7b2588d1cf" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>stage</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a7d22ecc9d15e6203af4a77bc86cebcdb" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>tags</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a5dd34d73b5a8df3de9f3076cbb727047" prot="public" virt="virtual"><scope>core::meta::shader</scope><name>~file</name></member>
      <member refid="classcore_1_1meta_1_1shader_1a20876dee06e6e2890408e2a8d6a0dce7" prot="public" virt="non-virtual"><scope>core::meta::shader</scope><name>~shader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
