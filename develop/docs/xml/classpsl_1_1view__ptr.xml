<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpsl_1_1view__ptr" kind="class" language="C++" prot="public">
    <compoundname>psl::view_ptr</compoundname>
    <includes refid="view__ptr_8hpp" local="no">view_ptr.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classpsl_1_1view__ptr_1a1afc43ccc407d423fcab2f474ac83de9" prot="public" static="no">
        <type>T</type>
        <definition>using psl::view_ptr&lt; T &gt;::element_type =  T</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="17" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1view__ptr_1a6a59149f2ff99ea29a0fc2c51b873f67" prot="public" static="no">
        <type>T *</type>
        <definition>using psl::view_ptr&lt; T &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="18" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1view__ptr_1a6f81706b94281c5de61e625c99efc8fd" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using psl::view_ptr&lt; T &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="19" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpsl_1_1view__ptr_1aa2eb9c94ce4c3975c7144bee11440c31" prot="private" static="no" mutable="no">
        <type>pointer</type>
        <definition>pointer psl::view_ptr&lt; T &gt;::m_Value</definition>
        <argsstring></argsstring>
        <name>m_Value</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="78" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a17b1886e1078ac3eda32742b673d9867" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr psl::view_ptr&lt; T &gt;::view_ptr</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>view_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="21" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a62de55a767d0c129faa8d89c885091aa" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr psl::view_ptr&lt; T &gt;::view_ptr</definition>
        <argsstring>(pointer value) noexcept</argsstring>
        <name>view_ptr</name>
        <param>
          <type>pointer</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="22" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a25b18f21b66874fb4037496116d3555c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr psl::view_ptr&lt; T &gt;::view_ptr</definition>
        <argsstring>(const psl::unique_ptr&lt; T2 &gt; &amp;value) noexcept</argsstring>
        <name>view_ptr</name>
        <param>
          <type>const psl::unique_ptr&lt; T2 &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="25" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="25" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a47444370cfe5802993d1eb94a031cb29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>psl::view_ptr&lt; T &gt;::~view_ptr</definition>
        <argsstring>()=default</argsstring>
        <name>~view_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a4d935507471f5df68b7b28adcc0ebf1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>psl::view_ptr&lt; T &gt;::view_ptr</definition>
        <argsstring>(const view_ptr &amp;other)</argsstring>
        <name>view_ptr</name>
        <param>
          <type>const <ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="29" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1afd78dcad49e826d8bf11653e8f4ec418" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::view_ptr&lt; T &gt;::view_ptr</definition>
        <argsstring>(view_ptr &amp;&amp;other) noexcept</argsstring>
        <name>view_ptr</name>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="30" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a452c7e4b04f571d602ba97b1c282f565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref> &amp;</type>
        <definition>view_ptr&amp; psl::view_ptr&lt; T &gt;::operator=</definition>
        <argsstring>(const view_ptr &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="31" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a9517c30bef609726824d6dbdf207f6af" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref> &amp;</type>
        <definition>view_ptr&amp; psl::view_ptr&lt; T &gt;::operator=</definition>
        <argsstring>(view_ptr &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="39" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a3dd30c18b1a7c2a139f69737c6e186db" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr reference</type>
        <definition>constexpr reference psl::view_ptr&lt; T &gt;::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="49" column="21" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1add1545cf38999cf18325c0e12c995db3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr reference</type>
        <definition>constexpr reference psl::view_ptr&lt; T &gt;::operator*</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="51" column="21" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a96631738566095d8a4cfc14021e374ca" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr pointer</type>
        <definition>constexpr pointer psl::view_ptr&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="57" column="19" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a3ff09999fb7a578047a2bb61258b7e84" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr psl::view_ptr&lt; T &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="59" column="20" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a2739678849f96e56fd1beb0fe7836370" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr psl::view_ptr&lt; T &gt;::operator pointer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="60" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1aa4d4e758d6421f17f6d7116c9530cb07" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr pointer</type>
        <definition>constexpr pointer psl::view_ptr&lt; T &gt;::release</definition>
        <argsstring>() noexcept</argsstring>
        <name>release</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="62" column="19" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a9226603fd4cea65c9b31377106c78b77" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void psl::view_ptr&lt; T &gt;::reset</definition>
        <argsstring>(pointer p=nullptr) noexcept</argsstring>
        <name>reset</name>
        <param>
          <type>pointer</type>
          <declname>p</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="69" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1view__ptr_1a4bcf63527873c1bfb615b480895b3177" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void psl::view_ptr&lt; T &gt;::swap</definition>
        <argsstring>(view_ptr &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="71" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="71" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a non-owning &apos;smart&apos; pointer type </para>
    </briefdescription>
    <detaileddescription>
<para>A wrapper object that can contain a pointer to either null, or any type. It will not do any operations on the pointer that would imply ownership (such as cleaning up). </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="15" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="14" bodyend="79"/>
    <listofallmembers>
      <member refid="classpsl_1_1view__ptr_1a1afc43ccc407d423fcab2f474ac83de9" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>element_type</name></member>
      <member refid="classpsl_1_1view__ptr_1a3dd30c18b1a7c2a139f69737c6e186db" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>get</name></member>
      <member refid="classpsl_1_1view__ptr_1aa2eb9c94ce4c3975c7144bee11440c31" prot="private" virt="non-virtual"><scope>psl::view_ptr</scope><name>m_Value</name></member>
      <member refid="classpsl_1_1view__ptr_1a3ff09999fb7a578047a2bb61258b7e84" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>operator bool</name></member>
      <member refid="classpsl_1_1view__ptr_1a2739678849f96e56fd1beb0fe7836370" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>operator pointer</name></member>
      <member refid="classpsl_1_1view__ptr_1add1545cf38999cf18325c0e12c995db3" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>operator*</name></member>
      <member refid="classpsl_1_1view__ptr_1a96631738566095d8a4cfc14021e374ca" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>operator-&gt;</name></member>
      <member refid="classpsl_1_1view__ptr_1a452c7e4b04f571d602ba97b1c282f565" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>operator=</name></member>
      <member refid="classpsl_1_1view__ptr_1a9517c30bef609726824d6dbdf207f6af" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>operator=</name></member>
      <member refid="classpsl_1_1view__ptr_1a6a59149f2ff99ea29a0fc2c51b873f67" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>pointer</name></member>
      <member refid="classpsl_1_1view__ptr_1a6f81706b94281c5de61e625c99efc8fd" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>reference</name></member>
      <member refid="classpsl_1_1view__ptr_1aa4d4e758d6421f17f6d7116c9530cb07" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>release</name></member>
      <member refid="classpsl_1_1view__ptr_1a9226603fd4cea65c9b31377106c78b77" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>reset</name></member>
      <member refid="classpsl_1_1view__ptr_1a4bcf63527873c1bfb615b480895b3177" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>swap</name></member>
      <member refid="classpsl_1_1view__ptr_1a17b1886e1078ac3eda32742b673d9867" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>view_ptr</name></member>
      <member refid="classpsl_1_1view__ptr_1a62de55a767d0c129faa8d89c885091aa" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>view_ptr</name></member>
      <member refid="classpsl_1_1view__ptr_1a25b18f21b66874fb4037496116d3555c" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>view_ptr</name></member>
      <member refid="classpsl_1_1view__ptr_1a4d935507471f5df68b7b28adcc0ebf1b" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>view_ptr</name></member>
      <member refid="classpsl_1_1view__ptr_1afd78dcad49e826d8bf11653e8f4ec418" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>view_ptr</name></member>
      <member refid="classpsl_1_1view__ptr_1a47444370cfe5802993d1eb94a031cb29" prot="public" virt="non-virtual"><scope>psl::view_ptr</scope><name>~view_ptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
