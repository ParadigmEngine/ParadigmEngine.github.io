<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceutility_1_1templates_1_1operators_1_1details" kind="namespace" language="C++">
    <compoundname>utility::templates::operators::details</compoundname>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__left__shift_3_01_t_00_01_bc42704a0722920cab751b299cd79a78" prot="public">utility::templates::operators::details::has_assignment_left_shift&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator&lt;&lt;=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__divide" prot="public">utility::templates::operators::details::has_arithmetic_divide</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__divide_3_01_t_00_01_u_00_980d0a19c9d5319fdda442938c8e434e" prot="public">utility::templates::operators::details::has_arithmetic_divide&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator/(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__minus" prot="public">utility::templates::operators::details::has_arithmetic_minus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__minus_3_01_t_00_01_u_00_0a855cb59655bc97925b4d08e1a291724" prot="public">utility::templates::operators::details::has_arithmetic_minus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator-(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__modulus" prot="public">utility::templates::operators::details::has_arithmetic_modulus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__modulus_3_01_t_00_01_u_005f9a4642ba45433abeb773e60a49be78" prot="public">utility::templates::operators::details::has_arithmetic_modulus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator%(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__multiply" prot="public">utility::templates::operators::details::has_arithmetic_multiply</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__multiply_3_01_t_00_01_u_0f8e730205acc1acecfa79135d6e036a5" prot="public">utility::templates::operators::details::has_arithmetic_multiply&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator*(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__plus" prot="public">utility::templates::operators::details::has_arithmetic_plus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__arithmetic__plus_3_01_t_00_01_u_00_016e64af6e08653477aa695113caf10194" prot="public">utility::templates::operators::details::has_arithmetic_plus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator+(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__and" prot="public">utility::templates::operators::details::has_assignment_and</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__and_3_01_t_00_01_u_00_01s09f5b95a09b9e968c998306542736af6" prot="public">utility::templates::operators::details::has_assignment_and&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator&amp;=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__divide" prot="public">utility::templates::operators::details::has_assignment_divide</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__divide_3_01_t_00_01_u_00_8461f5a4294bae06394b9d502d3a8e38" prot="public">utility::templates::operators::details::has_assignment_divide&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator/=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__left__shift" prot="public">utility::templates::operators::details::has_assignment_left_shift</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__minus" prot="public">utility::templates::operators::details::has_assignment_minus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__minus_3_01_t_00_01_u_00_009af612045799834b3cfdefdda074a6f" prot="public">utility::templates::operators::details::has_assignment_minus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator-=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__modulus" prot="public">utility::templates::operators::details::has_assignment_modulus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__modulus_3_01_t_00_01_u_006f74c3eb77922a9b1e269c751c7e0236" prot="public">utility::templates::operators::details::has_assignment_modulus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator%=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__multiply" prot="public">utility::templates::operators::details::has_assignment_multiply</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__multiply_3_01_t_00_01_u_028f50dc3a43f623a4813cdaf243e1d8b" prot="public">utility::templates::operators::details::has_assignment_multiply&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator*=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__or" prot="public">utility::templates::operators::details::has_assignment_or</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__or_3_01_t_00_01_u_00_01st78dcbb489edd917c06325455542ef993" prot="public">utility::templates::operators::details::has_assignment_or&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator|=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__plus" prot="public">utility::templates::operators::details::has_assignment_plus</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__plus_3_01_t_00_01_u_00_01019ffc1c4b47eee8b122aeb8b5feda7f" prot="public">utility::templates::operators::details::has_assignment_plus&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator+=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__right__shift" prot="public">utility::templates::operators::details::has_assignment_right_shift</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__xor" prot="public">utility::templates::operators::details::has_assignment_xor</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__assignment__xor_3_01_t_00_01_u_00_01sd66eeda738a2ef8849e615c03084dc2d" prot="public">utility::templates::operators::details::has_assignment_xor&lt; T, U, std::void_t&lt; decltype(std::declval&lt; T &gt;().operator^=(std::declval&lt; U &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__bool__operator" prot="public">utility::templates::operators::details::has_bool_operator</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__post__decrement" prot="public">utility::templates::operators::details::has_post_decrement</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__post__increment" prot="public">utility::templates::operators::details::has_post_increment</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__pre__decrement" prot="public">utility::templates::operators::details::has_pre_decrement</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__pre__increment" prot="public">utility::templates::operators::details::has_pre_increment</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__subscript__operator" prot="public">utility::templates::operators::details::has_subscript_operator</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1has__subscript__operator_3_01_t_00_01_inde0f64fa23dc6c7695da3a8fb9ff7c366e" prot="public">utility::templates::operators::details::has_subscript_operator&lt; T, Index, std::void_t&lt; decltype(std::declval&lt; T &gt;()[std::declval&lt; Index &gt;()])&gt; &gt;</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1left__shift" prot="public">utility::templates::operators::details::left_shift</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1op__valid__impl" prot="public">utility::templates::operators::details::op_valid_impl</innerclass>
    <innerclass refid="structutility_1_1templates_1_1operators_1_1details_1_1right__shift" prot="public">utility::templates::operators::details::right_shift</innerclass>
    <innernamespace refid="namespaceutility_1_1templates_1_1operators_1_1details_1_1has__assignment__right__shift_0a_07std">utility::templates::operators::details::has_assignment_right_shift=(std</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="template__utils_8hpp_1aa735b9391e97f69e19e6e06edb3cb7b8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
        </templateparamlist>
        <type>typename op_valid_impl&lt; X, Y, Op &gt;::type</type>
        <definition>using utility::templates::operators::details::op_valid = typedef typename op_valid_impl&lt;X, Y, Op&gt;::type</definition>
        <argsstring></argsstring>
        <name>op_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/template_utils.hpp" line="460" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/template_utils.hpp" bodystart="460" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/template_utils.hpp" line="264" column="1"/>
  </compounddef>
</doxygen>
