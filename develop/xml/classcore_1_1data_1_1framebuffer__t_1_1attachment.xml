<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1data_1_1framebuffer__t_1_1attachment" kind="class" language="C++" prot="public" final="yes">
    <compoundname>core::data::framebuffer_t::attachment</compoundname>
    <includes refid="data_2framebuffer_8hpp" local="no">framebuffer.hpp</includes>
    <innerclass refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1_1description" prot="public">core::data::framebuffer_t::attachment::description</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1ae6e4002148765f114da9fe1b5c64547d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class psl::serialization::accessor</definition>
        <argsstring></argsstring>
        <name>psl::serialization::accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="27" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a36aedf165c70437b2ad687eafea0b331" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class framebuffer_t</definition>
        <argsstring></argsstring>
        <name>framebuffer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="28" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a55c329c1f049bf8d9d76caadd63d5f9c" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;TEXTURE UID&quot;, psl::UID &gt;</type>
        <definition>psl::serialization::property&lt;&quot;TEXTURE UID&quot;, psl::UID&gt; core::data::framebuffer_t::attachment::m_Texture</definition>
        <argsstring></argsstring>
        <name>m_Texture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="114" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a2b33ca2f4b93b9ccb194f7101ac58575" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;CLEAR VALUE&quot;, core::gfx::clear_value &gt;</type>
        <definition>psl::serialization::property&lt;&quot;CLEAR VALUE&quot;, core::gfx::clear_value&gt; core::data::framebuffer_t::attachment::m_ClearValue</definition>
        <argsstring></argsstring>
        <name>m_ClearValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="115" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a446ce2e767f43fce3a06823a59d5b95d" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;DESCRIPTION&quot;, description &gt;</type>
        <definition>psl::serialization::property&lt;&quot;DESCRIPTION&quot;, description&gt; core::data::framebuffer_t::attachment::m_Description</definition>
        <argsstring></argsstring>
        <name>m_Description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="116" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1adb3dc72c4525db78f8f6176a05bb0baf" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;SHARED&quot;, bool &gt;</type>
        <definition>psl::serialization::property&lt;&quot;SHARED&quot;, bool&gt; core::data::framebuffer_t::attachment::m_Shared</definition>
        <argsstring></argsstring>
        <name>m_Shared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="117" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1aadaeb9dc3fce58f64fa87a6d7b9696f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::data::framebuffer_t::attachment::attachment</definition>
        <argsstring>()=default</argsstring>
        <name>attachment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a8317857a9d086185f8f88d462ca87778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>framebuffer_t::attachment::attachment</definition>
        <argsstring>(const psl::UID &amp;texture, const core::gfx::clear_value &amp;clear_col, core::gfx::attachment descr, bool shared=false)</argsstring>
        <name>attachment</name>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const core::gfx::clear_value &amp;</type>
          <declname>clear_col</declname>
        </param>
        <param>
          <type>core::gfx::attachment</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>constructs an attachment based on the given texture and values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>that the texture should be valid (not pointing to a non-texture), otherwise you might run into issues further down. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">texture</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> pointing to a valid (known or constructed), <ref refid="classcore_1_1ivk_1_1texture__t" kindref="compound">core::ivk::texture_t</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clear_col</parametername>
</parameternamelist>
<parameterdescription>
<para>the clear value to assign to this render texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descr</parametername>
</parameternamelist>
<parameterdescription>
<para>the attachment description that will be used to construct the <ref refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1_1description" kindref="compound">core::data::framebuffer_t::attachment::description</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shared</parametername>
</parameternamelist>
<parameterdescription>
<para>value indicating if this render attachment is shared within this framebuffer (see <ref refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1ad74ad94a80e87c312248195b3be0a391" kindref="member">core::data::framebuffer_t::attachment::shared()</ref> for more info). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="76" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="89" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1ac4903b64040a439c1f346863e7c429f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
        <definition>const UID &amp; framebuffer_t::attachment::texture</definition>
        <argsstring>() const</argsstring>
        <name>texture</name>
        <briefdescription>
<para>returns the <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> assigned to this render attachment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> assigned to this render attachment. </para>
</simplesect>
<simplesect kind="note"><para>the texture resource assigned to the UID is not guaranteed to be loaded (or even constructed), as it can have just been parsed from disk. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="85" column="16" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a22feced3c9abd7d14b0821e3244a881b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const core::gfx::clear_value &amp;</type>
        <definition>const core::gfx::clear_value &amp; framebuffer_t::attachment::clear_value</definition>
        <argsstring>() const</argsstring>
        <name>clear_value</name>
        <briefdescription>
<para>returns the clear value assigned to this attachment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the clear value assigned to this attachment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="89" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1abbf995507b976dc874d05f5b51c3d744" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>framebuffer_t::attachment::operator core::gfx::attachment</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator core::gfx::attachment</name>
        <briefdescription>
<para>returns a core::gfx::attachment based on the internal settings. This is a passthrough method to the <ref refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1_1description" kindref="compound">core::data::framebuffer_t::attachment::description</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a core::gfx::attachment based on the internal settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="94" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1ad74ad94a80e87c312248195b3be0a391" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool framebuffer_t::attachment::shared</definition>
        <argsstring>() const</argsstring>
        <name>shared</name>
        <briefdescription>
<para>signifies if this specific attachment duplicated when the framebuffer&apos;s image count is larger than 1. </para>
        </briefdescription>
        <detaileddescription>
<para>Sometimes you don&apos;t need a render attachment to have a unique instance per framebuffer entry (for example depth testing/texture in a double buffer scenario). in this case you can set this render attachment to be &quot;shared&quot;, a flag that will tell the implementation that rather than creating a new instance for when the framebuffer count is larger than 1, it should instead reuse the current one. <simplesect kind="see"><para><ref refid="classcore_1_1ivk_1_1framebuffer__t" kindref="compound">core::ivk::framebuffer_t</ref> for the application of this flag. </para>
</simplesect>
<simplesect kind="return"><para>true if this attachment is duplicated (true) or not (false). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="105" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="99" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a145d5eec393502b78828c6ff9c987559" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void core::data::framebuffer_t::attachment::serialize</definition>
        <argsstring>(S &amp;serializer)</argsstring>
        <name>serialize</name>
        <param>
          <type>S &amp;</type>
          <declname>serializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="109" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="109" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>describes a single rendertarget in a framebuffer. </para>
    </briefdescription>
    <detaileddescription>
<para>all data contained within this object is not guaranteed to be loaded, this includes the <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> of the core::gfx::texture_t. You should take caution when calling methods that manipulate the contained resources for this reason. </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="26" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="25" bodyend="118"/>
    <listofallmembers>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1aadaeb9dc3fce58f64fa87a6d7b9696f1" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>attachment</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a8317857a9d086185f8f88d462ca87778" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>attachment</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a22feced3c9abd7d14b0821e3244a881b" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>clear_value</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a36aedf165c70437b2ad687eafea0b331" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>framebuffer_t</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a2b33ca2f4b93b9ccb194f7101ac58575" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>m_ClearValue</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a446ce2e767f43fce3a06823a59d5b95d" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>m_Description</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1adb3dc72c4525db78f8f6176a05bb0baf" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>m_Shared</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a55c329c1f049bf8d9d76caadd63d5f9c" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>m_Texture</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1abbf995507b976dc874d05f5b51c3d744" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>operator core::gfx::attachment</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1ae6e4002148765f114da9fe1b5c64547d" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>psl::serialization::accessor</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1a145d5eec393502b78828c6ff9c987559" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>serialize</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1ad74ad94a80e87c312248195b3be0a391" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>shared</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1_1attachment_1ac4903b64040a439c1f346863e7c429f6" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t::attachment</scope><name>texture</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
