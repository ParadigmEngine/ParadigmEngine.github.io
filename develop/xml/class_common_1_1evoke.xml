<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_common_1_1evoke" kind="class" language="C++" prot="public" final="yes">
    <compoundname>Common::evoke</compoundname>
    <basecompoundref prot="public" virt="virtual">Common::evocableR&lt; R &gt;</basecompoundref>
    <basecompoundref prot="public" virt="virtual">Common::evocableT&lt; T... &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_common_1_1evoke_1a6ce5a75038967861ba551a0506e5938f" prot="public" static="no">
        <type>typename details::transform_moveables&lt; T... &gt;::tuple_type</type>
        <definition>using Common::evoke&lt; R, T &gt;::tuple_type =  typename details::transform_moveables&lt;T...&gt;::tuple_type</definition>
        <argsstring></argsstring>
        <name>tuple_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="170" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_common_1_1evoke_1a2a244eea9de69064aeeca54081b3eb35" prot="public" static="no">
        <type>typename std::tuple&lt; T... &gt;</type>
        <definition>using Common::evoke&lt; R, T &gt;::parameter_types =  typename std::tuple&lt;T...&gt;</definition>
        <argsstring></argsstring>
        <name>parameter_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="171" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_common_1_1evoke_1a093f599b64feb6b24f42083a90e48cd9" prot="public" static="no">
        <type>R</type>
        <definition>using Common::evoke&lt; R, T &gt;::return_type =  R</definition>
        <argsstring></argsstring>
        <name>return_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="172" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_common_1_1evoke_1a404fb42565baf7c7c26928678c8d3b5d" prot="private" static="no" mutable="no">
        <type>std::function&lt; R(T...)&gt;</type>
        <definition>std::function&lt;R(T...)&gt; Common::evoke&lt; R, T &gt;::bind_</definition>
        <argsstring></argsstring>
        <name>bind_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="224" column="15" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_common_1_1evoke_1a15952c560f4866e5f15673202c5a79c7" prot="private" static="no" mutable="no">
        <type>tuple_type</type>
        <definition>tuple_type Common::evoke&lt; R, T &gt;::params</definition>
        <argsstring></argsstring>
        <name>params</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="225" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_common_1_1evoke_1ae6793cf46bba37a1acf20f30eb4a974a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; R, T &gt;::evoke</definition>
        <argsstring>(std::function&lt; R(T...)&gt; &amp;&amp;f, T... args)</argsstring>
        <name>evoke</name>
        <param>
          <type>std::function&lt; R(T...)&gt; &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="174" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1aa89ec661b99c5680c95d7753eb636e78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; R, T &gt;::~evoke</definition>
        <argsstring>()</argsstring>
        <name>~evoke</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="178" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1a799a548bb34e57566f18ca730eadd766" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R Common::evoke&lt; R, T &gt;::operator()</definition>
        <argsstring>() override</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="180" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1acaa5aa0f0c92877685e4f1324596f9fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; R, T &gt;::evoke</definition>
        <argsstring>(const evoke &amp;e)</argsstring>
        <name>evoke</name>
        <param>
          <type>const evoke &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="182" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1a60fb520f20acb3600778c8046d9fa2f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; R, T &gt;::evoke</definition>
        <argsstring>(evoke &amp;&amp;e)</argsstring>
        <name>evoke</name>
        <param>
          <type>evoke &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="183" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1a6d405edbd294aecb5eb31d7d8ae35947" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>evoke &amp;</type>
        <definition>evoke&amp; Common::evoke&lt; R, T &gt;::operator=</definition>
        <argsstring>(const evoke &amp;e) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>const evoke &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="184" column="7" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="184" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1ad7088461d6e01a75aa53249c22ae1cb7" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>evoke &amp;</type>
        <definition>evoke&amp; Common::evoke&lt; R, T &gt;::operator=</definition>
        <argsstring>(evoke &amp;&amp;e) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>evoke &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="193" column="7" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="193" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1a98399af1d5e550ccd2abeed040b9d1c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::array&lt; std::pair&lt; std::uintptr_t, size_t &gt;, sizeof...(T)&gt;</type>
        <definition>std::array&lt;std::pair&lt;std::uintptr_t, size_t&gt;, sizeof...(T)&gt; Common::evoke&lt; R, T &gt;::_parameter_locations</definition>
        <argsstring>() const</argsstring>
        <name>_parameter_locations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="203" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="203" bodyend="206"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_common_1_1evoke_1a24c317adff6a01ffb1daea8700d65888" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>R Common::evoke&lt; R, T &gt;::execute_fn</definition>
        <argsstring>(std::index_sequence&lt; S... &gt;)</argsstring>
        <name>execute_fn</name>
        <param>
          <type>std::index_sequence&lt; S... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="210" column="3" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_1a881c3ad91fe23cdfb994ff7ce2fa2009" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; std::pair&lt; std::uintptr_t, size_t &gt;, sizeof...(T)&gt;</type>
        <definition>std::array&lt;std::pair&lt;std::uintptr_t, size_t&gt;, sizeof...(T)&gt; Common::evoke&lt; R, T &gt;::parameter_loc</definition>
        <argsstring>(std::index_sequence&lt; S... &gt;) const</argsstring>
        <name>parameter_loc</name>
        <param>
          <type>std::index_sequence&lt; S... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="216" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="216" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="168" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="167" bodyend="226"/>
    <listofallmembers>
      <member refid="class_common_1_1evoke_1a98399af1d5e550ccd2abeed040b9d1c6" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>_parameter_locations</name></member>
      <member refid="class_common_1_1evoke_1a404fb42565baf7c7c26928678c8d3b5d" prot="private" virt="non-virtual"><scope>Common::evoke</scope><name>bind_</name></member>
      <member refid="class_common_1_1evocable_1ada069216a51826f97bb5ef92507c7dad" prot="protected" virt="non-virtual"><scope>Common::evoke</scope><name>evocable</name></member>
      <member refid="class_common_1_1evocable_1a154ed6811474b7c3982bc882da48e187" prot="protected" virt="non-virtual"><scope>Common::evoke</scope><name>evocable</name></member>
      <member refid="class_common_1_1evocable_1a41b2524e0a8a3288057c753b9923949b" prot="protected" virt="non-virtual"><scope>Common::evoke</scope><name>evocable</name></member>
      <member refid="class_common_1_1evoke_1ae6793cf46bba37a1acf20f30eb4a974a" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>evoke</name></member>
      <member refid="class_common_1_1evoke_1acaa5aa0f0c92877685e4f1324596f9fe" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>evoke</name></member>
      <member refid="class_common_1_1evoke_1a60fb520f20acb3600778c8046d9fa2f5" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>evoke</name></member>
      <member refid="class_common_1_1evoke_1a24c317adff6a01ffb1daea8700d65888" prot="private" virt="non-virtual"><scope>Common::evoke</scope><name>execute_fn</name></member>
      <member refid="class_common_1_1evoke_1a799a548bb34e57566f18ca730eadd766" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>operator()</name></member>
      <member refid="class_common_1_1evoke_1a6d405edbd294aecb5eb31d7d8ae35947" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>operator=</name></member>
      <member refid="class_common_1_1evoke_1ad7088461d6e01a75aa53249c22ae1cb7" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>operator=</name></member>
      <member refid="class_common_1_1evocable_1a0a4a17ca45151559c62a5f3602ee37c5" prot="protected" virt="non-virtual" ambiguityscope="Common::evocableR::"><scope>Common::evoke</scope><name>operator=</name></member>
      <member refid="class_common_1_1evocable_1a0dc2e9351a755330c9db9b0499571a1e" prot="protected" virt="non-virtual" ambiguityscope="Common::evocableR::"><scope>Common::evoke</scope><name>operator=</name></member>
      <member refid="class_common_1_1evoke_1a881c3ad91fe23cdfb994ff7ce2fa2009" prot="private" virt="non-virtual"><scope>Common::evoke</scope><name>parameter_loc</name></member>
      <member refid="class_common_1_1evoke_1a2a244eea9de69064aeeca54081b3eb35" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>parameter_types</name></member>
      <member refid="class_common_1_1evoke_1a15952c560f4866e5f15673202c5a79c7" prot="private" virt="non-virtual"><scope>Common::evoke</scope><name>params</name></member>
      <member refid="class_common_1_1evoke_1a093f599b64feb6b24f42083a90e48cd9" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>return_type</name></member>
      <member refid="class_common_1_1evoke_1a6ce5a75038967861ba551a0506e5938f" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>tuple_type</name></member>
      <member refid="class_common_1_1evocable_1a32c4a260e7d10d11feea4224df331e8d" prot="public" virt="virtual"><scope>Common::evoke</scope><name>~evocable</name></member>
      <member refid="class_common_1_1evocable_r_1a14c3e0a56973c20b373f0e5597d91ae8" prot="public" virt="virtual"><scope>Common::evoke</scope><name>~evocableR</name></member>
      <member refid="class_common_1_1evocable_t_1af1216a92d78f985d5773e44e24e52f54" prot="public" virt="virtual"><scope>Common::evoke</scope><name>~evocableT</name></member>
      <member refid="class_common_1_1evoke_1aa89ec661b99c5680c95d7753eb636e78" prot="public" virt="non-virtual"><scope>Common::evoke</scope><name>~evoke</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
