<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacepsl_1_1concepts" kind="namespace" language="C++">
    <compoundname>psl::concepts</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="concepts_8hpp_1ac900d961740dde30f6788e73ed2b02d7" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Fn</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsInvocableNothrow</definition>
        <argsstring></argsstring>
        <name>IsInvocableNothrow</name>
        <initializer>= std::is_nothrow_invocable&lt;Fn, Args...&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="15" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a7baf527d98cb77f41feb4b48d56f8a49" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Fn</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsInvocable</definition>
        <argsstring></argsstring>
        <name>IsInvocable</name>
        <initializer>= std::is_invocable_v&lt;Fn, Args...&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="18" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a60ee0305e3ff45f9c7685454d28a8be5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsAssignable</definition>
        <argsstring></argsstring>
        <name>IsAssignable</name>
        <initializer>= std::is_assignable_v&lt;T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="22" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a4ae01e0270146949bca15967930d6727" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsAssignableNothrow</name>
        <initializer>= std::is_nothrow_assignable_v&lt;T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="24" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a760d8cd64890a738331e5c7619550d22" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsAdditionAssignable</definition>
        <argsstring></argsstring>
        <name>IsAdditionAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs += rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="27" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ae9ddd478d9ca5d32f07070eaccb24d6f" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsAdditionAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsAdditionAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs += rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="32" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ab7d6e43470c127a74da1d3b01a6e1894" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsSubtractionAssignable</definition>
        <argsstring></argsstring>
        <name>IsSubtractionAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs -= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="41" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a59be23a0a104494f714b46b78014a4db" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsSubtractionAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsSubtractionAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs -= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="46" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a0438c81319adc9daf4dad795ff300135" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsMultiplicationAssignable</definition>
        <argsstring></argsstring>
        <name>IsMultiplicationAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs *= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="55" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a77688dce4b099dd2428b8b2e83f74198" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsMultiplicationAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsMultiplicationAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs *= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="60" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1acc4974f3dcaa986844c46fad8e16d975" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsDivisionAssignable</definition>
        <argsstring></argsstring>
        <name>IsDivisionAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs /= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="69" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a9358cf69276886030ea3dcf640ac90c8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsDivisionAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsDivisionAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs /= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="74" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a902f5cf97eb30bf43dfa882e28e261f2" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsModuloAssignable</definition>
        <argsstring></argsstring>
        <name>IsModuloAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs %= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="83" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a887c1b6dec6560e0d03ae0286960d38b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsModuloAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsModuloAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs %= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="88" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a5b8be847b3de03333fd93f30f5870c61" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsBitAndAssignable</definition>
        <argsstring></argsstring>
        <name>IsBitAndAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs &amp;= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="97" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aaa19efc073fd6196cdb381aa33582807" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsBitAndAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsBitAndAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs &amp;= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="102" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1af2f873b8c70c3f27709027cad47afb0c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsBitOrAssignable</definition>
        <argsstring></argsstring>
        <name>IsBitOrAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs |= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="111" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a2c39bc4e8941720a0249e2bce15e7a49" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsBitOrAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsBitOrAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs |= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="116" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a2e24ac3a7bec2743ce39234b76495d2d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsBitXorAssignable</definition>
        <argsstring></argsstring>
        <name>IsBitXorAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs ^= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="125" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a00f79781d0f5a15e83d7e27321332164" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsBitXorAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsBitXorAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs ^= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="130" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aa637910ddd6432327b87481dcfd30666" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsShiftLeftAssignable</definition>
        <argsstring></argsstring>
        <name>IsShiftLeftAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs &lt;&lt;= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="139" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a1c20f51ef5c1ecaf8b9f4b02e2dd0dec" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsShiftLeftAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsShiftLeftAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs &lt;&lt;= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="144" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a95a64e33cdcb051e3492d1175448aadb" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsShiftRightAssignable</definition>
        <argsstring></argsstring>
        <name>IsShiftRightAssignable</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs &gt;&gt;= rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="153" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a3baa70109d2283dd391738eeb123f9ea" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsShiftRightAssignableNothrow</definition>
        <argsstring></argsstring>
        <name>IsShiftRightAssignableNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs &gt;&gt;= rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="158" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a1b968df6db15c6e7f6479cff130d21d3" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsIncrementablePre</definition>
        <argsstring></argsstring>
        <name>IsIncrementablePre</name>
        <initializer>= requires(T val)
	{
		++val;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="169" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1af79873fb0a14a0391bdc0ecd2e88679c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsIncrementablePreNothrow</definition>
        <argsstring></argsstring>
        <name>IsIncrementablePreNothrow</name>
        <initializer>= requires(T val)
	{
		{
			++val
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="174" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a651d14094b5a8becd446b7287b47c588" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsIncrementablePost</definition>
        <argsstring></argsstring>
        <name>IsIncrementablePost</name>
        <initializer>= requires(T val)
	{
		val++;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="182" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ab24f9f7388ab3e2d4bf43669240636e8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsIncrementablePostNothrow</definition>
        <argsstring></argsstring>
        <name>IsIncrementablePostNothrow</name>
        <initializer>= requires(T val)
	{
		{
			val++
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="187" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a0a0325913aca19bed8c785bef2f3e66a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsDecrementablePre</definition>
        <argsstring></argsstring>
        <name>IsDecrementablePre</name>
        <initializer>= requires(T val)
	{
		--val;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="196" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ad854d690f1506d20423d1d1b8f0a1a8e" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsDecrementablePreNothrow</definition>
        <argsstring></argsstring>
        <name>IsDecrementablePreNothrow</name>
        <initializer>= requires(T val)
	{
		{
			--val
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="201" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ad77faa720992a3195e094278c31b3508" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsDecrementablePost</definition>
        <argsstring></argsstring>
        <name>IsDecrementablePost</name>
        <initializer>= requires(T val)
	{
		val--;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="209" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a5d28af9f0696ea0f3bc4a0f52455b727" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::IsDecrementablePostNothrow</definition>
        <argsstring></argsstring>
        <name>IsDecrementablePostNothrow</name>
        <initializer>= requires(T val)
	{
		{
			val--
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="214" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a688341c5609e6117f6967af70de489ee" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasUnaryAdd</definition>
        <argsstring></argsstring>
        <name>HasUnaryAdd</name>
        <initializer>= requires(T val)
	{
		+val;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="225" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a92aa4230270fcaf179c20bf7ed9a85e7" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasUnaryAddNothrow</definition>
        <argsstring></argsstring>
        <name>HasUnaryAddNothrow</name>
        <initializer>= requires(T val)
	{
		{
			+val
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="230" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a17a2efbabc6cd7e099beb104ac9381c9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasUnarySubtract</definition>
        <argsstring></argsstring>
        <name>HasUnarySubtract</name>
        <initializer>= requires(T val)
	{
		-val;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="239" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a8c8672700a2bb498320cc4162c9c980d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasUnarySubtractNothrow</definition>
        <argsstring></argsstring>
        <name>HasUnarySubtractNothrow</name>
        <initializer>= requires(T val)
	{
		{
			-val
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="244" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a1320979703b37ece4e6beebd46150ae5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasAddition</definition>
        <argsstring></argsstring>
        <name>HasAddition</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs - rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="253" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a75f16d35bb6fee3336327b94f399284d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasAdditionNothrow</definition>
        <argsstring></argsstring>
        <name>HasAdditionNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs - rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="258" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ae057dfe4dab03ab98bc9387e398bde5b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasSubtraction</definition>
        <argsstring></argsstring>
        <name>HasSubtraction</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs - rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="267" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a1d6ff206d4290d29f56b0102669cf4a7" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasSubtractionNothrow</definition>
        <argsstring></argsstring>
        <name>HasSubtractionNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs - rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="272" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ad2cc978c90b242ccf9e4faf0734a6bfe" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasMultiplication</definition>
        <argsstring></argsstring>
        <name>HasMultiplication</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs* rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="281" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ab0c781c57c46181a840fec1454437c62" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasMultiplicationNothrow</definition>
        <argsstring></argsstring>
        <name>HasMultiplicationNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs* rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="286" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a89e5b3039388aba69e2769ee4e906e54" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasDivision</definition>
        <argsstring></argsstring>
        <name>HasDivision</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs / rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="295" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a669213c6bffd25d92d4715849fdb2df9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasDivisionNothrow</definition>
        <argsstring></argsstring>
        <name>HasDivisionNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs / rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="300" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a1bf3e5e152e149b6b0a0fe045db4126c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasModulo</definition>
        <argsstring></argsstring>
        <name>HasModulo</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs % rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="309" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a0adbb4e2e612ee3d23c04e822473fcf6" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasModuloNothrow</definition>
        <argsstring></argsstring>
        <name>HasModuloNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs % rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="314" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a9a1a855cdc5b4c95a4f1c4edb8f7f146" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitNot</definition>
        <argsstring></argsstring>
        <name>HasBitNot</name>
        <initializer>= requires(T val)
	{
		~val;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="323" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a71f1725adb6159ee5c03d5e68d9a424b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitNotNothrow</definition>
        <argsstring></argsstring>
        <name>HasBitNotNothrow</name>
        <initializer>= requires(T val)
	{
		{
			~val
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="328" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a65c41f4f3a61769d1942c1b9edd07cc8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitAnd</definition>
        <argsstring></argsstring>
        <name>HasBitAnd</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs&amp; rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="338" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ae4cc7f1dca0dc72de4f38921af64cf95" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitAndNothrow</definition>
        <argsstring></argsstring>
        <name>HasBitAndNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs&amp; rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="343" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a1c9a501a3342e6f95d2b9857048b9067" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitOr</definition>
        <argsstring></argsstring>
        <name>HasBitOr</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs | rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="353" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ad1156507cd74fccb26593e73101f66d1" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitOrNothrow</definition>
        <argsstring></argsstring>
        <name>HasBitOrNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs | rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="358" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aad9d4487af1f0fee6a9d96d01b7d0968" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitXor</definition>
        <argsstring></argsstring>
        <name>HasBitXor</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs ^ rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="368" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aa7f7262de31b84108725fa7242213146" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitXorNothrow</definition>
        <argsstring></argsstring>
        <name>HasBitXorNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs ^ rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="373" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a023b504f073601d3e504ae28c0f5dacd" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitLeftShift</definition>
        <argsstring></argsstring>
        <name>HasBitLeftShift</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs &lt;&lt; rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="382" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1acdc7beece9a4eae700305a4f1d5573b9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitLeftShiftNothrow</definition>
        <argsstring></argsstring>
        <name>HasBitLeftShiftNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs &lt;&lt; rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="387" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ab77071488dc379ca3a568fd13f630635" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitRightShift</definition>
        <argsstring></argsstring>
        <name>HasBitRightShift</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		lhs &gt;&gt; rhs;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="397" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a0f62072c907ca3065fa371703be25fe4" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasBitRightShiftNothrow</definition>
        <argsstring></argsstring>
        <name>HasBitRightShiftNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs &gt;&gt; rhs
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="402" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aa873d02630377af816917b820ecbcc8a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLogicalNot</definition>
        <argsstring></argsstring>
        <name>HasLogicalNot</name>
        <initializer>= requires(T val)
	{
		{
			!val
		}
		-&gt;std::same_as&lt;bool&gt;;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="413" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a0d72942fa94f3c385885c9fe40ec9c5a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLogicalNotNothrow</definition>
        <argsstring></argsstring>
        <name>HasLogicalNotNothrow</name>
        <initializer>= requires(T val)
	{
		{
			!val
		}
		noexcept-&gt;std::same_as&lt;bool&gt;;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="422" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a12da1e24f075cf3e582315e283b93a80" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLogicalAnd</definition>
        <argsstring></argsstring>
        <name>HasLogicalAnd</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs&amp;&amp; rhs
		}
		-&gt;std::same_as&lt;bool&gt;;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="431" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a819af850664d67bba65735873e6bccfb" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLogicalAndNothrow</definition>
        <argsstring></argsstring>
        <name>HasLogicalAndNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs&amp;&amp; rhs
		}
		noexcept-&gt;std::same_as&lt;bool&gt;;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="439" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ae9a32892b9d070c5d92d3d19f48b50b4" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLogicalOr</definition>
        <argsstring></argsstring>
        <name>HasLogicalOr</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs || rhs
		}
		-&gt;std::same_as&lt;bool&gt;;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="448" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a35fde2b924ef1164fe15c7f24ae314b9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLogicalOrNothrow</definition>
        <argsstring></argsstring>
        <name>HasLogicalOrNothrow</name>
        <initializer>= requires(T lhs, Y rhs)
	{
		{
			lhs || rhs
		}
		noexcept-&gt;std::same_as&lt;bool&gt;;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="456" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a53e0cec21a76787296673a81198fd64d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasEquality</definition>
        <argsstring></argsstring>
        <name>HasEquality</name>
        <initializer>= IsInvocable&lt;std::equal_to&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="466" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aebb4b2f925f619cbc76aa7dfb40def3b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasEqualityNothrow</definition>
        <argsstring></argsstring>
        <name>HasEqualityNothrow</name>
        <initializer>= IsInvocableNothrow&lt;std::equal_to&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="469" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ad41849f7978968397458a39c6c6fce4a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasInequality</definition>
        <argsstring></argsstring>
        <name>HasInequality</name>
        <initializer>= IsInvocable&lt;std::not_equal_to&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="472" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aae11cf10d32d99438261fcf1d00f1ac9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasInequalityNothrow</definition>
        <argsstring></argsstring>
        <name>HasInequalityNothrow</name>
        <initializer>= IsInvocableNothrow&lt;std::not_equal_to&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="475" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a8efcc51ce53bfd397aa88c79ef4b2886" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasGreaterThan</definition>
        <argsstring></argsstring>
        <name>HasGreaterThan</name>
        <initializer>= IsInvocable&lt;std::greater&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="478" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a1d687c4395533a919c638262f66db84c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasGreaterThanNothrow</definition>
        <argsstring></argsstring>
        <name>HasGreaterThanNothrow</name>
        <initializer>= IsInvocableNothrow&lt;std::greater&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="481" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1ad182118d7b9f373e354b181ef1f67123" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasGreaterEqualThan</definition>
        <argsstring></argsstring>
        <name>HasGreaterEqualThan</name>
        <initializer>= IsInvocable&lt;std::greater_equal&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="484" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1af0f83c126f37473f6201eff816bc126a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasGreaterEqualThanNothrow</definition>
        <argsstring></argsstring>
        <name>HasGreaterEqualThanNothrow</name>
        <initializer>= IsInvocableNothrow&lt;std::greater_equal&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="487" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a0dd472c7fc6669ea083e157535e4950c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLessThan</definition>
        <argsstring></argsstring>
        <name>HasLessThan</name>
        <initializer>= IsInvocable&lt;std::less&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="490" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a9e7f4c2294e7648ace31e1de0412bc1b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLessThanNothrow</definition>
        <argsstring></argsstring>
        <name>HasLessThanNothrow</name>
        <initializer>= IsInvocableNothrow&lt;std::less&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="493" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a5f7b2b8809b404b9c7de8dfe1c45940b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLessEqualThan</definition>
        <argsstring></argsstring>
        <name>HasLessEqualThan</name>
        <initializer>= IsInvocable&lt;std::less_equal&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="496" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a13633719610cb382c7e25296c4ef014f" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasLessEqualThanNothrow</definition>
        <argsstring></argsstring>
        <name>HasLessEqualThanNothrow</name>
        <initializer>= IsInvocableNothrow&lt;std::less_equal&lt;&gt;, T, Y&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="499" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a965bbd8ecca3d93e9f18f6b4acbe3563" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasOperatorSubscript</definition>
        <argsstring></argsstring>
        <name>HasOperatorSubscript</name>
        <initializer>= requires(T val, Y index)
	{
		val[index];
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="505" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a48ed25ff926bfcfe7c1e3d4c4bbcd5f6" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasOperatorSubscriptNothrow</definition>
        <argsstring></argsstring>
        <name>HasOperatorSubscriptNothrow</name>
        <initializer>= requires(T val, Y index)
	{
		{
			val[index]
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="510" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1aeeb6d698890e944105899570a90a74dd" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasOperatorInvoke</definition>
        <argsstring></argsstring>
        <name>HasOperatorInvoke</name>
        <initializer>= requires(T val, Args... args)
	{
		val(args...);
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="523" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="concepts_8hpp_1a90065a4e26e42a42a3767bc74aee6cb5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept psl::concepts::HasOperatorInvokeNothrow</definition>
        <argsstring></argsstring>
        <name>HasOperatorInvokeNothrow</name>
        <initializer>= requires(T val, Args... args)
	{
		{
			val(args...)
		}
		noexcept;
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="528" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" bodystart="528" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/concepts.hpp" line="13" column="1"/>
  </compounddef>
</doxygen>
