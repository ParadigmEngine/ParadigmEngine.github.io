<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmemory_1_1block__allocator" kind="class" language="C++" prot="public">
    <compoundname>memory::block_allocator</compoundname>
    <basecompoundref refid="classmemory_1_1allocator__base" prot="public" virt="non-virtual">memory::allocator_base</basecompoundref>
    <includes refid="allocator_8hpp" local="no">allocator.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmemory_1_1block__allocator_1a48d6917e3f12ccebeb81e2884d0667ef" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmemory_1_1range__t" kindref="compound">memory::range_t</ref> &gt;</type>
        <definition>std::vector&lt;memory::range_t&gt; memory::block_allocator::m_Ranges</definition>
        <argsstring></argsstring>
        <name>m_Ranges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="98" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmemory_1_1block__allocator_1a17fd4cfb6f0e499b580e25c5a7b45627" prot="private" static="no" mutable="no">
        <type>std::stack&lt; size_t &gt;</type>
        <definition>std::stack&lt;size_t&gt; memory::block_allocator::m_Free</definition>
        <argsstring></argsstring>
        <name>m_Free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="99" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmemory_1_1block__allocator_1a48b336eed3aea5cbd6c099cf1fc3e011" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t memory::block_allocator::m_BlockSize</definition>
        <argsstring></argsstring>
        <name>m_BlockSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="100" column="14" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmemory_1_1block__allocator_1a146208f3dc85600b12f7f5f7fcf8d8f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>memory::block_allocator::block_allocator</definition>
        <argsstring>(size_t block_size, bool physically_backed=true)</argsstring>
        <name>block_allocator</name>
        <param>
          <type>size_t</type>
          <declname>block_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>physically_backed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="84" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="84" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1block__allocator_1ac9c6fb31853c3f85e3fce4bdedf6eb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual memory::block_allocator::~block_allocator</definition>
        <argsstring>()=default</argsstring>
        <name>~block_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="86" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmemory_1_1block__allocator_1ad496019c22724eba2725f6e5540fabc6" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &gt;</type>
        <definition>std::optional&lt; segment &gt; block_allocator::do_allocate</definition>
        <argsstring>(region *region, std::size_t bytes) override</argsstring>
        <name>do_allocate</name>
        <reimplements refid="classmemory_1_1allocator__base_1ac57d9a6f0c8063ed5e95922838d29b13">do_allocate</reimplements>
        <param>
          <type><ref refid="classmemory_1_1region" kindref="compound">region</ref> *</type>
          <declname>region</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="89" column="15" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="265" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1block__allocator_1a937ad924132c90ae73d77f52c5372c88" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool block_allocator::do_deallocate</definition>
        <argsstring>(segment &amp;segment) override</argsstring>
        <name>do_deallocate</name>
        <reimplements refid="classmemory_1_1allocator__base_1a000d33a26cec374ac82daaa9dc01f70c">do_deallocate</reimplements>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="90" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="282" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1block__allocator_1ab145364b88180de208740de413e78623" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void block_allocator::initialize</definition>
        <argsstring>(region *region) override</argsstring>
        <name>initialize</name>
        <param>
          <type><ref refid="classmemory_1_1region" kindref="compound">region</ref> *</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="91" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="253" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1block__allocator_1a55b9209c8b9586a24daefda61ca4b942" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &gt;</type>
        <definition>std::vector&lt; range_t &gt; block_allocator::get_committed</definition>
        <argsstring>() const override</argsstring>
        <name>get_committed</name>
        <reimplements refid="classmemory_1_1allocator__base_1aeb02d1e41dfeca4bd6ab3814e9f2b6fd">get_committed</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="93" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="291" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1block__allocator_1a2b36454af71bd94468a7dcc297827b3e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &gt;</type>
        <definition>std::vector&lt; range_t &gt; block_allocator::get_available</definition>
        <argsstring>() const override</argsstring>
        <name>get_available</name>
        <reimplements refid="classmemory_1_1allocator__base_1a50ede03cd6c7958855a4528e6adb87ff">get_available</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="94" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="302" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1block__allocator_1ad8511c83dafe8fda792e92c6792e9471" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool block_allocator::get_owns</definition>
        <argsstring>(const memory::segment &amp;segment) const noexcept override</argsstring>
        <name>get_owns</name>
        <reimplements refid="classmemory_1_1allocator__base_1a72a4b8ebe8f787316686d311a3fadc83">get_owns</reimplements>
        <param>
          <type>const <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="96" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp" bodystart="314" bodyend="323"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>predifined block size allocator, much faster than most allocators, but can only allocate one sized blocks. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>memory::block_allocator</label>
        <link refid="classmemory_1_1block__allocator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>memory::allocator_base</label>
        <link refid="classmemory_1_1allocator__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>memory::block_allocator</label>
        <link refid="classmemory_1_1block__allocator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>memory::allocator_base</label>
        <link refid="classmemory_1_1allocator__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" line="82" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp" bodystart="81" bodyend="101"/>
    <listofallmembers>
      <member refid="classmemory_1_1allocator__base_1a631aaea05e2227040676bacd1a815978" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>alignment</name></member>
      <member refid="classmemory_1_1allocator__base_1a70fc8dd6504d162ef9fcec2f2d430d8b" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>allocate</name></member>
      <member refid="classmemory_1_1allocator__base_1ad5d9bee43e84374b6a472eab100778f4" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>allocator_base</name></member>
      <member refid="classmemory_1_1allocator__base_1a8a739e71de034018dc1bad3b5c4610a3" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>allocator_base</name></member>
      <member refid="classmemory_1_1allocator__base_1a0a7a8654e4d91232cbca36f77de1062a" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>available</name></member>
      <member refid="classmemory_1_1block__allocator_1a146208f3dc85600b12f7f5f7fcf8d8f8" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>block_allocator</name></member>
      <member refid="classmemory_1_1allocator__base_1adfcea51583c36bc5a9819ed4d0e49cc6" prot="protected" virt="non-virtual"><scope>memory::block_allocator</scope><name>commit</name></member>
      <member refid="classmemory_1_1allocator__base_1af09c2414bdc81b836406c69fe41cf213" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>committed</name></member>
      <member refid="classmemory_1_1allocator__base_1a55afd4a585a25537de1ad96ea5d30537" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>compact</name></member>
      <member refid="classmemory_1_1allocator__base_1a2bc4dab10acef2888165886767a82788" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>deallocate</name></member>
      <member refid="classmemory_1_1block__allocator_1ad496019c22724eba2725f6e5540fabc6" prot="private" virt="virtual"><scope>memory::block_allocator</scope><name>do_allocate</name></member>
      <member refid="classmemory_1_1block__allocator_1a937ad924132c90ae73d77f52c5372c88" prot="private" virt="virtual"><scope>memory::block_allocator</scope><name>do_deallocate</name></member>
      <member refid="classmemory_1_1block__allocator_1a2b36454af71bd94468a7dcc297827b3e" prot="private" virt="virtual"><scope>memory::block_allocator</scope><name>get_available</name></member>
      <member refid="classmemory_1_1block__allocator_1a55b9209c8b9586a24daefda61ca4b942" prot="private" virt="virtual"><scope>memory::block_allocator</scope><name>get_committed</name></member>
      <member refid="classmemory_1_1block__allocator_1ad8511c83dafe8fda792e92c6792e9471" prot="private" virt="virtual"><scope>memory::block_allocator</scope><name>get_owns</name></member>
      <member refid="classmemory_1_1allocator__base_1aae63c94cb09359c6b7aa79bec30029b4" prot="protected" virt="non-virtual"><scope>memory::block_allocator</scope><name>get_range</name></member>
      <member refid="classmemory_1_1block__allocator_1ab145364b88180de208740de413e78623" prot="private" virt="non-virtual"><scope>memory::block_allocator</scope><name>initialize</name></member>
      <member refid="classmemory_1_1allocator__base_1a965361530e1829cd69d075f1ea3f894b" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>is_physically_backed</name></member>
      <member refid="classmemory_1_1block__allocator_1a48b336eed3aea5cbd6c099cf1fc3e011" prot="private" virt="non-virtual"><scope>memory::block_allocator</scope><name>m_BlockSize</name></member>
      <member refid="classmemory_1_1block__allocator_1a17fd4cfb6f0e499b580e25c5a7b45627" prot="private" virt="non-virtual"><scope>memory::block_allocator</scope><name>m_Free</name></member>
      <member refid="classmemory_1_1block__allocator_1a48d6917e3f12ccebeb81e2884d0667ef" prot="private" virt="non-virtual"><scope>memory::block_allocator</scope><name>m_Ranges</name></member>
      <member refid="classmemory_1_1allocator__base_1a128d2b0abaa5c09d15b4dfb45c8c6a0b" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>operator=</name></member>
      <member refid="classmemory_1_1allocator__base_1ae30458b0f04867bebd9cf36b957a260b" prot="public" virt="non-virtual"><scope>memory::block_allocator</scope><name>owns</name></member>
      <member refid="classmemory_1_1allocator__base_1aaed0b3e05165b0016a06efa6d3a82253" prot="public" virt="virtual"><scope>memory::block_allocator</scope><name>~allocator_base</name></member>
      <member refid="classmemory_1_1block__allocator_1ac9c6fb31853c3f85e3fce4bdedf6eb3f" prot="public" virt="virtual"><scope>memory::block_allocator</scope><name>~block_allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
