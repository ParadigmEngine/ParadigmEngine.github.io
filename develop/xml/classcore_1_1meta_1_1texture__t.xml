<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1meta_1_1texture__t" kind="class" language="C++" prot="public" final="yes">
    <compoundname>core::meta::texture_t</compoundname>
    <basecompoundref refid="classpsl_1_1meta_1_1file" prot="public" virt="non-virtual">psl::meta::file</basecompoundref>
    <includes refid="meta_2texture_8hpp" local="no">texture.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcore_1_1meta_1_1texture__t_1ae6e4002148765f114da9fe1b5c64547d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class psl::serialization::accessor</definition>
        <argsstring></argsstring>
        <name>psl::serialization::accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="23" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1a603b90bc3bd818516699a130f62b0354" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;WIDTH&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;WIDTH&quot;, uint32_t&gt; core::meta::texture_t::m_Width</definition>
        <argsstring></argsstring>
        <name>m_Width</name>
        <initializer>{0u}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="115" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1aeee77d7b4e3c4311a0eb12ff08f16a94" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;HEIGHT&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;HEIGHT&quot;, uint32_t&gt; core::meta::texture_t::m_Height</definition>
        <argsstring></argsstring>
        <name>m_Height</name>
        <initializer>{0u}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="116" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1af13d32f6a0158b22c5ebc3bf1959af37" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;DEPTH&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;DEPTH&quot;, uint32_t&gt; core::meta::texture_t::m_Depth</definition>
        <argsstring></argsstring>
        <name>m_Depth</name>
        <initializer>{1u}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="117" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1ac953f8d159ad062312f7d942f27f5990" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;MIP_LEVELS&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;MIP_LEVELS&quot;, uint32_t&gt; core::meta::texture_t::m_MipLevels</definition>
        <argsstring></argsstring>
        <name>m_MipLevels</name>
        <initializer>{1u}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="118" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1a6587ec471094cf086ea95a4153654a51" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;LAYERS&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;LAYERS&quot;, uint32_t&gt; core::meta::texture_t::m_LayerCount</definition>
        <argsstring></argsstring>
        <name>m_LayerCount</name>
        <initializer>{1u}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="119" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1a8741fadf74885c082aa636452bb56f04" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;FORMAT&quot;, core::gfx::format_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;FORMAT&quot;, core::gfx::format_t&gt; core::meta::texture_t::m_Format</definition>
        <argsstring></argsstring>
        <name>m_Format</name>
        <initializer>{core::gfx::format_t::undefined}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="120" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1a3bc808d7a6502ad9a13e586b3c3f06d5" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;IMAGE_TYPE&quot;, core::gfx::image_type &gt;</type>
        <definition>psl::serialization::property&lt;&quot;IMAGE_TYPE&quot;, core::gfx::image_type&gt; core::meta::texture_t::m_ImageType</definition>
        <argsstring></argsstring>
        <name>m_ImageType</name>
        <initializer>{
		  core::gfx::image_type::planar_2D}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="121" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1a132b99f53a6f09678964ef887e08e292" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;USAGE&quot;, core::gfx::image_usage &gt;</type>
        <definition>psl::serialization::property&lt;&quot;USAGE&quot;, core::gfx::image_usage&gt; core::meta::texture_t::m_UsageFlags</definition>
        <argsstring></argsstring>
        <name>m_UsageFlags</name>
        <initializer>{
		  core::gfx::image_usage::transfer_destination | core::gfx::image_usage::sampled}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="123" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1a672c66758e6b01edbe539fe36ac34487" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;ASPECT_MASK&quot;, core::gfx::image_aspect &gt;</type>
        <definition>psl::serialization::property&lt;&quot;ASPECT_MASK&quot;, core::gfx::image_aspect&gt; core::meta::texture_t::m_AspectMask</definition>
        <argsstring></argsstring>
        <name>m_AspectMask</name>
        <initializer>{
		  core::gfx::image_aspect::color}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="125" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1a86b8c2366eb16a217f00d2e30ef0441e" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr psl::string8::view</type>
        <definition>constexpr psl::string8::view core::meta::texture_t::polymorphic_name</definition>
        <argsstring></argsstring>
        <name>polymorphic_name</name>
        <initializer>{&quot;TEXTURE_META&quot;}</initializer>
        <briefdescription>
<para>the polymorphic serialization name for the psl::format::node that will be used to calculate the CRC64 ID of this type on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="131" column="37" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1meta_1_1texture__t_1aedd31662640523e9b9f021620609ad8a" prot="private" static="yes" mutable="no">
        <type>const uint64_t</type>
        <definition>const uint64_t texture_t::polymorphic_identity</definition>
        <argsstring></argsstring>
        <name>polymorphic_identity</name>
        <initializer>{register_polymorphic&lt;<ref refid="classcore_1_1meta_1_1texture__t" kindref="compound">texture_t</ref>&gt;()}</initializer>
        <briefdescription>
<para>the associated unique ID (per type, not instance) for the polymorphic system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="135" column="23" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a48dba3e60d38e56f4e05d18d75d5be62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::meta::texture_t::texture_t</definition>
        <argsstring>()=default</argsstring>
        <name>texture_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a241a78d5475fb5e81939ab87ce864a63" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>core::meta::texture_t::texture_t</definition>
        <argsstring>(const psl::UID &amp;key) noexcept</argsstring>
        <name>texture_t</name>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="26" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a082dc54f31f7ee2051b4bc67d430c7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::meta::texture_t::~texture_t</definition>
        <argsstring>()=default</argsstring>
        <name>~texture_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a61ddb04e5964c8323d7bbc215f9ee6a5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t texture_t::width</definition>
        <argsstring>() const noexcept</argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the width of the texture in pixels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="31" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a2e8b54b4ec70c1b35e955a4b04c91cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::width</definition>
        <argsstring>(uint32_t width)</argsstring>
        <name>width</name>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>sets the width in pixels of the given texture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>even though setting this to less than the actual resolution should be fine, setting it to more will result in accessing outside of the actual memory leading to a crash. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width in pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="36" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="11" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1ac12d948f02566deb2684654220bdc620" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t texture_t::height</definition>
        <argsstring>() const noexcept</argsstring>
        <name>height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the height of the texture in pixels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="39" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a2681592fc725550243c28c5f0e1889ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::height</definition>
        <argsstring>(uint32_t height)</argsstring>
        <name>height</name>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>sets the height in pixels of the given texture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>even though setting this to less than the actual resolution should be fine, setting it to more will result in accessing outside of the actual memory leading to a crash. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height in pixels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="44" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1abc4bfa13c2b96d4644fbdf25814e783a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t texture_t::depth</definition>
        <argsstring>() const noexcept</argsstring>
        <name>depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the depth of the texture in pixels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="47" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a02add36fddf6ca010d627cbd02ae2059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::depth</definition>
        <argsstring>(uint32_t depth)</argsstring>
        <name>depth</name>
        <param>
          <type>uint32_t</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>sets the depth in pixels of the given texture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>even though setting this to less than the actual resolution should be fine, setting it to more will result in accessing outside of the actual memory leading to a crash. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth in pixels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="52" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a384ad3a6d6b23bcf8aebbed82a1553a0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t texture_t::mip_levels</definition>
        <argsstring>() const noexcept</argsstring>
        <name>mip_levels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the used mip levels of the texture. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="55" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a1ed6159087852d99c655384051d4eda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::mip_levels</definition>
        <argsstring>(uint32_t mip_levels)</argsstring>
        <name>mip_levels</name>
        <param>
          <type>uint32_t</type>
          <declname>mip_levels</declname>
        </param>
        <briefdescription>
<para>sets the used mip levels of the texture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>although setting less than the actual available mip_levels is possible (but leads to undefined behaviour), setting more than the available will definitely lead to a crash. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mip_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of mip levels present in the resource. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="60" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a1648f5eb622d6f2d869c10fad483cd79" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t texture_t::layers</definition>
        <argsstring>() const noexcept</argsstring>
        <name>layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the layers of the texture. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="63" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1ac88ff762bc4a4c7c9abe9d45a025383b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::layers</definition>
        <argsstring>(uint32_t layers)</argsstring>
        <name>layers</name>
        <param>
          <type>uint32_t</type>
          <declname>layers</declname>
        </param>
        <briefdescription>
<para>sets the amount of layers this texture exists out of (think array textures). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">layers</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of layers contained in this instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>even though setting this to less than the actual layers should be fine, setting it to more will result in accessing outside of the actual memory leading to a crash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="68" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a3f56172b1f716331e94708de553fd56b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>core::gfx::format_t</type>
        <definition>core::gfx::format_t texture_t::format</definition>
        <argsstring>() const noexcept</argsstring>
        <name>format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the format that the texture is in. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="71" column="21" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a76529e5acbfd529795bacf57aae6ad75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::format</definition>
        <argsstring>(core::gfx::format_t format)</argsstring>
        <name>format</name>
        <param>
          <type>core::gfx::format_t</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>the format of the texture resource. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>invalid formats will, in best case lead to render artifacts, and in worst cause segmentation fault for reading outside of the memory that was expected to be present for the given format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="76" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1ab5bcae30f313572a094f9d6a440e2012" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>core::gfx::image_type</type>
        <definition>core::gfx::image_type texture_t::image_type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>image_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type of texture this is (2D, 3D, etc..). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="79" column="23" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a59f9bfe61eef9bbbfb62e463223434cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::image_type</definition>
        <argsstring>(core::gfx::image_type type)</argsstring>
        <name>image_type</name>
        <param>
          <type>core::gfx::image_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>sets the type of texture (2D, 3D, 2DArray, etc...). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of image to expect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="82" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1acc30d161c5d62a026f7140e15e74da26" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>core::gfx::image_usage</type>
        <definition>core::gfx::image_usage texture_t::usage</definition>
        <argsstring>() const noexcept</argsstring>
        <name>usage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the expected usage of this texture </para>
</simplesect>
<simplesect kind="note"><para>this can be changed, it is a suggestion. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="86" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a2670f2fd1e4441715399b34ceb1b143d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::usage</definition>
        <argsstring>(core::gfx::image_usage usage)</argsstring>
        <name>usage</name>
        <param>
          <type>core::gfx::image_usage</type>
          <declname>usage</declname>
        </param>
        <briefdescription>
<para>suggests the usage flags of this texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">usage</parametername>
</parameternamelist>
<parameterdescription>
<para>the usage flags to expect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="89" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a96f3487b94974cab0efd992e2661cddc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>core::gfx::image_aspect</type>
        <definition>core::gfx::image_aspect texture_t::aspect_mask</definition>
        <argsstring>() const noexcept</argsstring>
        <name>aspect_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>what type of aspects to expect (color, depth, stencil, etc..) </para>
</simplesect>
<simplesect kind="note"><para>this can be changed, it is a suggestion. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="93" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a3497526de6024ad0c688326fd1388817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void texture_t::aspect_mask</definition>
        <argsstring>(core::gfx::image_aspect aspect)</argsstring>
        <name>aspect_mask</name>
        <param>
          <type>core::gfx::image_aspect</type>
          <declname>aspect</declname>
        </param>
        <briefdescription>
<para>suggests the aspect masks this texture exists out of. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>invalid aspect masks lead to undefined behaviour. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aspect</parametername>
</parameternamelist>
<parameterdescription>
<para>the aspect mask flag to expect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="97" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a123bff71baafcb3aa2ba89787fe328b0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void core::meta::texture_t::serialize</definition>
        <argsstring>(S &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>S &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>method that will be invoked by the serialization system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the serializer/deserializer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>instance of a serializer that you can read from, or write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="104" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1a15efbebacc0da697b4c55beef5fbd513" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool texture_t::validate</definition>
        <argsstring>() const noexcept</argsstring>
        <name>validate</name>
        <briefdescription>
<para>validates this texture </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="114" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/meta/texture.cpp" bodystart="37" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1meta_1_1texture__t_1add1359ef0d5904f7682609b3b2f90f13" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const uint64_t</type>
        <definition>virtual const uint64_t core::meta::texture_t::polymorphic_id</definition>
        <argsstring>() override</argsstring>
        <name>polymorphic_id</name>
        <reimplements refid="classpsl_1_1meta_1_1file_1a2938e3799ca254316fcf0b2220911d85">polymorphic_id</reimplements>
        <briefdescription>
<para>returns the polymorphic ID at runtime, to resolve what type this is. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="133" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Custom meta data that describes a texture. i.e. width, height, format, etc.. </para>
    </briefdescription>
    <detaileddescription>
<para>does not contain any actual texture data, just describes it. This aids the engine in setting up the correct resources for rendering the associated texture file. <simplesect kind="warning"><para>The description is assumed to be correct, otherwise undefined behaviour happens. </para>
</simplesect>
<simplesect kind="note"><para>although this class allows runtime editing, it&apos;s unlikely you&apos;d need it unless you generate textures. and wish to serialize them to disk. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>psl::meta::file</label>
        <link refid="classpsl_1_1meta_1_1file"/>
      </node>
      <node id="1">
        <label>core::meta::texture_t</label>
        <link refid="classcore_1_1meta_1_1texture__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>psl::meta::file</label>
        <link refid="classpsl_1_1meta_1_1file"/>
      </node>
      <node id="1">
        <label>core::meta::texture_t</label>
        <link refid="classcore_1_1meta_1_1texture__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" line="22" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/meta/texture.hpp" bodystart="21" bodyend="136"/>
    <listofallmembers>
      <member refid="classcore_1_1meta_1_1texture__t_1a96f3487b94974cab0efd992e2661cddc" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>aspect_mask</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a3497526de6024ad0c688326fd1388817" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>aspect_mask</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1abc4bfa13c2b96d4644fbdf25814e783a" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>depth</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a02add36fddf6ca010d627cbd02ae2059" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>depth</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a9dd6ad47b1a46c01c0195e1f7feaea66" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1aa8ba3e3715bfb8ffb1956414093cecff" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1add07f982eb38df2274a1146be5c057d0" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1ab2bcf7b6e0c00bf8441de0d6bccde949" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>file</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a1ba2901274565fa94ef76b19465cc4c2" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>file</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a3f56172b1f716331e94708de553fd56b" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>format</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a76529e5acbfd529795bacf57aae6ad75" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>format</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1ac12d948f02566deb2684654220bdc620" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>height</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a2681592fc725550243c28c5f0e1889ad" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>height</name></member>
      <member refid="classpsl_1_1meta_1_1file_1abea97c4747d4e435033ec7b73270c103" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>ID</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1ab5bcae30f313572a094f9d6a440e2012" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>image_type</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a59f9bfe61eef9bbbfb62e463223434cf" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>image_type</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a1648f5eb622d6f2d869c10fad483cd79" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>layers</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1ac88ff762bc4a4c7c9abe9d45a025383b" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>layers</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a672c66758e6b01edbe539fe36ac34487" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_AspectMask</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1af13d32f6a0158b22c5ebc3bf1959af37" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_Depth</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a8741fadf74885c082aa636452bb56f04" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_Format</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1aeee77d7b4e3c4311a0eb12ff08f16a94" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_Height</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a3bc808d7a6502ad9a13e586b3c3f06d5" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_ImageType</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a6587ec471094cf086ea95a4153654a51" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_LayerCount</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1ac953f8d159ad062312f7d942f27f5990" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_MipLevels</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a132b99f53a6f09678964ef887e08e292" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_UsageFlags</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a603b90bc3bd818516699a130f62b0354" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>m_Width</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a384ad3a6d6b23bcf8aebbed82a1553a0" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>mip_levels</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a1ed6159087852d99c655384051d4eda7" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>mip_levels</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a80e158a6feeaef638312d8298d47761d" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>name</name></member>
      <member refid="classpsl_1_1meta_1_1file_1aa9ee8e8b9e867bbaf3dbcdfad83530a0" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>operator=</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a5ed845814586f964ccc5f3c268c0861e" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>operator=</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1add1359ef0d5904f7682609b3b2f90f13" prot="private" virt="virtual"><scope>core::meta::texture_t</scope><name>polymorphic_id</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1aedd31662640523e9b9f021620609ad8a" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>polymorphic_identity</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a86b8c2366eb16a217f00d2e30ef0441e" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>polymorphic_name</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1ae6e4002148765f114da9fe1b5c64547d" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>psl::serialization::accessor</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a123bff71baafcb3aa2ba89787fe328b0" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>serialize</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a7d22ecc9d15e6203af4a77bc86cebcdb" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>tags</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a48dba3e60d38e56f4e05d18d75d5be62" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>texture_t</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a241a78d5475fb5e81939ab87ce864a63" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>texture_t</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1acc30d161c5d62a026f7140e15e74da26" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>usage</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a2670f2fd1e4441715399b34ceb1b143d" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>usage</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a15efbebacc0da697b4c55beef5fbd513" prot="private" virt="non-virtual"><scope>core::meta::texture_t</scope><name>validate</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a61ddb04e5964c8323d7bbc215f9ee6a5" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>width</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a2e8b54b4ec70c1b35e955a4b04c91cb1" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>width</name></member>
      <member refid="classpsl_1_1meta_1_1file_1a5dd34d73b5a8df3de9f3076cbb727047" prot="public" virt="virtual"><scope>core::meta::texture_t</scope><name>~file</name></member>
      <member refid="classcore_1_1meta_1_1texture__t_1a082dc54f31f7ee2051b4bc67d430c7fb" prot="public" virt="non-virtual"><scope>core::meta::texture_t</scope><name>~texture_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
