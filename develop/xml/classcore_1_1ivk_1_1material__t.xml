<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1ivk_1_1material__t" kind="class" language="C++" prot="public" final="yes">
    <compoundname>core::ivk::material_t</compoundname>
    <includes refid="vk_2material_8hpp" local="no">material.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a702ed4df52209db079483e3465772902" prot="private" static="no" mutable="no">
        <type><ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref></type>
        <definition>psl::UID core::ivk::material_t::m_UID</definition>
        <argsstring></argsstring>
        <name>m_UID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="115" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a3eff7c79ecbb8ccce90470e6d40f3858" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1context" kindref="compound">core::ivk::context</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::context&gt; core::ivk::material_t::m_Context</definition>
        <argsstring></argsstring>
        <name>m_Context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="116" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a92330e5d7ccae743b466b84bd9fc8a33" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">core::ivk::pipeline_cache</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::pipeline_cache&gt; core::ivk::material_t::m_PipelineCache</definition>
        <argsstring></argsstring>
        <name>m_PipelineCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="117" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a3c8edea8d2a9a5e654e68983c143bd73" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::data::material_t&gt; core::ivk::material_t::m_Data</definition>
        <argsstring></argsstring>
        <name>m_Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="118" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a7f0629239bd082ac659b03e56c73f2bf" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1shader" kindref="compound">core::ivk::shader</ref> &gt; &gt;</type>
        <definition>std::vector&lt;core::resource::handle&lt;core::ivk::shader&gt; &gt; core::ivk::material_t::m_Shaders</definition>
        <argsstring></argsstring>
        <name>m_Shaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="120" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1aeddd6e85ed9664e753e343cf767ba51b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; uint32_t, <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1texture__t" kindref="compound">core::ivk::texture_t</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;uint32_t, core::resource::handle&lt;core::ivk::texture_t&gt; &gt; &gt; core::ivk::material_t::m_Textures</definition>
        <argsstring></argsstring>
        <name>m_Textures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="123" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a747ba6e8ac82528902015f5254558364" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; uint32_t, <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1sampler__t" kindref="compound">core::ivk::sampler_t</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;uint32_t, core::resource::handle&lt;core::ivk::sampler_t&gt; &gt; &gt; core::ivk::material_t::m_Samplers</definition>
        <argsstring></argsstring>
        <name>m_Samplers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="124" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1ab31f26fb41c3a2a2fd8132bd2633521f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt;uint32_t&gt; core::ivk::material_t::m_DynamicOffsets</definition>
        <argsstring></argsstring>
        <name>m_DynamicOffsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="126" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a9b92cf1dfe33b7c9aedfaad4e7e06615" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt;uint32_t&gt; core::ivk::material_t::m_DynamicOffsetsIndices</definition>
        <argsstring></argsstring>
        <name>m_DynamicOffsetsIndices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="127" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a92bac3edbef71d791077ecac008541f3" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t core::ivk::material_t::m_MaterialBufferBinding</definition>
        <argsstring></argsstring>
        <name>m_MaterialBufferBinding</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="129" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a6c10945d00bec32d78ac2d49dd57b16b" prot="private" static="no" mutable="no">
        <type><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref></type>
        <definition>memory::segment core::ivk::material_t::m_MaterialBufferRange</definition>
        <argsstring></argsstring>
        <name>m_MaterialBufferRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="130" column="17" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a82c1647785991c672a1d10715fa71d52" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1buffer__t" kindref="compound">core::ivk::buffer_t</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::buffer_t&gt; core::ivk::material_t::m_MaterialBuffer</definition>
        <argsstring></argsstring>
        <name>m_MaterialBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="131" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a50a99d5eddcf50c471ca8d0fa9fdce30" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref>, <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;psl::UID, core::resource::handle&lt;core::ivk::pipeline&gt; &gt; core::ivk::material_t::m_Pipeline</definition>
        <argsstring></argsstring>
        <name>m_Pipeline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="134" column="20" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a8e97d56daed8df35383671f7cba25c80" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::pipeline&gt; core::ivk::material_t::m_Bound</definition>
        <argsstring></argsstring>
        <name>m_Bound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="135" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1material__t_1a74f1b98d4209cb29da6ee23722968eba" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::ivk::material_t::m_IsValid</definition>
        <argsstring></argsstring>
        <name>m_IsValid</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="138" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a16c6e27f1d805645ffd210d3ca7cbb5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>material_t::material_t</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::resource::handle&lt; core::ivk::context &gt; context, core::resource::handle&lt; core::data::material_t &gt; data, core::resource::handle&lt; core::ivk::pipeline_cache &gt; pipelineCache, core::resource::handle&lt; core::ivk::buffer_t &gt; materialBuffer)</argsstring>
        <name>material_t</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1context" kindref="compound">core::ivk::context</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline__cache" kindref="compound">core::ivk::pipeline_cache</ref> &gt;</type>
          <declname>pipelineCache</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1buffer__t" kindref="compound">core::ivk::buffer_t</ref> &gt;</type>
          <declname>materialBuffer</declname>
        </param>
        <briefdescription>
<para>the constructor that will create and bind the necesary resources to create a valid pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cache</parametername>
</parameternamelist>
<parameterdescription>
<para>resource cache that is constructing this material. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metaData</parametername>
</parameternamelist>
<parameterdescription>
<para>metadata associated with the material. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metaFile</parametername>
</parameternamelist>
<parameterdescription>
<para>metafile associated with the material&apos;s instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>a handle to a graphics context (needs to be valid and loaded) which will own the material. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the material data this instance will be based on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pipelineCache</parametername>
</parameternamelist>
<parameterdescription>
<para>the cache this instance can request a pipeline from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">materialBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a GPU buffer that can be used by this instance to upload data to (if needed). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="52" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="24" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a8e7da793fdeada04085afe588fdc3de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::material_t::material_t</definition>
        <argsstring>()=delete</argsstring>
        <name>material_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1aad2c109e4260896c5a3aadbc5b166947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>material_t::~material_t</definition>
        <argsstring>()</argsstring>
        <name>~material_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="60" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a00420fb5d60b46e6f776c246baa916ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::material_t::material_t</definition>
        <argsstring>(const material_t &amp;)=delete</argsstring>
        <name>material_t</name>
        <param>
          <type>const <ref refid="classcore_1_1ivk_1_1material__t" kindref="compound">material_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1af70ffcdd104d629abfec514c6d81ebff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::material_t::material_t</definition>
        <argsstring>(material_t &amp;&amp;)=delete</argsstring>
        <name>material_t</name>
        <param>
          <type><ref refid="classcore_1_1ivk_1_1material__t" kindref="compound">material_t</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a15cf4e736ba0ef558afb6d392f6e6b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1ivk_1_1material__t" kindref="compound">material_t</ref> &amp;</type>
        <definition>material_t&amp; core::ivk::material_t::operator=</definition>
        <argsstring>(const material_t &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcore_1_1ivk_1_1material__t" kindref="compound">material_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="63" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a7737e6a5732a85f68c739297684ffa02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1ivk_1_1material__t" kindref="compound">material_t</ref> &amp;</type>
        <definition>material_t&amp; core::ivk::material_t::operator=</definition>
        <argsstring>(material_t &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcore_1_1ivk_1_1material__t" kindref="compound">material_t</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="64" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a7f94c9319f996690bd19b1df8b299526" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
        <definition>core::resource::handle&lt; core::data::material_t &gt; material_t::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>returns a handle to the material data used to construct this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>when editing the material or the data after construction, this value will be out of sync with the runtime <ref refid="classcore_1_1ivk_1_1material__t" kindref="compound">ivk::material_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="69" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a0f05c71f5b90524760861509d3e8b7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool material_t::bind_pipeline</definition>
        <argsstring>(vk::CommandBuffer cmdBuffer, core::resource::handle&lt; core::ivk::framebuffer_t &gt; framebuffer, uint32_t drawIndex)</argsstring>
        <name>bind_pipeline</name>
        <param>
          <type>vk::CommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1framebuffer__t" kindref="compound">core::ivk::framebuffer_t</ref> &gt;</type>
          <declname>framebuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawIndex</declname>
        </param>
        <briefdescription>
<para>prepares the material for rendering by binding the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>only call this in the context of recording the draw call. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cmdBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the command buffer you&apos;ll be recording to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">framebuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the framebuffer the pipeline will be bound to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">drawIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to be set in the push constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>drawindex is a temporary hack to support instancing. a generic solution should be sought after. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="86" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="191" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a24d81e30828337c0e0a88f408d42fc8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool material_t::bind_pipeline</definition>
        <argsstring>(vk::CommandBuffer cmdBuffer, core::resource::handle&lt; core::ivk::swapchain &gt; swapchain, uint32_t drawIndex)</argsstring>
        <name>bind_pipeline</name>
        <param>
          <type>vk::CommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1swapchain" kindref="compound">core::ivk::swapchain</ref> &gt;</type>
          <declname>swapchain</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawIndex</declname>
        </param>
        <briefdescription>
<para>prepares the material for rendering by binding the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>only call this in the context of recording the draw call. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cmdBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the command buffer you&apos;ll be recording to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>the swapchain the pipeline will be bound to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">drawIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to be set in the push constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="95" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="219" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a637a17a0cd2a93bfc19277dd86ad29b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void material_t::bind_material_instance_data</definition>
        <argsstring>(core::resource::handle&lt; core::ivk::buffer_t &gt; buffer, memory::segment segment)</argsstring>
        <name>bind_material_instance_data</name>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1buffer__t" kindref="compound">core::ivk::buffer_t</ref> &gt;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref></type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="99" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1afa45db8e5e5d4f15196ae371280d9712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool material_t::bind_instance_data</definition>
        <argsstring>(uint32_t binding, uint32_t offset)</argsstring>
        <name>bind_instance_data</name>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="100" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="248" bodyend="259"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a71d7ab717f7c92949497ade072d405e4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1shader" kindref="compound">core::ivk::shader</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; core::resource::handle&lt; core::ivk::shader &gt; &gt; &amp; material_t::shaders</definition>
        <argsstring>() const</argsstring>
        <name>shaders</name>
        <briefdescription>
<para>returns all the shaders that are being used right now by this material. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="73" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a55cc696dedba0a29ed5a9b316d0a591f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::pair&lt; uint32_t, <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1texture__t" kindref="compound">core::ivk::texture_t</ref> &gt; &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; std::pair&lt; uint32_t, core::resource::handle&lt; core::ivk::texture_t &gt; &gt; &gt; &amp; material_t::textures</definition>
        <argsstring>() const</argsstring>
        <name>textures</name>
        <briefdescription>
<para>returns all currently used textures and their binding slots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="75" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1ae56f0f8d44581b8a9f69454edbb49880" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::pair&lt; uint32_t, <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1sampler__t" kindref="compound">core::ivk::sampler_t</ref> &gt; &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; std::pair&lt; uint32_t, core::resource::handle&lt; core::ivk::sampler_t &gt; &gt; &gt; &amp; material_t::samplers</definition>
        <argsstring>() const</argsstring>
        <name>samplers</name>
        <briefdescription>
<para>returns all currently used samplers and their binding slots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="77" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1adc46c8eb0e6057aa90e41ddab19f9332" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> &gt;</type>
        <definition>core::resource::handle&lt; pipeline &gt; material_t::get</definition>
        <argsstring>(core::resource::handle&lt; core::ivk::framebuffer_t &gt; framebuffer)</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1framebuffer__t" kindref="compound">core::ivk::framebuffer_t</ref> &gt;</type>
          <declname>framebuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pipeline this material instance uses for the given framebuffer.</para>
</simplesect>
tries to find, and return a <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> that can satisfy the requirements of this material. In case none is present, then one will be created instead. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">framebuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the framebuffer to bind to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="107" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="163" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1material__t_1a354678c22c2d5e1307ee3c4d05ea1cad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> &gt;</type>
        <definition>core::resource::handle&lt; pipeline &gt; material_t::get</definition>
        <argsstring>(core::resource::handle&lt; core::ivk::swapchain &gt; swapchain)</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1swapchain" kindref="compound">core::ivk::swapchain</ref> &gt;</type>
          <declname>swapchain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pipeline this material instance uses for the given framebuffer.</para>
</simplesect>
tries to find, and return a <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">core::ivk::pipeline</ref> that can satisfy the requirements of this material. In case none is present, then one will be created instead. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>the swapchain to bind to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="113" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp" bodystart="177" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class that creates a bindable collection of resources that can be used in conjuction with a surface to render. </para>
    </briefdescription>
    <detaileddescription>
<para>The material class is a container of various resources that can, together, describe what should happen to a surface in the render pipeline on the GPU, and what is all needed. The material class also can contain instance data and will manage this for you. Together with a <ref refid="classcore_1_1ivk_1_1geometry__t" kindref="compound">core::ivk::geometry_t</ref>, this describes all the resources you need to render something on screen. </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" line="42" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/material.hpp" bodystart="41" bodyend="139"/>
    <listofallmembers>
      <member refid="classcore_1_1ivk_1_1material__t_1afa45db8e5e5d4f15196ae371280d9712" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>bind_instance_data</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a637a17a0cd2a93bfc19277dd86ad29b0" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>bind_material_instance_data</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a0f05c71f5b90524760861509d3e8b7a1" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>bind_pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a24d81e30828337c0e0a88f408d42fc8f" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>bind_pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a7f94c9319f996690bd19b1df8b299526" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>data</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1adc46c8eb0e6057aa90e41ddab19f9332" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>get</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a354678c22c2d5e1307ee3c4d05ea1cad" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>get</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a8e97d56daed8df35383671f7cba25c80" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_Bound</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a3eff7c79ecbb8ccce90470e6d40f3858" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_Context</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a3c8edea8d2a9a5e654e68983c143bd73" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_Data</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1ab31f26fb41c3a2a2fd8132bd2633521f" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_DynamicOffsets</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a9b92cf1dfe33b7c9aedfaad4e7e06615" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_DynamicOffsetsIndices</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a74f1b98d4209cb29da6ee23722968eba" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_IsValid</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a82c1647785991c672a1d10715fa71d52" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_MaterialBuffer</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a92bac3edbef71d791077ecac008541f3" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_MaterialBufferBinding</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a6c10945d00bec32d78ac2d49dd57b16b" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_MaterialBufferRange</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a50a99d5eddcf50c471ca8d0fa9fdce30" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_Pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a92330e5d7ccae743b466b84bd9fc8a33" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_PipelineCache</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a747ba6e8ac82528902015f5254558364" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_Samplers</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a7f0629239bd082ac659b03e56c73f2bf" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_Shaders</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1aeddd6e85ed9664e753e343cf767ba51b" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_Textures</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a702ed4df52209db079483e3465772902" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>m_UID</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a16c6e27f1d805645ffd210d3ca7cbb5b" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>material_t</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a8e7da793fdeada04085afe588fdc3de7" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>material_t</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a00420fb5d60b46e6f776c246baa916ab" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>material_t</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1af70ffcdd104d629abfec514c6d81ebff" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>material_t</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a15cf4e736ba0ef558afb6d392f6e6b24" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>operator=</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a7737e6a5732a85f68c739297684ffa02" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>operator=</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1ae56f0f8d44581b8a9f69454edbb49880" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>samplers</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a71d7ab717f7c92949497ade072d405e4" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>shaders</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1a55cc696dedba0a29ed5a9b316d0a591f" prot="private" virt="non-virtual"><scope>core::ivk::material_t</scope><name>textures</name></member>
      <member refid="classcore_1_1ivk_1_1material__t_1aad2c109e4260896c5a3aadbc5b166947" prot="public" virt="non-virtual"><scope>core::ivk::material_t</scope><name>~material_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
