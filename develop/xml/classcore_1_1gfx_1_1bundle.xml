<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1gfx_1_1bundle" kind="class" language="C++" prot="public" final="yes">
    <compoundname>core::gfx::bundle</compoundname>
    <includes refid="gfx_2bundle_8hpp" local="no">bundle.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcore_1_1gfx_1_1bundle_1a1b1adc976c31f139b8d950bb7ccb4544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class core::ivk::drawpass</definition>
        <argsstring></argsstring>
        <name>core::ivk::drawpass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="51" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classcore_1_1gfx_1_1bundle_1acd2398199c243c58ca5210dad75e43a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class core::igles::drawpass</definition>
        <argsstring></argsstring>
        <name>core::igles::drawpass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="52" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1gfx_1_1bundle_1a87efa3faf572f154dfdba4b2e090cccc" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1gfx_1_1details_1_1instance_1_1data" kindref="compound">core::gfx::details::instance::data</ref></type>
        <definition>core::gfx::details::instance::data core::gfx::bundle::m_InstanceData</definition>
        <argsstring></argsstring>
        <name>m_InstanceData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="203" column="36" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1gfx_1_1bundle_1a35df5c0e128ecd65de801e14dd357a35" prot="private" static="no" mutable="no">
        <type>psl::array&lt; <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::material_t &gt; &gt;</type>
        <definition>psl::array&lt;core::resource::handle&lt;core::gfx::material_t&gt; &gt; core::gfx::bundle::m_Materials</definition>
        <argsstring></argsstring>
        <name>m_Materials</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="205" column="12" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1gfx_1_1bundle_1a20afcf7064f5e1ee7bc28d259440160f" prot="private" static="no" mutable="no">
        <type>psl::array&lt; uint32_t &gt;</type>
        <definition>psl::array&lt;uint32_t&gt; core::gfx::bundle::m_Layers</definition>
        <argsstring></argsstring>
        <name>m_Layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="206" column="12" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1gfx_1_1bundle_1aa77678bc2f5888b333cfe2b7ea8d3616" prot="private" static="no" mutable="no">
        <type><ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref></type>
        <definition>psl::UID core::gfx::bundle::m_UID</definition>
        <argsstring></argsstring>
        <name>m_UID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="207" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1gfx_1_1bundle_1a6dd6d9f7d0647b08c9f39b8ce40bae73" prot="private" static="no" mutable="no">
        <type>core::resource::cache_t &amp;</type>
        <definition>core::resource::cache_t&amp; core::gfx::bundle::m_Cache</definition>
        <argsstring></argsstring>
        <name>m_Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="208" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1gfx_1_1bundle_1a26094b1056e7a37873fc2ffcea861423" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::material_t &gt;</type>
        <definition>core::resource::handle&lt;core::gfx::material_t&gt; core::gfx::bundle::m_Bound</definition>
        <argsstring></argsstring>
        <name>m_Bound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="210" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1gfx_1_1bundle_1a7b24089628ce4e1f6d86f561f77cdb23" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::buffer_t &gt;</type>
        <definition>core::resource::handle&lt;core::gfx::buffer_t&gt; core::gfx::bundle::m_MaterialBuffer</definition>
        <argsstring></argsstring>
        <name>m_MaterialBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="211" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a5dbafa6be163c24d57f8f16eb235f5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>bundle::bundle</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::resource::handle&lt; core::gfx::buffer_t &gt; vertexBuffer, core::resource::handle&lt; core::gfx::shader_buffer_binding &gt; materialBuffer)</argsstring>
        <name>bundle</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::buffer_t &gt;</type>
          <declname>vertexBuffer</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::shader_buffer_binding &gt;</type>
          <declname>materialBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="60" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="13" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a372faa1665dc700e51db7aada75a3598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::gfx::bundle::~bundle</definition>
        <argsstring>()=default</argsstring>
        <name>~bundle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1ab4f229908c86e56601f52e3293a7a081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::gfx::bundle::bundle</definition>
        <argsstring>(const bundle &amp;)=delete</argsstring>
        <name>bundle</name>
        <param>
          <type>const <ref refid="classcore_1_1gfx_1_1bundle" kindref="compound">bundle</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a1bdcc739b813509785c82eaba143fa90" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>core::gfx::bundle::bundle</definition>
        <argsstring>(bundle &amp;&amp;) noexcept=delete</argsstring>
        <name>bundle</name>
        <param>
          <type><ref refid="classcore_1_1gfx_1_1bundle" kindref="compound">bundle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1ad0e53fe7c5f2af958fd796c6e0682550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1gfx_1_1bundle" kindref="compound">bundle</ref> &amp;</type>
        <definition>bundle&amp; core::gfx::bundle::operator=</definition>
        <argsstring>(const bundle &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcore_1_1gfx_1_1bundle" kindref="compound">bundle</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="69" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1abc311a8fab1b16c0bcc69a7ed496118c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classcore_1_1gfx_1_1bundle" kindref="compound">bundle</ref> &amp;</type>
        <definition>bundle&amp; core::gfx::bundle::operator=</definition>
        <argsstring>(bundle &amp;&amp;) noexcept=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcore_1_1gfx_1_1bundle" kindref="compound">bundle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="70" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a8b537d1d8f389ba6508f60cab5cc5347" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::material_t &gt; &gt;</type>
        <definition>std::optional&lt; core::resource::handle&lt; core::gfx::material_t &gt; &gt; bundle::get</definition>
        <argsstring>(uint32_t renderlayer) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>uint32_t</type>
          <declname>renderlayer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="75" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="25" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1ae48a9100b0825fd55f1ac1b9bd3a75db" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bundle::has</definition>
        <argsstring>(uint32_t renderlayer) const noexcept</argsstring>
        <name>has</name>
        <param>
          <type>uint32_t</type>
          <declname>renderlayer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="76" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a74b5fa457993ac6514d9a1d05e1dbe93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bundle::set_material</definition>
        <argsstring>(core::resource::handle&lt; core::gfx::material_t &gt; material, std::optional&lt; uint32_t &gt; render_layer_override=std::nullopt)</argsstring>
        <name>set_material</name>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::material_t &gt;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>std::optional&lt; uint32_t &gt;</type>
          <declname>render_layer_override</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>assigns a material to the bundle, with optional render_layer </para>
        </briefdescription>
        <detaileddescription>
<para>Assigns a material to this bundle. If no render_layer_override is provided, the materials default value will be used instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="81" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="40" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1accfda78e99d20d100eb0cd4a142294bc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>psl::array&lt; uint32_t &gt;</type>
        <definition>psl::array&lt; uint32_t &gt; bundle::materialIndices</definition>
        <argsstring>(uint32_t begin, uint32_t end) const noexcept</argsstring>
        <name>materialIndices</name>
        <param>
          <type>uint32_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="88" column="12" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1ac1df415a8cb92b185bea3efd8d589ade" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bundle::bind_material</definition>
        <argsstring>(uint32_t renderlayer) noexcept</argsstring>
        <name>bind_material</name>
        <param>
          <type>uint32_t</type>
          <declname>renderlayer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="89" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="75" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a6780869bcc5c2f3092c5c58c7684f4b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::material_t &gt;</type>
        <definition>core::resource::handle&lt;core::gfx::material_t&gt; core::gfx::bundle::bound</definition>
        <argsstring>() const noexcept</argsstring>
        <name>bound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="91" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a5fae881382769ecad6e0d9a130399df5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t bundle::instances</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::geometry_t &gt; geometry) const noexcept</argsstring>
        <name>instances</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::geometry_t &gt;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>returns the instance count currently used for the given piece of geometry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>UID to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="98" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a71c4af20ca5d082c4b774979967979e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; uint32_t, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; uint32_t, uint32_t &gt; &gt; bundle::instantiate</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::geometry_t &gt; geometry, uint32_t count=1, geometry_type type=geometry_type::STATIC)</argsstring>
        <name>instantiate</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::geometry_t &gt;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>geometry_type</type>
          <declname>type</declname>
          <defval>geometry_type::STATIC</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="99" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1aba04dfd27354415184063649101f21dc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t bundle::size</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::geometry_t &gt; geometry) const noexcept</argsstring>
        <name>size</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::geometry_t &gt;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>returns how many instances are currently active for the given geometry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>UID to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="105" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a9881df7d25823b24f5fafa91ca04f08f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bundle::has</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::geometry_t &gt; geometry) const noexcept</argsstring>
        <name>has</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::geometry_t &gt;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>returns if there are <emphasis>any</emphasis> active instances for the given geometry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>UID to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="109" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1ac70777d171058331ef47376935c6d337" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bundle::release</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::geometry_t &gt; geometry, uint32_t id) noexcept</argsstring>
        <name>release</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::geometry_t &gt;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>release the instance associated with the given ID and geometry </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>target UID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>instance ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case the instance was successfully transitioned from active to deactivated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="115" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a8c9ffb92c43a14255b715799be07b137" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bundle::release_all</definition>
        <argsstring>(std::optional&lt; geometry_type &gt; type={}) noexcept</argsstring>
        <name>release_all</name>
        <param>
          <type>std::optional&lt; geometry_type &gt;</type>
          <declname>type</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>release all instance data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>optionally target only static or dynamic data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="119" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a25a25b3f113952ecc8b3d51341953cfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool core::gfx::bundle::set</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::geometry_t &gt; geometry, uint32_t id, psl::string_view name, const psl::array&lt; T &gt; &amp;values)</argsstring>
        <name>set</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::geometry_t &gt;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>psl::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const psl::array&lt; T &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>set instance data for the given instance (and range) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>target UID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>first instance ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the buffer (present in the shader) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>the values to set, where the size + id indicates the end of the range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the geometry was found, all instances were present, and the upload dispatched. The upload is async. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="129" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="129" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a21271d369bc57cbbac1ece32d2653485" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool core::gfx::bundle::set</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::material_t &gt; material, const T &amp;value, size_t offset=0)</argsstring>
        <name>set</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::material_t &gt;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="147" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1af5f22e7a7d8392e91f7007e92541ff51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool core::gfx::bundle::set</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::material_t &gt; material, psl::string_view name, const T &amp;value)</argsstring>
        <name>set</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::material_t &gt;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>psl::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="155" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="155" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a6c051e57a9e13bb372e9f7c7e2d749f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool core::gfx::bundle::set</definition>
        <argsstring>(psl::string_view name, const T &amp;value)</argsstring>
        <name>set</name>
        <param>
          <type>psl::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="168" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="168" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1ab9db353b6e389288ac57d8525c90b069" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bundle::set</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::geometry_t &gt; geometry, uint32_t id, memory::segment segment, uint32_t size_of_element, const void *data, size_t size, size_t count=1)</argsstring>
        <name>set</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::geometry_t &gt;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref></type>
          <declname>segment</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size_of_element</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="189" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1bundle_1a0e7fb291fa73bb87806231f90a3bea13" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bundle::set</definition>
        <argsstring>(core::resource::tag&lt; core::gfx::material_t &gt; material, const void *data, size_t size, size_t offset)</argsstring>
        <name>set</name>
        <param>
          <type>core::resource::tag&lt; core::gfx::material_t &gt;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="197" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp" bodystart="129" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>\detail Bundles acts as a collection of core::gfx::materials, which are associated with a specific renderID (ordered from lowest to highest). These renderID&apos;s are what core::gfx::drawpass will use to decide which materials to bind for the current pass when rendering the associated geometry.</para>
<para>Aside from that, bundles also contain the abstraction of instance data associated with a material-geometry combination. This allows geometry to share instance related data (such as positions, or colors) across different &apos;core::gfx::material_t&apos;s and different &apos;core::gfx::pass&apos;es. As example sharing instance position data between the depth-only prepass, and normal render pass. </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" line="50" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/bundle.hpp" bodystart="49" bodyend="212"/>
    <listofallmembers>
      <member refid="classcore_1_1gfx_1_1bundle_1ac1df415a8cb92b185bea3efd8d589ade" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>bind_material</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a6780869bcc5c2f3092c5c58c7684f4b5" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>bound</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a5dbafa6be163c24d57f8f16eb235f5d5" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>bundle</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1ab4f229908c86e56601f52e3293a7a081" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>bundle</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a1bdcc739b813509785c82eaba143fa90" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>bundle</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1acd2398199c243c58ca5210dad75e43a9" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>core::igles::drawpass</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a1b1adc976c31f139b8d950bb7ccb4544" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>core::ivk::drawpass</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a8b537d1d8f389ba6508f60cab5cc5347" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>get</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1ae48a9100b0825fd55f1ac1b9bd3a75db" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>has</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a9881df7d25823b24f5fafa91ca04f08f" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>has</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a5fae881382769ecad6e0d9a130399df5" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>instances</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a71c4af20ca5d082c4b774979967979e5" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>instantiate</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a26094b1056e7a37873fc2ffcea861423" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>m_Bound</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a6dd6d9f7d0647b08c9f39b8ce40bae73" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>m_Cache</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a87efa3faf572f154dfdba4b2e090cccc" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>m_InstanceData</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a20afcf7064f5e1ee7bc28d259440160f" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>m_Layers</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a7b24089628ce4e1f6d86f561f77cdb23" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>m_MaterialBuffer</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a35df5c0e128ecd65de801e14dd357a35" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>m_Materials</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1aa77678bc2f5888b333cfe2b7ea8d3616" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>m_UID</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1accfda78e99d20d100eb0cd4a142294bc" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>materialIndices</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1ad0e53fe7c5f2af958fd796c6e0682550" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>operator=</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1abc311a8fab1b16c0bcc69a7ed496118c" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>operator=</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1ac70777d171058331ef47376935c6d337" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>release</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a8c9ffb92c43a14255b715799be07b137" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>release_all</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a25a25b3f113952ecc8b3d51341953cfb" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>set</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a21271d369bc57cbbac1ece32d2653485" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>set</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1af5f22e7a7d8392e91f7007e92541ff51" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>set</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a6c051e57a9e13bb372e9f7c7e2d749f3" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>set</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1ab9db353b6e389288ac57d8525c90b069" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>set</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a0e7fb291fa73bb87806231f90a3bea13" prot="private" virt="non-virtual"><scope>core::gfx::bundle</scope><name>set</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a74b5fa457993ac6514d9a1d05e1dbe93" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>set_material</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1aba04dfd27354415184063649101f21dc" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>size</name></member>
      <member refid="classcore_1_1gfx_1_1bundle_1a372faa1665dc700e51db7aada75a3598" prot="public" virt="non-virtual"><scope>core::gfx::bundle</scope><name>~bundle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
