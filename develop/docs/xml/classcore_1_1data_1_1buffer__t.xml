<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1data_1_1buffer__t" kind="class" language="C++" prot="public">
    <compoundname>core::data::buffer_t</compoundname>
    <includes refid="core_2inc_2data_2buffer_8hpp" local="no">buffer.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcore_1_1data_1_1buffer__t_1ae6e4002148765f114da9fe1b5c64547d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class psl::serialization::accessor</definition>
        <argsstring></argsstring>
        <name>psl::serialization::accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="23" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcore_1_1data_1_1buffer__t_1a1072d6b78429bee652fb2b04ca3af6a7" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr psl::string8::view</type>
        <definition>constexpr psl::string8::view core::data::buffer_t::serialization_name</definition>
        <argsstring></argsstring>
        <name>serialization_name</name>
        <initializer>{&quot;BUFFER&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="125" column="37" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1data_1_1buffer__t_1a79d56aa81a1172774cf92b3173d2967b" prot="private" static="no" mutable="no">
        <type><ref refid="classmemory_1_1region" kindref="compound">memory::region</ref></type>
        <definition>memory::region core::data::buffer_t::m_Region</definition>
        <argsstring></argsstring>
        <name>m_Region</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="127" column="16" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1buffer__t_1a5b2238dd2aebb4b38ad1290ba47e4b16" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> &gt;</type>
        <definition>std::vector&lt;memory::segment&gt; core::data::buffer_t::m_Segments</definition>
        <argsstring></argsstring>
        <name>m_Segments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="128" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1buffer__t_1a0dc54974043edfa1572b199e5102da77" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;TRANSIENT&quot;, bool &gt;</type>
        <definition>psl::serialization::property&lt;&quot;TRANSIENT&quot;, bool&gt; core::data::buffer_t::m_Transient</definition>
        <argsstring></argsstring>
        <name>m_Transient</name>
        <initializer>{
		  false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="129" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1buffer__t_1ac3947a035233d779e24c3215f62993de" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;WRITE FREQUENCY&quot;, core::gfx::memory_write_frequency &gt;</type>
        <definition>psl::serialization::property&lt;&quot;WRITE FREQUENCY&quot;, core::gfx::memory_write_frequency&gt; core::data::buffer_t::m_WriteFrequency</definition>
        <argsstring></argsstring>
        <name>m_WriteFrequency</name>
        <initializer>{
		  core::gfx::memory_write_frequency::per_frame}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="131" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1buffer__t_1a11e13994560dbdf151f920be81d4c9b1" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;USAGE&quot;, core::gfx::memory_usage &gt;</type>
        <definition>psl::serialization::property&lt;&quot;USAGE&quot;, core::gfx::memory_usage&gt; core::data::buffer_t::m_Usage</definition>
        <argsstring></argsstring>
        <name>m_Usage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="134" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1buffer__t_1a52a4e4edaac31a5c300474804db8ed59" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;PROPERTIES&quot;, core::gfx::memory_property &gt;</type>
        <definition>psl::serialization::property&lt;&quot;PROPERTIES&quot;, core::gfx::memory_property&gt; core::data::buffer_t::m_MemoryPropertyFlags</definition>
        <argsstring></argsstring>
        <name>m_MemoryPropertyFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="135" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a6ecbfbe0bdf4f677a834dc2e61a3e8b1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>buffer_t::buffer_t</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::gfx::memory_usage usage, core::gfx::memory_property memoryPropertyFlags, memory::region &amp;&amp;memory_region) noexcept</argsstring>
        <name>buffer_t</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type>core::gfx::memory_usage</type>
          <declname>usage</declname>
        </param>
        <param>
          <type>core::gfx::memory_property</type>
          <declname>memoryPropertyFlags</declname>
        </param>
        <param>
          <type><ref refid="classmemory_1_1region" kindref="compound">memory::region</ref> &amp;&amp;</type>
          <declname>memory_region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>will do the minimal setup needed, no allocations happen at this point yet. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cache</parametername>
</parameternamelist>
<parameterdescription>
<para>which cache this object has been allocated in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metaData</parametername>
</parameternamelist>
<parameterdescription>
<para>the metadata that is assigned to this object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metaFile</parametername>
</parameternamelist>
<parameterdescription>
<para>the metafile associated with this instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usage</parametername>
</parameternamelist>
<parameterdescription>
<para>the usage flags that signify how the resource should be used by the GPU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memoryPropertyFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>what are the properties of the memory (i.e. where does it live) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memory_region</parametername>
</parameternamelist>
<parameterdescription>
<para>what is the owning region of this memory. Note that this parameter also will dictate the size and alignment of the resource. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="34" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="7" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1af2767cb7e3ecdb7e5d01cd6621d896a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>buffer_t::~buffer_t</definition>
        <argsstring>()</argsstring>
        <name>~buffer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="41" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1acd3f160c7b55c16ee2b1b3839fbf4ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::data::buffer_t::buffer_t</definition>
        <argsstring>(const buffer_t &amp;)=delete</argsstring>
        <name>buffer_t</name>
        <param>
          <type>const <ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">buffer_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a7b81e3083e237e3f13955b3e65131fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">buffer_t</ref> &amp;</type>
        <definition>buffer_t&amp; core::data::buffer_t::operator=</definition>
        <argsstring>(const buffer_t &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">buffer_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="49" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a03aae6fb887b6b8a265ae5cdac8be090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">buffer_t</ref> &amp;</type>
        <definition>buffer_t&amp; core::data::buffer_t::operator=</definition>
        <argsstring>(buffer_t &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">buffer_t</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="50" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a6c7bd6eef91114b0a1ce1cc9fdc71eff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t buffer_t::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the total size in the <ref refid="classmemory_1_1region" kindref="compound">memory::region</ref> that this buffer occupies. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="53" column="8" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a553b45255b7368b0c0c75500721e2f4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>core::gfx::memory_usage</type>
        <definition>core::gfx::memory_usage buffer_t::usage</definition>
        <argsstring>() const</argsstring>
        <name>usage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the core::gfx::memory_usage of this instance, showing the type of resource this is for the GPU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="56" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1abd840f9c10fc833828c2e7decc8bafa6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>core::gfx::memory_property</type>
        <definition>core::gfx::memory_property buffer_t::memoryPropertyFlags</definition>
        <argsstring>() const</argsstring>
        <name>memoryPropertyFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the core::gfx::memory_property, so you know where the data lives. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="59" column="28" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a436b80bc459cd6a9dae53f8ed9d06f5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmemory_1_1region" kindref="compound">memory::region</ref> &amp;</type>
        <definition>const memory::region &amp; buffer_t::region</definition>
        <argsstring>() const</argsstring>
        <name>region</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the associated <ref refid="classmemory_1_1region" kindref="compound">memory::region</ref>, where the data lives. </para>
</simplesect>
<simplesect kind="note"><para>the data can exist &quot;virtually&quot; as well, for example in the case this is a pure GPU resource. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="63" column="22" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a74beda2e5defc0253f4c60eefe270634" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; memory::segment &gt; &amp; buffer_t::segments</definition>
        <argsstring>() const</argsstring>
        <name>segments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>all committed memory::segments in the <ref refid="classmemory_1_1region" kindref="compound">memory::region</ref>. Using this you can calculate fragmentation, and allocated size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="67" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1aa7cc819b973c19ab38cafdfbf8d04b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> &gt;</type>
        <definition>std::optional&lt; memory::segment &gt; buffer_t::allocate</definition>
        <argsstring>(size_t size)</argsstring>
        <name>allocate</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Will try to allocate a new <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> of <emphasis>atleast</emphasis> the given size. This method will adhere to the alignment requirements of the underlaying <ref refid="classmemory_1_1region" kindref="compound">memory::region</ref>.</para>
<para><simplesect kind="return"><para>optionally, a new allocated <ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> of <emphasis>atleast</emphasis> the given size. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum expected size, this will auto-align/grow to the alignment requirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="74" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a01649f11bfc58ff4dce167f39c4a5ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool buffer_t::deallocate</definition>
        <argsstring>(memory::segment &amp;segment)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case the deallocation was successful. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment</parametername>
</parameternamelist>
<parameterdescription>
<para>the target segment to deallocate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><emphasis>segment</emphasis> gets invalidated on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="79" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="29" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1ad47d314429786cd24045b7a3122f281e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool buffer_t::transient</definition>
        <argsstring>() const noexcept</argsstring>
        <name>transient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="81" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1ac5beb788d82e8f7b1a53c72db01b6a2d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void buffer_t::transient</definition>
        <argsstring>(bool value) noexcept</argsstring>
        <name>transient</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="82" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a0e526f1c1c67885dbdd2a9d661320a22" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>core::gfx::memory_write_frequency</type>
        <definition>core::gfx::memory_write_frequency buffer_t::write_frequency</definition>
        <argsstring>() const noexcept</argsstring>
        <name>write_frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="83" column="35" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1a785435e7d51211acd94244412fc17879" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void buffer_t::write_frequency</definition>
        <argsstring>(core::gfx::memory_write_frequency value) noexcept</argsstring>
        <name>write_frequency</name>
        <param>
          <type>core::gfx::memory_write_frequency</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="84" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp" bodystart="67" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1data_1_1buffer__t_1af56305e116490fd6458ccb3ccb8c6fc7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void core::data::buffer_t::serialize</definition>
        <argsstring>(S &amp;serializer)</argsstring>
        <name>serialize</name>
        <param>
          <type>S &amp;</type>
          <declname>serializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="88" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="88" bodyend="123"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>container class for GPU data. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">core::data::buffer_t</ref> is a data container for anything that will be uploaded to the GPU. This means that this can not contain any complex types (such as indirections). <ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">core::data::buffer_t</ref> can be incorrectly set up when giving incompatible <ref refid="classmemory_1_1region" kindref="compound">memory::region</ref> bundled with core::gfx::memory_usage. <simplesect kind="note"><para>the <ref refid="classmemory_1_1region" kindref="compound">memory::region</ref> you pass to this object will also dictate the <bold>size</bold> and <bold>alignment</bold> requirements of this specific resource on the GPU. </para>
</simplesect>
<xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>figure out a way around incompatible <ref refid="classcore_1_1data_1_1buffer__t" kindref="compound">core::data::buffer_t</ref> setups, perhaps by using structs to construct the class. </para>
</xrefdescription></xrefsect><simplesect kind="author"><para>Jessy De Lannoit </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" line="22" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp" bodystart="21" bodyend="136"/>
    <listofallmembers>
      <member refid="classcore_1_1data_1_1buffer__t_1aa7cc819b973c19ab38cafdfbf8d04b16" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>allocate</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a6ecbfbe0bdf4f677a834dc2e61a3e8b1" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>buffer_t</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1acd3f160c7b55c16ee2b1b3839fbf4ef4" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>buffer_t</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a01649f11bfc58ff4dce167f39c4a5ff7" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>deallocate</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a52a4e4edaac31a5c300474804db8ed59" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>m_MemoryPropertyFlags</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a79d56aa81a1172774cf92b3173d2967b" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>m_Region</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a5b2238dd2aebb4b38ad1290ba47e4b16" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>m_Segments</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a0dc54974043edfa1572b199e5102da77" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>m_Transient</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a11e13994560dbdf151f920be81d4c9b1" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>m_Usage</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1ac3947a035233d779e24c3215f62993de" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>m_WriteFrequency</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1abd840f9c10fc833828c2e7decc8bafa6" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>memoryPropertyFlags</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a7b81e3083e237e3f13955b3e65131fd1" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>operator=</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a03aae6fb887b6b8a265ae5cdac8be090" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>operator=</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1ae6e4002148765f114da9fe1b5c64547d" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>psl::serialization::accessor</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a436b80bc459cd6a9dae53f8ed9d06f5f" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>region</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a74beda2e5defc0253f4c60eefe270634" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>segments</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a1072d6b78429bee652fb2b04ca3af6a7" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>serialization_name</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1af56305e116490fd6458ccb3ccb8c6fc7" prot="private" virt="non-virtual"><scope>core::data::buffer_t</scope><name>serialize</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a6c7bd6eef91114b0a1ce1cc9fdc71eff" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>size</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1ad47d314429786cd24045b7a3122f281e" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>transient</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1ac5beb788d82e8f7b1a53c72db01b6a2d" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>transient</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a553b45255b7368b0c0c75500721e2f4b" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>usage</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a0e526f1c1c67885dbdd2a9d661320a22" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>write_frequency</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1a785435e7d51211acd94244412fc17879" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>write_frequency</name></member>
      <member refid="classcore_1_1data_1_1buffer__t_1af2767cb7e3ecdb7e5d01cd6621d896a3" prot="public" virt="non-virtual"><scope>core::data::buffer_t</scope><name>~buffer_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
