<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1gfx_1_1enum__flag" kind="class" language="C++" prot="public">
    <compoundname>core::gfx::enum_flag</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classcore_1_1gfx_1_1enum__flag_1a7d9618a46767307c1041811868ec9e0b" prot="public" static="no">
        <type>std::underlying_type_t&lt; T &gt;</type>
        <definition>using core::gfx::enum_flag&lt; T &gt;::value_type =  std::underlying_type_t&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="47" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1gfx_1_1enum__flag_1a80a4d8672f08fc90af7d906aadc711d4" prot="private" static="no" mutable="no">
        <type>value_type</type>
        <definition>value_type core::gfx::enum_flag&lt; T &gt;::m_Enum</definition>
        <argsstring></argsstring>
        <name>m_Enum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="111" column="12" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1af19ed3b7752f6f6a2d714be0e39400b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>core::gfx::enum_flag&lt; T &gt;::enum_flag</definition>
        <argsstring>(T value)</argsstring>
        <name>enum_flag</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="48" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a8caa8562cba947c83c460c214ab88fea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>core::gfx::enum_flag&lt; T &gt;::enum_flag</definition>
        <argsstring>(value_type value)</argsstring>
        <name>enum_flag</name>
        <param>
          <type>value_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="49" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1aa3353aaaac15c2b21615a14a6f997ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::gfx::enum_flag&lt; T &gt;::~enum_flag</definition>
        <argsstring>()=default</argsstring>
        <name>~enum_flag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a8934b002b635d789836590118c6b0f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::gfx::enum_flag&lt; T &gt;::enum_flag</definition>
        <argsstring>(const enum_flag &amp;)=default</argsstring>
        <name>enum_flag</name>
        <param>
          <type>const enum_flag &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a1ce399c8b27efdcaaafc888b630393a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::gfx::enum_flag&lt; T &gt;::enum_flag</definition>
        <argsstring>(enum_flag &amp;&amp;)=default</argsstring>
        <name>enum_flag</name>
        <param>
          <type>enum_flag &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a2cf5f6157702abb44bdf2e702a254a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator=</definition>
        <argsstring>(const enum_flag &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const enum_flag &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="54" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a4fabbea5140b22d0db78d9bc5603f34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator=</definition>
        <argsstring>(enum_flag &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>enum_flag &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="55" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1ad277b5ab1a66421ac580effa2b981984" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator|=</definition>
        <argsstring>(enum_flag const &amp;rhs) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="57" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1ab4f166a5342afa5ee1c4d649fafc324c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator&amp;=</definition>
        <argsstring>(enum_flag const &amp;rhs) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="63" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a286c7ad172c1f83d1076882a6585fb15" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator^=</definition>
        <argsstring>(enum_flag const &amp;rhs) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="69" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a99bbc78afd86a458595b328258601734" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag</type>
        <definition>enum_flag core::gfx::enum_flag&lt; T &gt;::operator|</definition>
        <argsstring>(enum_flag const &amp;rhs) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="75" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a1f86704a19dddafb4729b0b7824cd45a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag</type>
        <definition>enum_flag core::gfx::enum_flag&lt; T &gt;::operator&amp;</definition>
        <argsstring>(enum_flag const &amp;rhs) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="82" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a11f752bb10a55a1565cedea00f70a3f4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag</type>
        <definition>enum_flag core::gfx::enum_flag&lt; T &gt;::operator^</definition>
        <argsstring>(enum_flag const &amp;rhs) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="89" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a50eefdfa17522510a230ca71b2c51e0f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::gfx::enum_flag&lt; T &gt;::operator==</definition>
        <argsstring>(enum_flag const &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="95" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a45ee55ecb4f84f67614e428f7b8ae69e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::gfx::enum_flag&lt; T &gt;::operator!=</definition>
        <argsstring>(enum_flag const &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>enum_flag const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="96" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a7285c80a64e12368f73f7af0f45e98d3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator|=</definition>
        <argsstring>(T const &amp;rhs) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="98" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a09a25e7e9e0850df4f548032e302f938" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator&amp;=</definition>
        <argsstring>(T const &amp;rhs) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="99" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a9707673fada9ae33631e3c6f61d021fd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag &amp;</type>
        <definition>enum_flag&amp; core::gfx::enum_flag&lt; T &gt;::operator^=</definition>
        <argsstring>(T const &amp;rhs) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="100" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1af25cc80c3165501828fd15db1293fe49" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag</type>
        <definition>enum_flag core::gfx::enum_flag&lt; T &gt;::operator|</definition>
        <argsstring>(T const &amp;rhs) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="101" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a242a0405f199fd00530604136832ade1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag</type>
        <definition>enum_flag core::gfx::enum_flag&lt; T &gt;::operator&amp;</definition>
        <argsstring>(T const &amp;rhs) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="102" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1ab359b75acc63733abc41796fc6c6ee05" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>enum_flag</type>
        <definition>enum_flag core::gfx::enum_flag&lt; T &gt;::operator^</definition>
        <argsstring>(T const &amp;rhs) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="103" column="11" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1af64cbf267e066c66900144e874a57940" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::gfx::enum_flag&lt; T &gt;::operator==</definition>
        <argsstring>(T const &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="104" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a1d7f81ecafbbf621097e28a5389b2a29" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::gfx::enum_flag&lt; T &gt;::operator!=</definition>
        <argsstring>(T const &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="105" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a615dd4a93783fe8716e92676392de5aa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>core::gfx::enum_flag&lt; T &gt;::operator T</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="107" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1gfx_1_1enum__flag_1a8dea3c5e1df190e2ce48bb56b1a6cebb" prot="public" static="no" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>core::gfx::enum_flag&lt; T &gt;::operator value_type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="108" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" line="45" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/gfx/types.hpp" bodystart="44" bodyend="112"/>
    <listofallmembers>
      <member refid="classcore_1_1gfx_1_1enum__flag_1af19ed3b7752f6f6a2d714be0e39400b6" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>enum_flag</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a8caa8562cba947c83c460c214ab88fea" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>enum_flag</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a8934b002b635d789836590118c6b0f71" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>enum_flag</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a1ce399c8b27efdcaaafc888b630393a1" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>enum_flag</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a80a4d8672f08fc90af7d906aadc711d4" prot="private" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>m_Enum</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a615dd4a93783fe8716e92676392de5aa" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator T</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a8dea3c5e1df190e2ce48bb56b1a6cebb" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator value_type</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a45ee55ecb4f84f67614e428f7b8ae69e" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator!=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a1d7f81ecafbbf621097e28a5389b2a29" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator!=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a1f86704a19dddafb4729b0b7824cd45a" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator&amp;</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a242a0405f199fd00530604136832ade1" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator&amp;</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1ab4f166a5342afa5ee1c4d649fafc324c" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator&amp;=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a09a25e7e9e0850df4f548032e302f938" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator&amp;=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a2cf5f6157702abb44bdf2e702a254a97" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a4fabbea5140b22d0db78d9bc5603f34e" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a50eefdfa17522510a230ca71b2c51e0f" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator==</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1af64cbf267e066c66900144e874a57940" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator==</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a11f752bb10a55a1565cedea00f70a3f4" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator^</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1ab359b75acc63733abc41796fc6c6ee05" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator^</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a286c7ad172c1f83d1076882a6585fb15" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator^=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a9707673fada9ae33631e3c6f61d021fd" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator^=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a99bbc78afd86a458595b328258601734" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator|</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1af25cc80c3165501828fd15db1293fe49" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator|</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1ad277b5ab1a66421ac580effa2b981984" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator|=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a7285c80a64e12368f73f7af0f45e98d3" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>operator|=</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1a7d9618a46767307c1041811868ec9e0b" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>value_type</name></member>
      <member refid="classcore_1_1gfx_1_1enum__flag_1aa3353aaaac15c2b21615a14a6f997ff1" prot="public" virt="non-virtual"><scope>core::gfx::enum_flag</scope><name>~enum_flag</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
