<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1data_1_1framebuffer__t" kind="class" language="C++" prot="public" final="yes">
    <compoundname>core::data::framebuffer_t</compoundname>
    <includes refid="data_2framebuffer_8hpp" local="no">framebuffer.hpp</includes>
    <innerclass refid="classcore_1_1data_1_1framebuffer__t_1_1attachment" prot="public">core::data::framebuffer_t::attachment</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcore_1_1data_1_1framebuffer__t_1ae6e4002148765f114da9fe1b5c64547d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class psl::serialization::accessor</definition>
        <argsstring></argsstring>
        <name>psl::serialization::accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="17" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1a7b342837af63bce1ef6a3eabe6107716" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr psl::string8::view</type>
        <definition>constexpr psl::string8::view core::data::framebuffer_t::serialization_name</definition>
        <argsstring></argsstring>
        <name>serialization_name</name>
        <initializer>{&quot;FRAMEBUFFER&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="188" column="37" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="188" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1a3c7039f1d968ab4630722ce4272ae33c" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;ATTACHMENTS&quot;, std::vector&lt; <ref refid="classcore_1_1data_1_1framebuffer__t_1_1attachment" kindref="compound">attachment</ref> &gt; &gt;</type>
        <definition>psl::serialization::property&lt;&quot;ATTACHMENTS&quot;, std::vector&lt;attachment&gt; &gt; core::data::framebuffer_t::m_Attachments</definition>
        <argsstring></argsstring>
        <name>m_Attachments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="190" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1a89f4a7ff025d5604cd2eac251baa4efc" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;SAMPLER&quot;, psl::UID &gt;</type>
        <definition>psl::serialization::property&lt;&quot;SAMPLER&quot;, psl::UID&gt; core::data::framebuffer_t::m_Sampler</definition>
        <argsstring></argsstring>
        <name>m_Sampler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="191" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1a0bde74d9c4e217885c2c20e20010033b" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;WIDTH&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;WIDTH&quot;, uint32_t&gt; core::data::framebuffer_t::m_Width</definition>
        <argsstring></argsstring>
        <name>m_Width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="192" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1a1173a6016112d59d3d4af066380d391c" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;HEIGHT&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;HEIGHT&quot;, uint32_t&gt; core::data::framebuffer_t::m_Height</definition>
        <argsstring></argsstring>
        <name>m_Height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="193" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1a4d242f770c24bdea9bfb6dad45f3a536" prot="private" static="no" mutable="no">
        <type>psl::serialization::property&lt;&quot;FRAMEBUFFER COUNT&quot;, uint32_t &gt;</type>
        <definition>psl::serialization::property&lt;&quot;FRAMEBUFFER COUNT&quot;, uint32_t&gt; core::data::framebuffer_t::m_Count</definition>
        <argsstring></argsstring>
        <name>m_Count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="194" column="30" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1data_1_1framebuffer__t_1a92e7cac5865a8faab23cf01c1d36f990" prot="private" static="no" mutable="no">
        <type>core::resource::cache_t *</type>
        <definition>core::resource::cache_t* core::data::framebuffer_t::m_Cache</definition>
        <argsstring></argsstring>
        <name>m_Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="195" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1a6726c157c40c73f1ca64c87645e6ab6e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>framebuffer_t::framebuffer_t</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, uint32_t width, uint32_t height, uint32_t layers=1u) noexcept</argsstring>
        <name>framebuffer_t</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>layers</declname>
          <defval>1u</defval>
        </param>
        <briefdescription>
<para>basic constructor that sets up the rough outlines of an instance </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>you will still need to set up attachments, etc.. later on. The constructor makes a &quot;valid&quot; instance in the sense that manipulating it will not cause undefined behaviour, but you cannot create a <ref refid="classcore_1_1ivk_1_1framebuffer__t" kindref="compound">core::ivk::framebuffer_t</ref> just yet with this after calling the constructor. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cache</parametername>
</parameternamelist>
<parameterdescription>
<para>signifies in which cache I will be constructed in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metaData</parametername>
</parameternamelist>
<parameterdescription>
<para>the metadata that is assigned to this object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metaFile</parametername>
</parameternamelist>
<parameterdescription>
<para>the metafile associated with this instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width in pixels of this framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height in pixels of this framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">layers</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of layers this framebuffer will have (often referred to as the framebuffer count in the documentation). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="131" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="10" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1a8e7b1547309688df00a850820a516c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
        <definition>const UID &amp; framebuffer_t::add</definition>
        <argsstring>(uint32_t width, uint32_t height, uint32_t layerCount, core::gfx::image::usage usage, core::gfx::clear_value clearValue, core::gfx::attachment descr)</argsstring>
        <name>add</name>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>layerCount</declname>
        </param>
        <param>
          <type>core::gfx::image::usage</type>
          <declname>usage</declname>
        </param>
        <param>
          <type>core::gfx::clear_value</type>
          <declname>clearValue</declname>
        </param>
        <param>
          <type>core::gfx::attachment</type>
          <declname>descr</declname>
        </param>
        <briefdescription>
<para>adds a <ref refid="classcore_1_1data_1_1framebuffer__t_1_1attachment" kindref="compound">core::data::framebuffer_t::attachment</ref> to the current framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the attachment in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the attachment in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">layerCount</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth layers of the attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usage</parametername>
</parameternamelist>
<parameterdescription>
<para>signifies how the image will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clearValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to clear the image with at the start of rendering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descr</parametername>
</parameternamelist>
<parameterdescription>
<para>how the image load op&apos;s etc... will be handled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classcore_1_1data_1_1framebuffer__t_1_1attachment" kindref="compound">core::data::framebuffer_t::attachment</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="147" column="16" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="25" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1ae2b412d2784bd5dff3afdf0b883f4cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool framebuffer_t::remove</definition>
        <argsstring>(const psl::UID &amp;uid)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
<para>removes the attachment that is using this <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> for its texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">uid</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> to search for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case it found and removed atleast one attachment with the given UID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="157" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1a06276d01cedae82f845c6cbcc4611e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void framebuffer_t::set</definition>
        <argsstring>(core::resource::handle&lt; core::gfx::sampler_t &gt; sampler)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; core::gfx::sampler_t &gt;</type>
          <declname>sampler</declname>
        </param>
        <briefdescription>
<para>sets the sampler associated with this framebuffer </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sampler</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid sampler resource </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the sampler does not need to be loaded, we will only store the <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref>, but if the framebuffer is used for rendering, and the sampler is invalid, then what follows is undefined behaviour. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="163" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1aec57b627563cbca509ff6356ed26e992" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classcore_1_1data_1_1framebuffer__t_1_1attachment" kindref="compound">attachment</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;attachment&gt;&amp; core::data::framebuffer_t::attachments</definition>
        <argsstring>() const</argsstring>
        <name>attachments</name>
        <briefdescription>
<para>gets all attachments currently assigned to this framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>all attachments currently assigned to this framebuffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="167" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1ad21798e3e5fb23e971ba484bdbb3b6fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t framebuffer_t::framebuffers</definition>
        <argsstring>() const</argsstring>
        <name>framebuffers</name>
        <briefdescription>
<para>returns the framebuffer count (layers). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the framebuffer count (layers). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="171" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1a04a18b31bf3e63b5282a93835758e4ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &gt;</type>
        <definition>std::optional&lt; UID &gt; framebuffer_t::sampler</definition>
        <argsstring>() const</argsstring>
        <name>sampler</name>
        <briefdescription>
<para>returns the sampler associated with this framebuffer (if it has been set). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the sampler associated with this framebuffer (if it has been set). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="175" column="15" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1a04595a5dcba7711f87bae6c9acdad76f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t framebuffer_t::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <briefdescription>
<para>returns the width of the framebuffer object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="178" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1aa8810e829a3d61977f96d0f79367ab99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t framebuffer_t::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <briefdescription>
<para>returns the height of the framebuffer object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="180" column="10" bodyfile="/home/runner/work/paradigm/paradigm/core/src/data/framebuffer.cpp" bodystart="86" bodyend="86"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1data_1_1framebuffer__t_1a4fa4d294339d5fe6cf7b0ba35f2b23d8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void core::data::framebuffer_t::serialize</definition>
        <argsstring>(S &amp;serializer)</argsstring>
        <name>serialize</name>
        <param>
          <type>S &amp;</type>
          <declname>serializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="184" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>container class that describes the data to create a set of rendertargets. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" line="16" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/data/framebuffer.hpp" bodystart="15" bodyend="196"/>
    <listofallmembers>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a8e7b1547309688df00a850820a516c94" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>add</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1aec57b627563cbca509ff6356ed26e992" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>attachments</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a6726c157c40c73f1ca64c87645e6ab6e" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>framebuffer_t</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1ad21798e3e5fb23e971ba484bdbb3b6fb" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>framebuffers</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1aa8810e829a3d61977f96d0f79367ab99" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>height</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a3c7039f1d968ab4630722ce4272ae33c" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>m_Attachments</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a92e7cac5865a8faab23cf01c1d36f990" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>m_Cache</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a4d242f770c24bdea9bfb6dad45f3a536" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>m_Count</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a1173a6016112d59d3d4af066380d391c" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>m_Height</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a89f4a7ff025d5604cd2eac251baa4efc" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>m_Sampler</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a0bde74d9c4e217885c2c20e20010033b" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>m_Width</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1ae6e4002148765f114da9fe1b5c64547d" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>psl::serialization::accessor</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1ae2b412d2784bd5dff3afdf0b883f4cb6" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>remove</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a04a18b31bf3e63b5282a93835758e4ac" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>sampler</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a7b342837af63bce1ef6a3eabe6107716" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>serialization_name</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a4fa4d294339d5fe6cf7b0ba35f2b23d8" prot="private" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>serialize</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a06276d01cedae82f845c6cbcc4611e9a" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>set</name></member>
      <member refid="classcore_1_1data_1_1framebuffer__t_1a04595a5dcba7711f87bae6c9acdad76f" prot="public" virt="non-virtual"><scope>core::data::framebuffer_t</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
