<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmemory_1_1segment" kind="class" language="C++" prot="public">
    <compoundname>memory::segment</compoundname>
    <includes refid="segment_8hpp" local="no">segment.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmemory_1_1segment_1aca59cb5551ec8998bab3dfdc9f9e0d65" prot="private" static="no" mutable="no">
        <type><ref refid="classmemory_1_1range__t" kindref="compound">memory::range_t</ref> *</type>
        <definition>memory::range_t* memory::segment::m_Range</definition>
        <argsstring></argsstring>
        <name>m_Range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="64" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmemory_1_1segment_1a7f873c47bb2074034153d28eeeff7402" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool memory::segment::m_IsVirtual</definition>
        <argsstring></argsstring>
        <name>m_IsVirtual</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="65" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmemory_1_1segment_1a52879a61f133f8cd3b0afbb1a4ca5de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>segment::segment</definition>
        <argsstring>()</argsstring>
        <name>segment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="14" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/segment.cpp" bodystart="6" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a9138f042f4a7b047687d1a921eec3cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>segment::segment</definition>
        <argsstring>(range_t &amp;_range, bool physically_backed=true)</argsstring>
        <name>segment</name>
        <param>
          <type><ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>_range</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>physically_backed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="15" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/segment.cpp" bodystart="7" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a40a6188d75e963c82553d65be55a51d2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classmemory_1_1range__t" kindref="compound">memory::range_t</ref> &amp;</type>
        <definition>const range_t &amp; segment::range</definition>
        <argsstring>() const noexcept</argsstring>
        <name>range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="16" column="23" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/segment.cpp" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a46dd03b60ee0a6732c440771c5ebfdf6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>memory::segment::segment</definition>
        <argsstring>(const segment &amp;other) noexcept</argsstring>
        <name>segment</name>
        <param>
          <type>const <ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="17" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1ae1eee3c04c0d24e3a36626101ea77677" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;</type>
        <definition>segment&amp; memory::segment::operator=</definition>
        <argsstring>(const segment &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="18" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="18" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a4dbc147493f95dc1a7fe12d18972fc0f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>memory::segment::segment</definition>
        <argsstring>(segment &amp;&amp;other) noexcept</argsstring>
        <name>segment</name>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="27" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a80b2768c94e830037633b4c1c88e19e8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;</type>
        <definition>segment&amp; memory::segment::operator=</definition>
        <argsstring>(segment &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmemory_1_1segment" kindref="compound">segment</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="28" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1aa444f27dab876aa6a00a2f886d655b1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void memory::segment::set</definition>
        <argsstring>(T &amp;&amp;value)</argsstring>
        <name>set</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="40" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1aa13fc67fda83807dcdac6b5f4b5cb44b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void memory::segment::set</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>set</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="48" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a871efe4652b806c63207ac569085a843" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void memory::segment::unsafe_set</definition>
        <argsstring>(void *data, std::optional&lt; size_t &gt; _size={})</argsstring>
        <name>unsafe_set</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>_size</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="55" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a5e589a33c5803c89c3e98526cacd93b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool segment::is_virtual</definition>
        <argsstring>() const</argsstring>
        <name>is_virtual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="60" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/segment.cpp" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classmemory_1_1segment_1a562efb463186952af73f8d0a0edae4a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool segment::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="61" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/memory/segment.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a segment defines a addressable and mapped region of memory. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" line="12" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/segment.hpp" bodystart="11" bodyend="66"/>
    <listofallmembers>
      <member refid="classmemory_1_1segment_1a562efb463186952af73f8d0a0edae4a1" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>is_valid</name></member>
      <member refid="classmemory_1_1segment_1a5e589a33c5803c89c3e98526cacd93b5" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>is_virtual</name></member>
      <member refid="classmemory_1_1segment_1a7f873c47bb2074034153d28eeeff7402" prot="private" virt="non-virtual"><scope>memory::segment</scope><name>m_IsVirtual</name></member>
      <member refid="classmemory_1_1segment_1aca59cb5551ec8998bab3dfdc9f9e0d65" prot="private" virt="non-virtual"><scope>memory::segment</scope><name>m_Range</name></member>
      <member refid="classmemory_1_1segment_1ae1eee3c04c0d24e3a36626101ea77677" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>operator=</name></member>
      <member refid="classmemory_1_1segment_1a80b2768c94e830037633b4c1c88e19e8" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>operator=</name></member>
      <member refid="classmemory_1_1segment_1a40a6188d75e963c82553d65be55a51d2" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>range</name></member>
      <member refid="classmemory_1_1segment_1a52879a61f133f8cd3b0afbb1a4ca5de2" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>segment</name></member>
      <member refid="classmemory_1_1segment_1a9138f042f4a7b047687d1a921eec3cd0" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>segment</name></member>
      <member refid="classmemory_1_1segment_1a46dd03b60ee0a6732c440771c5ebfdf6" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>segment</name></member>
      <member refid="classmemory_1_1segment_1a4dbc147493f95dc1a7fe12d18972fc0f" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>segment</name></member>
      <member refid="classmemory_1_1segment_1aa444f27dab876aa6a00a2f886d655b1e" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>set</name></member>
      <member refid="classmemory_1_1segment_1aa13fc67fda83807dcdac6b5f4b5cb44b" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>set</name></member>
      <member refid="classmemory_1_1segment_1a871efe4652b806c63207ac569085a843" prot="public" virt="non-virtual"><scope>memory::segment</scope><name>unsafe_set</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
