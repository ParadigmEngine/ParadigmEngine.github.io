<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_common_1_1evoke_3_01void_00_01void_01_4" kind="class" language="C++" prot="public" final="yes">
    <compoundname>Common::evoke&lt; void, void &gt;</compoundname>
    <basecompoundref prot="public" virt="virtual">Common::evocableR&lt; void &gt;</basecompoundref>
    <basecompoundref prot="public" virt="virtual">Common::evocableT&lt; void &gt;</basecompoundref>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_common_1_1evoke_3_01void_00_01void_01_4_1a33c5f5af549afeb02953439016813728" prot="public" static="no">
        <type>typename std::tuple&lt; void &gt;</type>
        <definition>using Common::evoke&lt; void, void &gt;::tuple_type =  typename std::tuple&lt;void&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="338" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_common_1_1evoke_3_01void_00_01void_01_4_1a4e7a85f127d99801bb99c04be17af659" prot="public" static="no">
        <type>tuple_type</type>
        <definition>using Common::evoke&lt; void, void &gt;::parameter_types =  tuple_type</definition>
        <argsstring></argsstring>
        <name>parameter_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="339" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_common_1_1evoke_3_01void_00_01void_01_4_1ac08fbe0266a859aae795870236c9afcb" prot="public" static="no">
        <type>void</type>
        <definition>using Common::evoke&lt; void, void &gt;::return_type =  void</definition>
        <argsstring></argsstring>
        <name>return_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="340" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="340" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_common_1_1evoke_3_01void_00_01void_01_4_1a1c449757b5d1aa9cae5b28f57fc2540a" prot="private" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; Common::evoke&lt; void, void &gt;::bind_</definition>
        <argsstring></argsstring>
        <name>bind_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="371" column="15" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="371" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1af15e6ff06190c7b0c3e615b711b683fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; void, void &gt;::evoke</definition>
        <argsstring>(std::function&lt; void()&gt; &amp;&amp;f)</argsstring>
        <name>evoke</name>
        <param>
          <type>std::function&lt; void()&gt; &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="342" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1a384e3cbe892e8b6809fd3e745dcbfe70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; void, void &gt;::~evoke</definition>
        <argsstring>()</argsstring>
        <name>~evoke</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="343" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="343" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1ab55acab0357d9265ef797487e1fc0a19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Common::evoke&lt; void, void &gt;::operator()</definition>
        <argsstring>() override</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="345" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1a00850bd4f0bb824c095c19b1513250ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; void, void &gt;::evoke</definition>
        <argsstring>(const evoke &amp;e)</argsstring>
        <name>evoke</name>
        <param>
          <type>const evoke &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="346" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1ab4028b03ae622e7386b828358ccc8124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Common::evoke&lt; void, void &gt;::evoke</definition>
        <argsstring>(evoke &amp;&amp;e)</argsstring>
        <name>evoke</name>
        <param>
          <type>evoke &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="347" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1a37425b642d5bd1395ff992d3b3b64712" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>evoke &amp;</type>
        <definition>evoke&amp; Common::evoke&lt; void, void &gt;::operator=</definition>
        <argsstring>(const evoke &amp;e) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>const evoke &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="348" column="7" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="348" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1ac9d790ba29d1a3da1383870aa38a7cc0" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>evoke &amp;</type>
        <definition>evoke&amp; Common::evoke&lt; void, void &gt;::operator=</definition>
        <argsstring>(evoke &amp;&amp;e) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>evoke &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="356" column="7" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="356" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_common_1_1evoke_3_01void_00_01void_01_4_1a604e9c4c60ffca0ddc75ed8918b2767c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::array&lt; std::pair&lt; std::uintptr_t, size_t &gt;, 0 &gt;</type>
        <definition>std::array&lt;std::pair&lt;std::uintptr_t, size_t&gt;, 0&gt; Common::evoke&lt; void, void &gt;::_parameter_locations</definition>
        <argsstring>() const</argsstring>
        <name>_parameter_locations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="365" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="365" bodyend="368"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" line="336" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/evoke.hpp" bodystart="335" bodyend="372"/>
    <listofallmembers>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1a604e9c4c60ffca0ddc75ed8918b2767c" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>_parameter_locations</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1a1c449757b5d1aa9cae5b28f57fc2540a" prot="private" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>bind_</name></member>
      <member refid="class_common_1_1evocable_1ada069216a51826f97bb5ef92507c7dad" prot="protected" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>evocable</name></member>
      <member refid="class_common_1_1evocable_1a154ed6811474b7c3982bc882da48e187" prot="protected" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>evocable</name></member>
      <member refid="class_common_1_1evocable_1a41b2524e0a8a3288057c753b9923949b" prot="protected" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>evocable</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1af15e6ff06190c7b0c3e615b711b683fe" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>evoke</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1a00850bd4f0bb824c095c19b1513250ca" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>evoke</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1ab4028b03ae622e7386b828358ccc8124" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>evoke</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1ab55acab0357d9265ef797487e1fc0a19" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>operator()</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1a37425b642d5bd1395ff992d3b3b64712" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>operator=</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1ac9d790ba29d1a3da1383870aa38a7cc0" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>operator=</name></member>
      <member refid="class_common_1_1evocable_1a0a4a17ca45151559c62a5f3602ee37c5" prot="protected" virt="non-virtual" ambiguityscope="Common::evocableR::"><scope>Common::evoke&lt; void, void &gt;</scope><name>operator=</name></member>
      <member refid="class_common_1_1evocable_1a0dc2e9351a755330c9db9b0499571a1e" prot="protected" virt="non-virtual" ambiguityscope="Common::evocableR::"><scope>Common::evoke&lt; void, void &gt;</scope><name>operator=</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1a4e7a85f127d99801bb99c04be17af659" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>parameter_types</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1ac08fbe0266a859aae795870236c9afcb" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>return_type</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1a33c5f5af549afeb02953439016813728" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>tuple_type</name></member>
      <member refid="class_common_1_1evocable_1a32c4a260e7d10d11feea4224df331e8d" prot="public" virt="virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>~evocable</name></member>
      <member refid="class_common_1_1evocable_r_1a14c3e0a56973c20b373f0e5597d91ae8" prot="public" virt="virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>~evocableR</name></member>
      <member refid="class_common_1_1evocable_t_1af1216a92d78f985d5773e44e24e52f54" prot="public" virt="virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>~evocableT</name></member>
      <member refid="class_common_1_1evoke_3_01void_00_01void_01_4_1a384e3cbe892e8b6809fd3e745dcbfe70" prot="public" virt="non-virtual"><scope>Common::evoke&lt; void, void &gt;</scope><name>~evoke</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
