<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpsl_1_1array__view_1_1iterator" kind="class" language="C++" prot="public">
    <compoundname>psl::array_view::iterator</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classpsl_1_1array__view_1_1iterator_1a5fdb0463b454252a8230d3797d13f1d8" prot="public" static="no">
        <type>iterator</type>
        <definition>typedef iterator psl::array_view&lt; T &gt;::iterator::self_type</definition>
        <argsstring></argsstring>
        <name>self_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="15" column="18" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1array__view_1_1iterator_1af11da3b225311c97452cf07a5ef4d0cb" prot="public" static="no">
        <type>typename std::remove_reference&lt; T &gt;::type</type>
        <definition>using psl::array_view&lt; T &gt;::iterator::value_type =  typename std::remove_reference&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="16" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1array__view_1_1iterator_1a51a6f42b84f7d2435f42f5d5285b1aed" prot="public" static="no">
        <type>value_type &amp;</type>
        <definition>using psl::array_view&lt; T &gt;::iterator::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="17" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1array__view_1_1iterator_1ae8e93fb1b9cb9648cd9ca9cdc0af8d4a" prot="public" static="no">
        <type>reference</type>
        <definition>using psl::array_view&lt; T &gt;::iterator::const_reference =  reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="18" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1array__view_1_1iterator_1aef91469e0397261d8c1ae8a127426d07" prot="public" static="no">
        <type>value_type *</type>
        <definition>using psl::array_view&lt; T &gt;::iterator::pointer =  value_type*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="19" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1array__view_1_1iterator_1a19e18ad46bd8eda7fedd6ec22b9731a8" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using psl::array_view&lt; T &gt;::iterator::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="20" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpsl_1_1array__view_1_1iterator_1a3b41d0b47f74699f400a4bd2700d727e" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>using psl::array_view&lt; T &gt;::iterator::iterator_category =  std::random_access_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="21" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpsl_1_1array__view_1_1iterator_1a92f6d43424bdb5e2ee2ad77de527b6b0" prot="private" static="no" mutable="no">
        <type>pointer</type>
        <definition>pointer psl::array_view&lt; T &gt;::iterator::it</definition>
        <argsstring></argsstring>
        <name>it</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="127" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a6b0ee958ac4eb36120b5e3db896e0ffb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::array_view&lt; T &gt;::iterator::iterator</definition>
        <argsstring>() noexcept</argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="23" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a46a42a26ff61f3d1707bd261023075c5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::array_view&lt; T &gt;::iterator::iterator</definition>
        <argsstring>(pointer ptr) noexcept</argsstring>
        <name>iterator</name>
        <param>
          <type>pointer</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="24" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a92d83146e762a11fa322dea5024dfd1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>psl::array_view&lt; T &gt;::iterator::~iterator</definition>
        <argsstring>()=default</argsstring>
        <name>~iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a58f9f902505676c4b21a57e61f1be554" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::array_view&lt; T &gt;::iterator::iterator</definition>
        <argsstring>(const iterator &amp;other) noexcept</argsstring>
        <name>iterator</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="26" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1aa27394712372a4da7063ef92134648e9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::array_view&lt; T &gt;::iterator::iterator</definition>
        <argsstring>(iterator &amp;&amp;other) noexcept</argsstring>
        <name>iterator</name>
        <param>
          <type>iterator &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="27" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a6c2be8603d1155e7162ef8d0df04735c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>iterator &amp;</type>
        <definition>iterator&amp; psl::array_view&lt; T &gt;::iterator::operator=</definition>
        <argsstring>(const iterator &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="28" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1aa3988ce6f17d3a882880243f639904b9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>iterator &amp;</type>
        <definition>iterator&amp; psl::array_view&lt; T &gt;::iterator::operator=</definition>
        <argsstring>(iterator &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>iterator &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="36" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a8791c6775e09448992c774a14c1a4ff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator &amp;</type>
        <definition>iterator&amp; psl::array_view&lt; T &gt;::iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="47" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a986aa7ddf5b686e236466ff68ace3c50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator &amp;</type>
        <definition>iterator&amp; psl::array_view&lt; T &gt;::iterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="53" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a83e8a9a6137a3adc8004de1a53df6745" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator psl::array_view&lt; T &gt;::iterator::operator++</definition>
        <argsstring>(int) const</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="59" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a3b95eb68e242ab75cb2a2946c540fe77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator psl::array_view&lt; T &gt;::iterator::operator--</definition>
        <argsstring>() const</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="65" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1ac00e86601b6e06096f45a830e2c89b5a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>iterator &amp;</type>
        <definition>iterator&amp; psl::array_view&lt; T &gt;::iterator::operator+=</definition>
        <argsstring>(difference_type offset) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>difference_type</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="72" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1ad937fe55dfa81d752c7340ba1706797b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>iterator &amp;</type>
        <definition>iterator&amp; psl::array_view&lt; T &gt;::iterator::operator-=</definition>
        <argsstring>(difference_type offset) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>difference_type</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="78" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a33878fbef81c3abb549b9909b516b159" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator psl::array_view&lt; T &gt;::iterator::operator+</definition>
        <argsstring>(difference_type offset) const</argsstring>
        <name>operator+</name>
        <param>
          <type>difference_type</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="84" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a36a0ef9e1e482400ff559847382a54ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator psl::array_view&lt; T &gt;::iterator::operator-</definition>
        <argsstring>(difference_type offset) const</argsstring>
        <name>operator-</name>
        <param>
          <type>difference_type</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="91" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a4389a05e38acfba58611b0dd554bf362" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>difference_type</type>
        <definition>difference_type psl::array_view&lt; T &gt;::iterator::operator-</definition>
        <argsstring>(iterator offset) const</argsstring>
        <name>operator-</name>
        <param>
          <type>iterator</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="98" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1ab3da01b32bb6a777956fb0549e998c3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>difference_type</type>
        <definition>difference_type psl::array_view&lt; T &gt;::iterator::operator+</definition>
        <argsstring>(iterator offset) const</argsstring>
        <name>operator+</name>
        <param>
          <type>iterator</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="100" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a6564739b7923a15532f2dd14cb6cb51d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::array_view&lt; T &gt;::iterator::operator!=</definition>
        <argsstring>(const iterator &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="102" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a7a8027e10402138eea2f17cb64bd7991" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::array_view&lt; T &gt;::iterator::operator==</definition>
        <argsstring>(const iterator &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="104" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a4cf9ed53663a998e146a2ddb4716755b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::array_view&lt; T &gt;::iterator::operator&lt;</definition>
        <argsstring>(const iterator &amp;other) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="106" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1adcd7bcf1ac6ad6a55aa37b6a9ecefe70" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::array_view&lt; T &gt;::iterator::operator&lt;=</definition>
        <argsstring>(const iterator &amp;other) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="107" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a0507ce1da743765ba4e3bcc09521a00f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::array_view&lt; T &gt;::iterator::operator&gt;</definition>
        <argsstring>(const iterator &amp;other) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="108" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a55a883211697eb65f12a524a0fb77385" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::array_view&lt; T &gt;::iterator::operator&gt;=</definition>
        <argsstring>(const iterator &amp;other) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="109" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1acf23cd0643e7b4fde187df56ce43ff4d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference psl::array_view&lt; T &gt;::iterator::operator*</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="111" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1ad7483966523db3d257df2179755b2103" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference psl::array_view&lt; T &gt;::iterator::operator*</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="112" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a24c36807ce23bba1bb85180002bf7a52" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer psl::array_view&lt; T &gt;::iterator::operator-&gt;</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="113" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a21df8a28770ee55b6ca1326a4010c360" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer psl::array_view&lt; T &gt;::iterator::operator-&gt;</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="114" column="9" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a5990bee17bcb7dacf5fcc6050013ba5e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference psl::array_view&lt; T &gt;::iterator::value</definition>
        <argsstring>() noexcept</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="116" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a195ea6b0e4ad260860eceefb0e1edebb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference psl::array_view&lt; T &gt;::iterator::cvalue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cvalue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="118" column="11" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1a6962b654049029545e3b67dce7263350" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::array_view&lt; T &gt;::iterator::operator reference</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="120" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1array__view_1_1iterator_1afc9ab70b2fb554b7eeff80247abb584c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::array_view&lt; T &gt;::iterator::operator const_reference</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="122" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="13" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" bodystart="12" bodyend="128"/>
    <listofallmembers>
      <member refid="classpsl_1_1array__view_1_1iterator_1ae8e93fb1b9cb9648cd9ca9cdc0af8d4a" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>const_reference</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a195ea6b0e4ad260860eceefb0e1edebb" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>cvalue</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a19e18ad46bd8eda7fedd6ec22b9731a8" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>difference_type</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a92f6d43424bdb5e2ee2ad77de527b6b0" prot="private" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>it</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a6b0ee958ac4eb36120b5e3db896e0ffb" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>iterator</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a46a42a26ff61f3d1707bd261023075c5" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>iterator</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a58f9f902505676c4b21a57e61f1be554" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>iterator</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1aa27394712372a4da7063ef92134648e9" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>iterator</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a3b41d0b47f74699f400a4bd2700d727e" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>iterator_category</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1afc9ab70b2fb554b7eeff80247abb584c" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator const_reference</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a6962b654049029545e3b67dce7263350" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator reference</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a6564739b7923a15532f2dd14cb6cb51d" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator!=</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1acf23cd0643e7b4fde187df56ce43ff4d" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator*</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1ad7483966523db3d257df2179755b2103" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator*</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a33878fbef81c3abb549b9909b516b159" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator+</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1ab3da01b32bb6a777956fb0549e998c3e" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator+</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a8791c6775e09448992c774a14c1a4ff4" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator++</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a83e8a9a6137a3adc8004de1a53df6745" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator++</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1ac00e86601b6e06096f45a830e2c89b5a" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator+=</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a36a0ef9e1e482400ff559847382a54ec" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator-</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a4389a05e38acfba58611b0dd554bf362" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator-</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a986aa7ddf5b686e236466ff68ace3c50" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator--</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a3b95eb68e242ab75cb2a2946c540fe77" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator--</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1ad937fe55dfa81d752c7340ba1706797b" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator-=</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a24c36807ce23bba1bb85180002bf7a52" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator-&gt;</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a21df8a28770ee55b6ca1326a4010c360" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator-&gt;</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a4cf9ed53663a998e146a2ddb4716755b" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator&lt;</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1adcd7bcf1ac6ad6a55aa37b6a9ecefe70" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator&lt;=</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a6c2be8603d1155e7162ef8d0df04735c" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator=</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1aa3988ce6f17d3a882880243f639904b9" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator=</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a7a8027e10402138eea2f17cb64bd7991" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator==</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a0507ce1da743765ba4e3bcc09521a00f" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator&gt;</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a55a883211697eb65f12a524a0fb77385" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>operator&gt;=</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1aef91469e0397261d8c1ae8a127426d07" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>pointer</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a51a6f42b84f7d2435f42f5d5285b1aed" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>reference</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a5fdb0463b454252a8230d3797d13f1d8" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>self_type</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a5990bee17bcb7dacf5fcc6050013ba5e" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>value</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1af11da3b225311c97452cf07a5ef4d0cb" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>value_type</name></member>
      <member refid="classpsl_1_1array__view_1_1iterator_1a92d83146e762a11fa322dea5024dfd1b" prot="public" virt="non-virtual"><scope>psl::array_view::iterator</scope><name>~iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
