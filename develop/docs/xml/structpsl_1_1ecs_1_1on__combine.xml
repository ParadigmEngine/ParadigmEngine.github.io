<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structpsl_1_1ecs_1_1on__combine" kind="struct" language="C++" prot="public">
    <compoundname>psl::ecs::on_combine</compoundname>
    <includes refid="selectors_8hpp" local="no">selectors.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
    <briefdescription>
<para>specialized tag of <computeroutput><ref refid="structpsl_1_1ecs_1_1on__add" kindref="compound">on_add</ref></computeroutput> </para>
    </briefdescription>
    <detaileddescription>
<para>Will filter components based on when the given combination first appears. This provides a way to not care if component X, or component Y was added last and instead only cares if they both are used in a combination for the first time. This is ideal for systems that need to do something based on the creation of certain components. Take core::ecs::components::renderable and core::ecs::components::transform as example, who, when combined, create a draw call. The system that creates them should not need to care if the transform was added first or last. \warn tags do not mean this component will be present in the pack, they are considered filter directives (or specialized filter directives). </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/selectors.hpp" line="40" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ecs/selectors.hpp" bodystart="39" bodyend="40"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
