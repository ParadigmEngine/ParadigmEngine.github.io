<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpsl_1_1async_1_1barrier" kind="class" language="C++" prot="public">
    <compoundname>psl::async::barrier</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classpsl_1_1async_1_1barrier_1aacf5dde3b1aac8edf224791aca16009d" prot="public" static="no">
        <type>std::uintptr_t</type>
        <definition>using psl::async::barrier::location_t =  std::uintptr_t</definition>
        <argsstring></argsstring>
        <name>location_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="22" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpsl_1_1async_1_1barrier_1af0db074fb38cd21130b427326eb4b1ba" prot="private" static="no" mutable="no">
        <type>location_t</type>
        <definition>location_t psl::async::barrier::m_Begin</definition>
        <argsstring></argsstring>
        <name>m_Begin</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="64" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1async_1_1barrier_1a15022710889ae7c6ca0ded2d04a3df98" prot="private" static="no" mutable="no">
        <type>location_t</type>
        <definition>location_t psl::async::barrier::m_End</definition>
        <argsstring></argsstring>
        <name>m_End</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="65" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1async_1_1barrier_1a8a90acb3f5c960eac9ac20e521625539" prot="private" static="no" mutable="no">
        <type>barrier_type</type>
        <definition>barrier_type psl::async::barrier::m_Type</definition>
        <argsstring></argsstring>
        <name>m_Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="66" column="14" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a106a362889e61692f317c233b63442a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>psl::async::barrier::barrier</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>barrier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a60067a34e5d6be6fd2b6bdaf6cfb2caa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>psl::async::barrier::barrier</definition>
        <argsstring>(location_t begin, location_t end, barrier_type type=barrier_type::READ)</argsstring>
        <name>barrier</name>
        <param>
          <type>location_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>location_t</type>
          <declname>end</declname>
        </param>
        <param>
          <type>barrier_type</type>
          <declname>type</declname>
          <defval>barrier_type::READ</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="24" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="24" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1aeabaf5b3397d1ec9fdb896f9bc86c435" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::async::barrier::operator==</definition>
        <argsstring>(const barrier &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const barrier &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="27" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1acb592baa7674a0201b43b284da8a116c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::async::barrier::operator!=</definition>
        <argsstring>(const barrier &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const barrier &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="31" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a0e4af0d0756bbedf4f69733ddba4ff5f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>location_t</type>
        <definition>location_t psl::async::barrier::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="35" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a91e021274457c16943f815ab831de47e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>location_t</type>
        <definition>location_t psl::async::barrier::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="36" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a6e01694cf383663e21abef83aba1b678" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>location_t</type>
        <definition>location_t psl::async::barrier::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="37" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a3b499a425c59d1697f9775f64b638642" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>barrier_type</type>
        <definition>barrier_type psl::async::barrier::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="38" column="14" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a22b726ee3677411c2112d2acdd6d7211" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::async::barrier::begin</definition>
        <argsstring>(location_t location) noexcept</argsstring>
        <name>begin</name>
        <param>
          <type>location_t</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="40" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a0ee3251e8818df0558e9a99a4ba66184" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::async::barrier::end</definition>
        <argsstring>(location_t location) noexcept</argsstring>
        <name>end</name>
        <param>
          <type>location_t</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="41" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a23e8f27b0f07acb6715aa0b38c465016" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::async::barrier::type</definition>
        <argsstring>(barrier_type type) noexcept</argsstring>
        <name>type</name>
        <param>
          <type>barrier_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="42" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1aa94c5428079c3008715a16359ae7ffba" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::async::barrier::move</definition>
        <argsstring>(location_t location) noexcept</argsstring>
        <name>move</name>
        <param>
          <type>location_t</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="44" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a45a8f30e6e0a81c489c0bc92a6276809" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void psl::async::barrier::resize</definition>
        <argsstring>(location_t new_size) noexcept</argsstring>
        <name>resize</name>
        <param>
          <type>location_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="49" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1ae3395691cce99a5117868ce5288ee5d6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::async::barrier::conflicts</definition>
        <argsstring>(const barrier &amp;other) const noexcept</argsstring>
        <name>conflicts</name>
        <param>
          <type>const barrier &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="51" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1barrier_1a6c48cf4f82c478286111e614a3080049" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool psl::async::barrier::overlaps</definition>
        <argsstring>(const barrier &amp;other) const noexcept</argsstring>
        <name>overlaps</name>
        <param>
          <type>const barrier &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="57" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="57" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" line="20" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/barrier.hpp" bodystart="19" bodyend="67"/>
    <listofallmembers>
      <member refid="classpsl_1_1async_1_1barrier_1a106a362889e61692f317c233b63442a0" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>barrier</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a60067a34e5d6be6fd2b6bdaf6cfb2caa" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>barrier</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a0e4af0d0756bbedf4f69733ddba4ff5f" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>begin</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a22b726ee3677411c2112d2acdd6d7211" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>begin</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1ae3395691cce99a5117868ce5288ee5d6" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>conflicts</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a91e021274457c16943f815ab831de47e" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>end</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a0ee3251e8818df0558e9a99a4ba66184" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>end</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1aacf5dde3b1aac8edf224791aca16009d" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>location_t</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1af0db074fb38cd21130b427326eb4b1ba" prot="private" virt="non-virtual"><scope>psl::async::barrier</scope><name>m_Begin</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a15022710889ae7c6ca0ded2d04a3df98" prot="private" virt="non-virtual"><scope>psl::async::barrier</scope><name>m_End</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a8a90acb3f5c960eac9ac20e521625539" prot="private" virt="non-virtual"><scope>psl::async::barrier</scope><name>m_Type</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1aa94c5428079c3008715a16359ae7ffba" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>move</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1acb592baa7674a0201b43b284da8a116c" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>operator!=</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1aeabaf5b3397d1ec9fdb896f9bc86c435" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>operator==</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a6c48cf4f82c478286111e614a3080049" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>overlaps</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a45a8f30e6e0a81c489c0bc92a6276809" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>resize</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a6e01694cf383663e21abef83aba1b678" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>size</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a3b499a425c59d1697f9775f64b638642" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>type</name></member>
      <member refid="classpsl_1_1async_1_1barrier_1a23e8f27b0f07acb6715aa0b38c465016" prot="public" virt="non-virtual"><scope>psl::async::barrier</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
