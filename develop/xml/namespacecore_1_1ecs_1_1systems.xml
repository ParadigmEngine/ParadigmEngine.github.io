<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacecore_1_1ecs_1_1systems" kind="namespace" language="C++">
    <compoundname>core::ecs::systems</compoundname>
    <innerclass refid="classcore_1_1ecs_1_1systems_1_1fly" prot="public">core::ecs::systems::fly</innerclass>
    <innerclass refid="classcore_1_1ecs_1_1systems_1_1geometry__instancing" prot="public">core::ecs::systems::geometry_instancing</innerclass>
    <innerclass refid="classcore_1_1ecs_1_1systems_1_1gpu__camera" prot="public">core::ecs::systems::gpu_camera</innerclass>
    <innerclass refid="classcore_1_1ecs_1_1systems_1_1lighting__system" prot="public">core::ecs::systems::lighting_system</innerclass>
    <innerclass refid="classcore_1_1ecs_1_1systems_1_1render" prot="public">core::ecs::systems::render</innerclass>
    <innerclass refid="classcore_1_1ecs_1_1systems_1_1text" prot="public">core::ecs::systems::text</innerclass>
    <innernamespace refid="namespacecore_1_1ecs_1_1systems_1_1debug">core::ecs::systems::debug</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="attractor_8hpp_1a1dd3414c063377028b1cdf26f5a930cc" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto core::ecs::systems::attractor</definition>
        <argsstring></argsstring>
        <name>attractor</name>
        <initializer>=
	  [](psl::ecs::info_t&amp; info,
		 <ref refid="classpsl_1_1ecs_1_1pack" kindref="compound">psl::ecs::pack</ref>&lt;<ref refid="structpsl_1_1ecs_1_1partial" kindref="compound">psl::ecs::partial</ref>,
						const core::ecs::components::transform,
						core::ecs::components::velocity,
						<ref refid="structpsl_1_1ecs_1_1filter" kindref="compound">psl::ecs::filter</ref>&lt;core::ecs::components::dynamic_tag&gt;&gt; movables,
		 <ref refid="classpsl_1_1ecs_1_1pack" kindref="compound">psl::ecs::pack</ref>&lt;<ref refid="structpsl_1_1ecs_1_1full" kindref="compound">psl::ecs::full</ref>, const core::ecs::components::transform, const core::ecs::components::attractor&gt;
		   attractors) {
		  using namespace psl::math;

		  for(auto [movTrans, movVel] : movables)
		  {
			  for(auto [attrTransform, attractor] : attractors)
			  {
				  const auto mag = saturate((attractor.radius - magnitude(movTrans.position - attrTransform.position)) /
											attractor.radius) *
								   info.dTime.count();
				  const auto direction = normalize(attrTransform.position - movTrans.position) * attractor.force;

				  movVel.direction = mix(movVel.direction, direction, mag);
			  }
		  }
	  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/attractor.hpp" line="22" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/attractor.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="death_8hpp_1aee0df1a4ac8c2efc5b3d7fb210189771" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto core::ecs::systems::death</definition>
        <argsstring></argsstring>
        <name>death</name>
        <initializer>=
	  [](psl::ecs::info_t&amp; info,
		 <ref refid="classpsl_1_1ecs_1_1pack" kindref="compound">psl::ecs::pack</ref>&lt;<ref refid="structpsl_1_1ecs_1_1partial" kindref="compound">psl::ecs::partial</ref>, psl::ecs::entity, <ref refid="structpsl_1_1ecs_1_1on__add" kindref="compound">psl::ecs::on_add</ref>&lt;core::ecs::components::dead_tag&gt;&gt;
		   dead_pack) { info.command_buffer.destroy(dead_pack.get&lt;psl::ecs::entity&gt;()); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/death.hpp" line="7" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/death.hpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="systems_2lifetime_8hpp_1ac68938004b91ae1d2d4b726fe4993c99" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto core::ecs::systems::lifetime</definition>
        <argsstring></argsstring>
        <name>lifetime</name>
        <initializer>= [](psl::ecs::info_t&amp; info,
					   <ref refid="classpsl_1_1ecs_1_1pack" kindref="compound">psl::ecs::pack</ref>&lt;<ref refid="structpsl_1_1ecs_1_1partial" kindref="compound">psl::ecs::partial</ref>, psl::ecs::entity, core::ecs::components::lifetime&gt; life_pack) {
		using namespace psl::ecs;
		using namespace core::ecs::components;

		std::vector&lt;entity&gt; dead_entities;
		for(auto [entity, lifetime] : life_pack)
		{
			lifetime.value -= info.dTime.count();
			if(lifetime.value &lt;= 0.0f) dead_entities.emplace_back(entity);
		}

		if(dead_entities.size() &gt; 0)
		{
			info.command_buffer.destroy(dead_entities);
			
			
		}
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/lifetime.hpp" line="10" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/lifetime.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="movement_8hpp_1a2af41140527955f5ce4d0673f04fdda0" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto core::ecs::systems::movement</definition>
        <argsstring></argsstring>
        <name>movement</name>
        <initializer>=
	  [](psl::ecs::info_t&amp; info,
		 <ref refid="classpsl_1_1ecs_1_1pack" kindref="compound">psl::ecs::pack</ref>&lt;<ref refid="structpsl_1_1ecs_1_1partial" kindref="compound">psl::ecs::partial</ref>, const core::ecs::components::velocity, core::ecs::components::transform&gt;
		   movables) {
		  using namespace psl::math;
		  using namespace core::ecs;
		  using namespace core::ecs::components;

		  for(auto [velocity, transform] : movables)
		  {
			  transform.position += velocity.direction * velocity.force * info.dTime.count();
			  transform.rotation =
				normalize(psl::quat(0.8f * info.dTime.count(), 0.0f, 0.0f, 1.0f) * transform.rotation);
		  }
	  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/movement.hpp" line="8" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/movement.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/ecs/systems/attractor.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
