<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpsl_1_1async_1_1scheduler" kind="class" language="C++" prot="public" final="yes">
    <compoundname>psl::async::scheduler</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpsl_1_1async_1_1scheduler_1a6dad5bd84b6eac5fea59d9892b64ffa8" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t psl::async::scheduler::m_Workers</definition>
        <argsstring></argsstring>
        <name>m_Workers</name>
        <initializer>{4}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="87" column="8" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1async_1_1scheduler_1a10160ad28fd52cb19d4e8133199789b7" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t psl::async::scheduler::m_TokenOffset</definition>
        <argsstring></argsstring>
        <name>m_TokenOffset</name>
        <initializer>{0u}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="88" column="8" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1async_1_1scheduler_1a056e59ecfcd1eda871a76a0b7c9342c3" prot="private" static="no" mutable="no">
        <type>psl::array&lt; details::packet &gt;</type>
        <definition>psl::array&lt;details::packet&gt; psl::async::scheduler::m_Invocables</definition>
        <argsstring></argsstring>
        <name>m_Invocables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="89" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1async_1_1scheduler_1a12e0b35de64a6a8fc093e491c82343e9" prot="private" static="no" mutable="no">
        <type>psl::array&lt; psl::unique_ptr&lt; details::worker &gt; &gt;</type>
        <definition>psl::array&lt;psl::unique_ptr&lt;details::worker&gt; &gt; psl::async::scheduler::m_Workerthreads</definition>
        <argsstring></argsstring>
        <name>m_Workerthreads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="90" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsl_1_1async_1_1scheduler_1ac9c41498c47d407e7075ae2c04ee5e45" prot="private" static="no" mutable="no">
        <type><ref refid="classpsl_1_1spmc_1_1producer" kindref="compound">psl::spmc::producer</ref>&lt; <ref refid="classpsl_1_1view__ptr" kindref="compound">psl::view_ptr</ref>&lt; details::packet &gt; &gt;</type>
        <definition>psl::spmc::producer&lt;psl::view_ptr&lt;details::packet&gt; &gt; psl::async::scheduler::m_Tasks</definition>
        <argsstring></argsstring>
        <name>m_Tasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="91" column="21" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1a835e252ff9c82ae9b6b4aaa843844ada" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>scheduler::scheduler</definition>
        <argsstring>(std::optional&lt; size_t &gt; workers=std::nullopt) noexcept</argsstring>
        <name>scheduler</name>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>workers</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="20" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="95" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1a4a0e4c12027ab0a23d8aa9e6d9e87ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scheduler::~scheduler</definition>
        <argsstring>()</argsstring>
        <name>~scheduler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="21" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1af3ec677777a3f65e6c81842fc7777476" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>Future</declname>
            <defname>Future</defname>
            <defval>std::future</defval>
          </param>
          <param>
            <type>typename Fn</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto psl::async::scheduler::schedule</definition>
        <argsstring>(Fn &amp;&amp;func) -&gt; typename std::conditional&lt; std::is_same&lt; decltype(std::declval&lt; Fn &gt;()()), void &gt;::value, token, std::pair&lt; token, Future&lt; decltype(std::declval&lt; Fn &gt;()())&gt;&gt;&gt;::type</argsstring>
        <name>schedule</name>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="24" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="24" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1a0494c97e80db5efbbb3562f414408e5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>token</type>
        <definition>token psl::async::scheduler::proxy</definition>
        <argsstring>()</argsstring>
        <name>proxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="43" column="7" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1ae374b1596cd1a94e4d23c3fa62d270e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>Future</declname>
            <defname>Future</defname>
            <defval>std::future</defval>
          </param>
          <param>
            <type>typename Fn</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto psl::async::scheduler::substitute</definition>
        <argsstring>(token &amp;token, Fn &amp;&amp;func) -&gt; typename std::conditional&lt; std::is_same&lt; decltype(std::declval&lt; Fn &gt;()()), void &gt;::value, void, Future&lt; decltype(std::declval&lt; Fn &gt;()())&gt;&gt;::type</argsstring>
        <name>substitute</name>
        <param>
          <type>token &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="52" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="52" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1a9c6872224a544f3d5529879e46944f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::execute</definition>
        <argsstring>()</argsstring>
        <name>execute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="70" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="108" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1ac1bd524f3551fbffbc523716d2e523a4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::sequence</definition>
        <argsstring>(token first, token then) noexcept</argsstring>
        <name>sequence</name>
        <param>
          <type>token</type>
          <declname>first</declname>
        </param>
        <param>
          <type>token</type>
          <declname>then</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="72" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1aa3a97d1cbc2b098e3c0fea7e5a4379e2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::sequence</definition>
        <argsstring>(psl::array&lt; token &gt; first, token then) noexcept</argsstring>
        <name>sequence</name>
        <param>
          <type>psl::array&lt; token &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>token</type>
          <declname>then</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="73" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1a65365f4e491e92d60372fc954b36788d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::sequence</definition>
        <argsstring>(token first, psl::array&lt; token &gt; then) noexcept</argsstring>
        <name>sequence</name>
        <param>
          <type>token</type>
          <declname>first</declname>
        </param>
        <param>
          <type>psl::array&lt; token &gt;</type>
          <declname>then</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="74" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1acfb537969ba802d63f33f9ce77b5b8dc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::sequence</definition>
        <argsstring>(psl::array&lt; token &gt; first, psl::array&lt; token &gt; then) noexcept</argsstring>
        <name>sequence</name>
        <param>
          <type>psl::array&lt; token &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>psl::array&lt; token &gt;</type>
          <declname>then</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="75" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1ad346e001c0795618d12f29031e9fdca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::barriers</definition>
        <argsstring>(token token, const psl::array&lt; barrier &gt; &amp;barriers)</argsstring>
        <name>barriers</name>
        <param>
          <type>token</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const psl::array&lt; barrier &gt; &amp;</type>
          <declname>barriers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="77" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1ab8133c3a9cd11c77d76e418db355f67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::barriers</definition>
        <argsstring>(token token, psl::array&lt; std::future&lt; barrier &gt;&gt; &amp;&amp;barriers)</argsstring>
        <name>barriers</name>
        <param>
          <type>token</type>
          <declname>token</declname>
        </param>
        <param>
          <type>psl::array&lt; std::future&lt; barrier &gt;&gt; &amp;&amp;</type>
          <declname>barriers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="78" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1a7ccf4e558e282aa136e2f043774cf6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::barriers</definition>
        <argsstring>(token token, std::future&lt; barrier &gt; &amp;&amp;barrier)</argsstring>
        <name>barriers</name>
        <param>
          <type>token</type>
          <declname>token</declname>
        </param>
        <param>
          <type>std::future&lt; barrier &gt; &amp;&amp;</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="79" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1adfaee1ea56240682ca9c2ddb32579903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::barriers</definition>
        <argsstring>(token token, const psl::array&lt; std::shared_future&lt; barrier &gt;&gt; &amp;barriers)</argsstring>
        <name>barriers</name>
        <param>
          <type>token</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const psl::array&lt; std::shared_future&lt; barrier &gt;&gt; &amp;</type>
          <declname>barriers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="80" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1aa572d48a7d65b146d912d2171cfd2c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::barriers</definition>
        <argsstring>(token token, std::shared_future&lt; barrier &gt; &amp;barrier)</argsstring>
        <name>barriers</name>
        <param>
          <type>token</type>
          <declname>token</declname>
        </param>
        <param>
          <type>std::shared_future&lt; barrier &gt; &amp;</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="81" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1aafdfad92a9b2191b697d753777855579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scheduler::consecutive</definition>
        <argsstring>(token target, psl::array&lt; token &gt; tokens)</argsstring>
        <name>consecutive</name>
        <param>
          <type>token</type>
          <declname>target</declname>
        </param>
        <param>
          <type>psl::array&lt; token &gt;</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="82" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/async/scheduler.cpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classpsl_1_1async_1_1scheduler_1a47a7b9b023734db43d3e7004580ec3bb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t psl::async::scheduler::workers</definition>
        <argsstring>() const noexcept</argsstring>
        <name>workers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="84" column="8" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="84" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" line="18" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/async/scheduler.hpp" bodystart="17" bodyend="92"/>
    <listofallmembers>
      <member refid="classpsl_1_1async_1_1scheduler_1ad346e001c0795618d12f29031e9fdca8" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>barriers</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1ab8133c3a9cd11c77d76e418db355f67e" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>barriers</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a7ccf4e558e282aa136e2f043774cf6c8" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>barriers</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1adfaee1ea56240682ca9c2ddb32579903" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>barriers</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1aa572d48a7d65b146d912d2171cfd2c01" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>barriers</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1aafdfad92a9b2191b697d753777855579" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>consecutive</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a9c6872224a544f3d5529879e46944f14" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>execute</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a056e59ecfcd1eda871a76a0b7c9342c3" prot="private" virt="non-virtual"><scope>psl::async::scheduler</scope><name>m_Invocables</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1ac9c41498c47d407e7075ae2c04ee5e45" prot="private" virt="non-virtual"><scope>psl::async::scheduler</scope><name>m_Tasks</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a10160ad28fd52cb19d4e8133199789b7" prot="private" virt="non-virtual"><scope>psl::async::scheduler</scope><name>m_TokenOffset</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a6dad5bd84b6eac5fea59d9892b64ffa8" prot="private" virt="non-virtual"><scope>psl::async::scheduler</scope><name>m_Workers</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a12e0b35de64a6a8fc093e491c82343e9" prot="private" virt="non-virtual"><scope>psl::async::scheduler</scope><name>m_Workerthreads</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a0494c97e80db5efbbb3562f414408e5c" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>proxy</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1af3ec677777a3f65e6c81842fc7777476" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>schedule</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a835e252ff9c82ae9b6b4aaa843844ada" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>scheduler</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1ac1bd524f3551fbffbc523716d2e523a4" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>sequence</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1aa3a97d1cbc2b098e3c0fea7e5a4379e2" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>sequence</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a65365f4e491e92d60372fc954b36788d" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>sequence</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1acfb537969ba802d63f33f9ce77b5b8dc" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>sequence</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1ae374b1596cd1a94e4d23c3fa62d270e0" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>substitute</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a47a7b9b023734db43d3e7004580ec3bb" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>workers</name></member>
      <member refid="classpsl_1_1async_1_1scheduler_1a4a0e4c12027ab0a23d8aa9e6d9e87ae0" prot="public" virt="non-virtual"><scope>psl::async::scheduler</scope><name>~scheduler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
