<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcore_1_1ivk_1_1pipeline" kind="class" language="C++" prot="public">
    <compoundname>core::ivk::pipeline</compoundname>
    <includes refid="pipeline_8hpp" local="no">pipeline.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1ad6bccf264a55265f8109be98828068e0" prot="private" static="no" mutable="no">
        <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1context" kindref="compound">core::ivk::context</ref> &gt;</type>
        <definition>core::resource::handle&lt;core::ivk::context&gt; core::ivk::pipeline::m_Context</definition>
        <argsstring></argsstring>
        <name>m_Context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="114" column="24" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a5bbb5fab069f4f196d4707666fba7d57" prot="private" static="no" mutable="no">
        <type>vk::DescriptorSet</type>
        <definition>vk::DescriptorSet core::ivk::pipeline::m_DescriptorSet</definition>
        <argsstring></argsstring>
        <name>m_DescriptorSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="116" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a1b288316ec74426f3e979e263583825a" prot="private" static="no" mutable="no">
        <type>vk::DescriptorSetLayout</type>
        <definition>vk::DescriptorSetLayout core::ivk::pipeline::m_DescriptorSetLayout</definition>
        <argsstring></argsstring>
        <name>m_DescriptorSetLayout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="117" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a23e61c6fb118a730d6833a0da75ff35c" prot="private" static="no" mutable="no">
        <type>vk::PipelineLayout</type>
        <definition>vk::PipelineLayout core::ivk::pipeline::m_PipelineLayout</definition>
        <argsstring></argsstring>
        <name>m_PipelineLayout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="118" column="20" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1ac3322305a12c8c661c58277d04e0b5ae" prot="private" static="no" mutable="no">
        <type>vk::Pipeline</type>
        <definition>vk::Pipeline core::ivk::pipeline::m_Pipeline</definition>
        <argsstring></argsstring>
        <name>m_Pipeline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="119" column="14" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a41d40cdbe60837a7771e648d31a5c668" prot="private" static="no" mutable="no">
        <type>vk::PipelineCache &amp;</type>
        <definition>vk::PipelineCache&amp; core::ivk::pipeline::m_PipelineCache</definition>
        <argsstring></argsstring>
        <name>m_PipelineCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="120" column="19" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1af00c4903549f1e009c5f54fe18d7599f" prot="private" static="no" mutable="no">
        <type>vk::PipelineBindPoint</type>
        <definition>vk::PipelineBindPoint core::ivk::pipeline::m_BindPoint</definition>
        <argsstring></argsstring>
        <name>m_BindPoint</name>
        <initializer>{vk::PipelineBindPoint::eGraphics}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="121" column="23" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a3bc9673dd487483622a4184bcbc93c2e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; vk::WriteDescriptorSet &gt;</type>
        <definition>std::vector&lt;vk::WriteDescriptorSet&gt; core::ivk::pipeline::m_DescriptorSets</definition>
        <argsstring></argsstring>
        <name>m_DescriptorSets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="123" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1ad78a421e8e6e9cc9f377206fd34d0b03" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; vk::DescriptorBufferInfo &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;vk::DescriptorBufferInfo&gt; &gt; core::ivk::pipeline::m_TrackedBufferInfos</definition>
        <argsstring></argsstring>
        <name>m_TrackedBufferInfos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="124" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a7b00c607e8633bec34c2626a648dbfaa" prot="private" static="no" mutable="no">
        <type>core::resource::cache_t &amp;</type>
        <definition>core::resource::cache_t&amp; core::ivk::pipeline::m_Cache</definition>
        <argsstring></argsstring>
        <name>m_Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="125" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a1c9139acbbb89f9963a0acf84e846a7e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::ivk::pipeline::m_HasPushConstants</definition>
        <argsstring></argsstring>
        <name>m_HasPushConstants</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="126" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a89a5e827a0c2bc46aaf51cbd54d5c1fd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::ivk::pipeline::m_IsValid</definition>
        <argsstring></argsstring>
        <name>m_IsValid</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="127" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcore_1_1ivk_1_1pipeline_1a14a31f99a33f808b5e207d4bf32e1c1d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool core::ivk::pipeline::m_IsComplete</definition>
        <argsstring></argsstring>
        <name>m_IsComplete</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="128" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1ad850a13736c813aa8a32b1a9383c2ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pipeline::pipeline</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::resource::handle&lt; core::ivk::context &gt; context, core::resource::handle&lt; core::data::material_t &gt; data, vk::PipelineCache &amp;pipelineCache, vk::RenderPass renderPass, uint32_t attachmentCount)</argsstring>
        <name>pipeline</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1context" kindref="compound">core::ivk::context</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>vk::PipelineCache &amp;</type>
          <declname>pipelineCache</declname>
        </param>
        <param>
          <type>vk::RenderPass</type>
          <declname>renderPass</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>attachmentCount</declname>
        </param>
        <briefdescription>
<para>creates a graphics pipeline \warn this constructor will error-out when it detects you trying to create a compute pipeline instead </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="29" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="127" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1add3ccc87dd2f577bfc969f42f6d5416a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline::pipeline</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::resource::metadata &amp;metaData, psl::meta::file *metaFile, core::resource::handle&lt; core::ivk::context &gt; context, core::resource::handle&lt; core::data::material_t &gt; data, vk::PipelineCache &amp;pipelineCache)</argsstring>
        <name>pipeline</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="structcore_1_1resource_1_1metadata" kindref="compound">core::resource::metadata</ref> &amp;</type>
          <declname>metaData</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1meta_1_1file" kindref="compound">psl::meta::file</ref> *</type>
          <declname>metaFile</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1context" kindref="compound">core::ivk::context</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>vk::PipelineCache &amp;</type>
          <declname>pipelineCache</declname>
        </param>
        <briefdescription>
<para>creates a compute pipeline \warn this constructor will error-out when it detects you trying to create a graphics pipeline instead </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1abcfd0f7d1563886f2f5539b528316092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pipeline::~pipeline</definition>
        <argsstring>()</argsstring>
        <name>~pipeline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="47" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="404" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1aaf029c2dc49f342bf75c8723371024a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline::pipeline</definition>
        <argsstring>(const pipeline &amp;)=delete</argsstring>
        <name>pipeline</name>
        <param>
          <type>const <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">pipeline</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a569cc839e082deafee673d663eda3184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline::pipeline</definition>
        <argsstring>(pipeline &amp;&amp;)=delete</argsstring>
        <name>pipeline</name>
        <param>
          <type><ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">pipeline</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1abdf3bb6e03faa49ae8c56f38d5e6ed4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">pipeline</ref> &amp;</type>
        <definition>pipeline&amp; core::ivk::pipeline::operator=</definition>
        <argsstring>(const pipeline &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">pipeline</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="50" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a0275b1f9298bebb57bc43f13a875e27e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">pipeline</ref> &amp;</type>
        <definition>pipeline&amp; core::ivk::pipeline::operator=</definition>
        <argsstring>(pipeline &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcore_1_1ivk_1_1pipeline" kindref="compound">pipeline</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="51" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1add024b0f1ed253f60a439695676ef069" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::has_pushconstants</definition>
        <argsstring>() const noexcept</argsstring>
        <name>has_pushconstants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the pipeline uses any push constants. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="54" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="719" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a830773592844544cc4d9403ef90a7f50" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>vk::Pipeline</type>
        <definition>vk::Pipeline core::ivk::pipeline::vkPipeline</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkPipeline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the vulkan pipeline object of this instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="56" column="14" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1aeb97b8b4029013f9d1155ed474f7e92e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>vk::PipelineLayout</type>
        <definition>vk::PipelineLayout core::ivk::pipeline::vkLayout</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkLayout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the vulkan pipeline layout of this instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="58" column="20" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a8f5a77317b692a47791ea29ee1cba463" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>vk::DescriptorSet const  *</type>
        <definition>vk::DescriptorSet const* core::ivk::pipeline::vkDescriptorSet</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkDescriptorSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the allocated descriptor set for this instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="60" column="25" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a15e5798254efafe31fafa38e30333465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::get</definition>
        <argsstring>(uint32_t bindingLocation, vk::WriteDescriptorSet &amp;out)</argsstring>
        <name>get</name>
        <param>
          <type>uint32_t</type>
          <declname>bindingLocation</declname>
        </param>
        <param>
          <type>vk::WriteDescriptorSet &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if there was a binding at that binding location. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bindingLocation</parametername>
</parameternamelist>
<parameterdescription>
<para>the binding location to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting descriptor set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="65" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="704" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a71e3166fd1b741efdb7840dca37ef093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::update</definition>
        <argsstring>(uint32_t bindingLocation, vk::WriteDescriptorSet descriptor)</argsstring>
        <name>update</name>
        <param>
          <type>uint32_t</type>
          <declname>bindingLocation</declname>
        </param>
        <param>
          <type>vk::WriteDescriptorSet</type>
          <declname>descriptor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if updating that binding location was successful. It has to be a binding point that exists, and is of the correct type, otherwise it returns false. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bindingLocation</parametername>
</parameternamelist>
<parameterdescription>
<para>the binding location to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>the new information to emplace at the location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="71" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="555" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1ae723f34f084dc8e6166156e48fe5e800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::update</definition>
        <argsstring>(uint32_t bindingLocation, const psl::UID &amp;textureMeta, const psl::UID &amp;samplerMeta)</argsstring>
        <name>update</name>
        <param>
          <type>uint32_t</type>
          <declname>bindingLocation</declname>
        </param>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>textureMeta</declname>
        </param>
        <param>
          <type>const <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref> &amp;</type>
          <declname>samplerMeta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if updating that binding location was successful. It has to be a eCombinedImageSampler descriptor binding point to be successful.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bindingLocation</parametername>
</parameternamelist>
<parameterdescription>
<para>the binding location to update.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">textureMeta</parametername>
</parameternamelist>
<parameterdescription>
<para>the new texture to bind to that location.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">samplerMeta</parametername>
</parameternamelist>
<parameterdescription>
<para>the new sampler to bind to that location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="77" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="577" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a75eb65d156bd0a37c16cc052d3c1e951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::update</definition>
        <argsstring>(uint32_t bindingLocation, vk::DeviceSize offset, vk::DeviceSize range)</argsstring>
        <name>update</name>
        <param>
          <type>uint32_t</type>
          <declname>bindingLocation</declname>
        </param>
        <param>
          <type>vk::DeviceSize</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>vk::DeviceSize</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if updating that binding location was successful. It has to be an eStorageBuffer or eUniformBuffer descriptor binding point to be successful. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bindingLocation</parametername>
</parameternamelist>
<parameterdescription>
<para>the binding location to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the new offset of the buffer binding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>the new size of the buffer binding. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="84" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="621" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a363315f47a3cb38539253427c7096f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::unsafe_update</definition>
        <argsstring>(uint32_t bindingLocation, core::resource::handle&lt; core::ivk::buffer_t &gt; buffer, vk::DeviceSize offset, vk::DeviceSize range)</argsstring>
        <name>unsafe_update</name>
        <param>
          <type>uint32_t</type>
          <declname>bindingLocation</declname>
        </param>
        <param>
          <type><ref refid="classcore_1_1resource_1_1handle" kindref="compound">core::resource::handle</ref>&lt; <ref refid="classcore_1_1ivk_1_1buffer__t" kindref="compound">core::ivk::buffer_t</ref> &gt;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>vk::DeviceSize</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>vk::DeviceSize</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if updating the binding location was successful. \warn the buffers&apos;s usage flags have to satisfy the requirements of the binding location. If this method fails inspect the logs to see what specifically went wrong. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bindingLocation</parametername>
</parameternamelist>
<parameterdescription>
<para>the binding location to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the new buffer to bind this descriptorset to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the new offset of the buffer binding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>the new size of the buffer binding. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="93" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="663" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a7a6c8ba753d48e34a9e0c60aa4de80ef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::ivk::pipeline::is_complete</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_complete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the pipeline&apos;s descriptors have been completely filled in \warn complete doesn&apos;t mean &apos;correct&apos;. The descriptors can be filled in to point to missing or deleted items </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="100" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a6167940fbeff3aa0aeaba57903599dab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool core::ivk::pipeline::is_valid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the pipeline was successfully created, when false the pipeline is unrecoverable (inspect logs for reasons) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="104" column="13" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1ad4470b2ad391220ca393c44a115638ca" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>core::ivk::pipeline::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the pipeline was successfully created, when false the pipeline is unrecoverable (inspect logs for reasons) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="107" column="8" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1aba373c26df990d2b870297049630c715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::bind</definition>
        <argsstring>(vk::CommandBuffer &amp;buffer, psl::array_view&lt; uint32_t &gt; dynamicOffsets={})</argsstring>
        <name>bind</name>
        <param>
          <type>vk::CommandBuffer &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>psl::array_view&lt; uint32_t &gt;</type>
          <declname>dynamicOffsets</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="109" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="736" bodyend="743"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a027ec8d86ab7eb8ef66fb3032cf8d7bc" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::completeness_check</definition>
        <argsstring>() noexcept</argsstring>
        <name>completeness_check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="112" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="721" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classcore_1_1ivk_1_1pipeline_1a3d560e3999889c62610f35542c5b23c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pipeline::update</definition>
        <argsstring>(core::resource::cache_t &amp;cache, const core::data::material_t &amp;data, vk::DescriptorSet set)</argsstring>
        <name>update</name>
        <param>
          <type>core::resource::cache_t &amp;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="classcore_1_1data_1_1material__t" kindref="compound">core::data::material_t</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>vk::DescriptorSet</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="113" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp" bodystart="425" bodyend="553"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>encapsulated the concept of a graphics pipeline on the GPU \warn calling the update method family <emphasis>during</emphasis> the recording of the vk::CommandBuffer&apos;s will invalidate the command buffer </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>find a solution around the warning </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" line="25" column="1" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/vk/pipeline.hpp" bodystart="24" bodyend="129"/>
    <listofallmembers>
      <member refid="classcore_1_1ivk_1_1pipeline_1aba373c26df990d2b870297049630c715" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>bind</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a027ec8d86ab7eb8ef66fb3032cf8d7bc" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>completeness_check</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a15e5798254efafe31fafa38e30333465" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>get</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1add024b0f1ed253f60a439695676ef069" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>has_pushconstants</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a7a6c8ba753d48e34a9e0c60aa4de80ef" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>is_complete</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a6167940fbeff3aa0aeaba57903599dab" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>is_valid</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1af00c4903549f1e009c5f54fe18d7599f" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_BindPoint</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a7b00c607e8633bec34c2626a648dbfaa" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_Cache</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1ad6bccf264a55265f8109be98828068e0" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_Context</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a5bbb5fab069f4f196d4707666fba7d57" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_DescriptorSet</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a1b288316ec74426f3e979e263583825a" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_DescriptorSetLayout</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a3bc9673dd487483622a4184bcbc93c2e" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_DescriptorSets</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a1c9139acbbb89f9963a0acf84e846a7e" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_HasPushConstants</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a14a31f99a33f808b5e207d4bf32e1c1d" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_IsComplete</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a89a5e827a0c2bc46aaf51cbd54d5c1fd" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_IsValid</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1ac3322305a12c8c661c58277d04e0b5ae" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_Pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a41d40cdbe60837a7771e648d31a5c668" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_PipelineCache</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a23e61c6fb118a730d6833a0da75ff35c" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_PipelineLayout</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1ad78a421e8e6e9cc9f377206fd34d0b03" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>m_TrackedBufferInfos</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1ad4470b2ad391220ca393c44a115638ca" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>operator bool</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1abdf3bb6e03faa49ae8c56f38d5e6ed4a" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>operator=</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a0275b1f9298bebb57bc43f13a875e27e" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>operator=</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1ad850a13736c813aa8a32b1a9383c2ba6" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1add3ccc87dd2f577bfc969f42f6d5416a" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1aaf029c2dc49f342bf75c8723371024a7" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a569cc839e082deafee673d663eda3184" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>pipeline</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a363315f47a3cb38539253427c7096f7d" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>unsafe_update</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a71e3166fd1b741efdb7840dca37ef093" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>update</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1ae723f34f084dc8e6166156e48fe5e800" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>update</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a75eb65d156bd0a37c16cc052d3c1e951" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>update</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a3d560e3999889c62610f35542c5b23c3" prot="private" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>update</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a8f5a77317b692a47791ea29ee1cba463" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>vkDescriptorSet</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1aeb97b8b4029013f9d1155ed474f7e92e" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>vkLayout</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1a830773592844544cc4d9403ef90a7f50" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>vkPipeline</name></member>
      <member refid="classcore_1_1ivk_1_1pipeline_1abcfd0f7d1563886f2f5539b528316092" prot="public" virt="non-virtual"><scope>core::ivk::pipeline</scope><name>~pipeline</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
