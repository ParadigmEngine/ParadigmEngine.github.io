<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacepsl" kind="namespace" language="C++">
    <compoundname>psl</compoundname>
    <innerclass refid="classpsl_1_1array__view" prot="public">psl::array_view</innerclass>
    <innerclass refid="structpsl_1_1buffer__t" prot="public">psl::buffer_t</innerclass>
    <innerclass refid="classpsl_1_1delegate" prot="public">psl::delegate</innerclass>
    <innerclass refid="classpsl_1_1delegate_3_01_r_07_a_8_8_8_08_4" prot="public">psl::delegate&lt; R(A...)&gt;</innerclass>
    <innerclass refid="classpsl_1_1enumerator" prot="public">psl::enumerator</innerclass>
    <innerclass refid="classpsl_1_1generator" prot="public">psl::generator</innerclass>
    <innerclass refid="classpsl_1_1graph" prot="public">psl::graph</innerclass>
    <innerclass refid="structpsl_1_1handle" prot="public">psl::handle</innerclass>
    <innerclass refid="structpsl_1_1handle_3_01_t_01_5_00_01precision_01_4" prot="public">psl::handle&lt; T *, precision &gt;</innerclass>
    <innerclass refid="classpsl_1_1_i_d_generator" prot="public">psl::IDGenerator</innerclass>
    <innerclass refid="structpsl_1_1local__storage" prot="public">psl::local_storage</innerclass>
    <innerclass refid="structpsl_1_1local__storage_3_010u_01_4" prot="public">psl::local_storage&lt; 0u &gt;</innerclass>
    <innerclass refid="classpsl_1_1pack__view" prot="public">psl::pack_view</innerclass>
    <innerclass refid="classpsl_1_1range" prot="public">psl::range</innerclass>
    <innerclass refid="classpsl_1_1result" prot="public">psl::result</innerclass>
    <innerclass refid="classpsl_1_1ring__array" prot="public">psl::ring_array</innerclass>
    <innerclass refid="classpsl_1_1sorter__insertion" prot="public">psl::sorter_insertion</innerclass>
    <innerclass refid="classpsl_1_1sorter__merge" prot="public">psl::sorter_merge</innerclass>
    <innerclass refid="classpsl_1_1sorter__quick" prot="public">psl::sorter_quick</innerclass>
    <innerclass refid="classpsl_1_1sparse__array" prot="public">psl::sparse_array</innerclass>
    <innerclass refid="classpsl_1_1sparse__indice__array" prot="public">psl::sparse_indice_array</innerclass>
    <innerclass refid="classpsl_1_1static__ring__array" prot="public">psl::static_ring_array</innerclass>
    <innerclass refid="classpsl_1_1timer" prot="public">psl::timer</innerclass>
    <innerclass refid="structpsl_1_1tmat" prot="public">psl::tmat</innerclass>
    <innerclass refid="structpsl_1_1tquat" prot="public">psl::tquat</innerclass>
    <innerclass refid="structpsl_1_1tvec" prot="public">psl::tvec</innerclass>
    <innerclass refid="structpsl_1_1tvec_3_01precision__t_00_011_01_4" prot="public">psl::tvec&lt; precision_t, 1 &gt;</innerclass>
    <innerclass refid="structpsl_1_1tvec_3_01precision__t_00_012_01_4" prot="public">psl::tvec&lt; precision_t, 2 &gt;</innerclass>
    <innerclass refid="structpsl_1_1tvec_3_01precision__t_00_013_01_4" prot="public">psl::tvec&lt; precision_t, 3 &gt;</innerclass>
    <innerclass refid="structpsl_1_1tvec_3_01precision__t_00_014_01_4" prot="public">psl::tvec&lt; precision_t, 4 &gt;</innerclass>
    <innerclass refid="structpsl_1_1_u_i_d" prot="public">psl::UID</innerclass>
    <innerclass refid="classpsl_1_1unique__ptr" prot="public">psl::unique_ptr</innerclass>
    <innerclass refid="classpsl_1_1view__ptr" prot="public">psl::view_ptr</innerclass>
    <innernamespace refid="namespacepsl_1_1async">psl::async</innernamespace>
    <innernamespace refid="namespacepsl_1_1concepts">psl::concepts</innernamespace>
    <innernamespace refid="namespacepsl_1_1details">psl::details</innernamespace>
    <innernamespace refid="namespacepsl_1_1ecs">psl::ecs</innernamespace>
    <innernamespace refid="namespacepsl_1_1format">psl::format</innernamespace>
    <innernamespace refid="namespacepsl_1_1math">psl::math</innernamespace>
    <innernamespace refid="namespacepsl_1_1meta">psl::meta</innernamespace>
    <innernamespace refid="namespacepsl_1_1noise">psl::noise</innernamespace>
    <innernamespace refid="namespacepsl_1_1platform">psl::platform</innernamespace>
    <innernamespace refid="namespacepsl_1_1profiling">psl::profiling</innernamespace>
    <innernamespace refid="namespacepsl_1_1serialization">psl::serialization</innernamespace>
    <innernamespace refid="namespacepsl_1_1sorting">psl::sorting</innernamespace>
    <innernamespace refid="namespacepsl_1_1spmc">psl::spmc</innernamespace>
    <innernamespace refid="namespacepsl_1_1string16">psl::string16</innernamespace>
    <innernamespace refid="namespacepsl_1_1string32">psl::string32</innernamespace>
    <innernamespace refid="namespacepsl_1_1string8">psl::string8</innernamespace>
    <innernamespace refid="namespacepsl_1_1templates">psl::templates</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepsl_1aac2ad8ea89de0f34d4ffaeaef26e5afa" prot="public" static="no" strong="yes">
        <type></type>
        <name>sorter</name>
        <enumvalue id="namespacepsl_1aac2ad8ea89de0f34d4ffaeaef26e5afaaf7befc67e4b1ddf3a03d496537760671" prot="public">
          <name>hybrid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepsl_1aac2ad8ea89de0f34d4ffaeaef26e5afaaaf36731c098358b0ba9801d264a837f5" prot="public">
          <name>quick_3way</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepsl_1aac2ad8ea89de0f34d4ffaeaef26e5afaae0e39b991692259764469b25bfe10b47" prot="public">
          <name>insertion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepsl_1aac2ad8ea89de0f34d4ffaeaef26e5afaa4d4a9aa362b6ffe089fd2e992ccf4f5f" prot="public">
          <name>heap</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepsl_1aac2ad8ea89de0f34d4ffaeaef26e5afaa65464c31b2e6ac04da1fcaa37c9bd9c7" prot="public">
          <name>merge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" line="7" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" bodystart="6" bodyend="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacepsl_1a3e2fc4acb09dca49847bb24372bc85dd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>using psl::vector = typedef buffer&lt;T, Storage&gt;</definition>
        <argsstring></argsstring>
        <name>vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array.hpp" line="7" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array.hpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a609e5ab943426dc775d70f8136eccd7f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>psl::vector&lt; T &gt;</type>
        <definition>using psl::array = typedef psl::vector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array.hpp" line="10" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a2fa85f3ee83ae5b6deae7374a25041c5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KT</type>
          </param>
          <param>
            <type>typename VT</type>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; KT, VT &gt;</type>
        <definition>using psl::bytell_map = typedef std::unordered_map&lt;KT, VT&gt;</definition>
        <argsstring></argsstring>
        <name>bytell_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/bytell_map.hpp" line="17" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/bytell_map.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a774fc727a9654f449234fc652b8a6336" prot="public" static="no">
        <type>tmat&lt; float, 4, 4 &gt;</type>
        <definition>using psl::mat4x4 = typedef tmat&lt;float, 4, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="156" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a0305d0d2bc2273ad15c8a5df4207a84a" prot="public" static="no">
        <type>tmat&lt; double, 4, 4 &gt;</type>
        <definition>using psl::dmat4x4 = typedef tmat&lt;double, 4, 4&gt;</definition>
        <argsstring></argsstring>
        <name>dmat4x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="157" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a998a7a5f1c1dfac4e52b2275998d4a2c" prot="public" static="no">
        <type>tmat&lt; int, 4, 4 &gt;</type>
        <definition>using psl::imat4x4 = typedef tmat&lt;int, 4, 4&gt;</definition>
        <argsstring></argsstring>
        <name>imat4x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="158" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a1ed232fd9109e59b91cb7c3c49f24fd8" prot="public" static="no">
        <type>tmat&lt; size_t, 4, 4 &gt;</type>
        <definition>using psl::mat4x4_sz = typedef tmat&lt;size_t, 4, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x4_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="159" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a470810b70a6346016f9686b1d1f6dd01" prot="public" static="no">
        <type>tmat&lt; float, 4, 3 &gt;</type>
        <definition>using psl::mat4x3 = typedef tmat&lt;float, 4, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="161" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a7baa7c1004b57dd92c86e275ea91cfac" prot="public" static="no">
        <type>tmat&lt; double, 4, 3 &gt;</type>
        <definition>using psl::dmat4x3 = typedef tmat&lt;double, 4, 3&gt;</definition>
        <argsstring></argsstring>
        <name>dmat4x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="162" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a3ef5aa07201b7858254cdf448f7cb157" prot="public" static="no">
        <type>tmat&lt; int, 4, 3 &gt;</type>
        <definition>using psl::imat4x3 = typedef tmat&lt;int, 4, 3&gt;</definition>
        <argsstring></argsstring>
        <name>imat4x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="163" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a479a03e2ef8eeaa2be02399573a570a3" prot="public" static="no">
        <type>tmat&lt; size_t, 4, 3 &gt;</type>
        <definition>using psl::mat4x3_sz = typedef tmat&lt;size_t, 4, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x3_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="164" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a6041c4fab98c9184fff9967ef5604216" prot="public" static="no">
        <type>tmat&lt; float, 4, 2 &gt;</type>
        <definition>using psl::mat4x2 = typedef tmat&lt;float, 4, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="167" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a094d784f84ba0aebff49d37305c054fb" prot="public" static="no">
        <type>tmat&lt; double, 4, 2 &gt;</type>
        <definition>using psl::dmat4x2 = typedef tmat&lt;double, 4, 2&gt;</definition>
        <argsstring></argsstring>
        <name>dmat4x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="168" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a8b7357b7bc00a9dc87b57b90e47fe589" prot="public" static="no">
        <type>tmat&lt; int, 4, 2 &gt;</type>
        <definition>using psl::imat4x2 = typedef tmat&lt;int, 4, 2&gt;</definition>
        <argsstring></argsstring>
        <name>imat4x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="169" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a23584cdb1d27999aa752105519573f4c" prot="public" static="no">
        <type>tmat&lt; size_t, 4, 2 &gt;</type>
        <definition>using psl::mat4x2_sz = typedef tmat&lt;size_t, 4, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x2_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="170" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a288cdd5b016e91c2978276d203b3a362" prot="public" static="no">
        <type>tmat&lt; float, 4, 1 &gt;</type>
        <definition>using psl::mat4x1 = typedef tmat&lt;float, 4, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="173" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ad735bddd8b819bad057575ea665bdce8" prot="public" static="no">
        <type>tmat&lt; double, 4, 1 &gt;</type>
        <definition>using psl::dmat4x1 = typedef tmat&lt;double, 4, 1&gt;</definition>
        <argsstring></argsstring>
        <name>dmat4x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="174" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a5923c408518d6aace9cfccde544b8f65" prot="public" static="no">
        <type>tmat&lt; int, 4, 1 &gt;</type>
        <definition>using psl::imat4x1 = typedef tmat&lt;int, 4, 1&gt;</definition>
        <argsstring></argsstring>
        <name>imat4x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="175" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ad1375f55135a255fcbb00853ba78749d" prot="public" static="no">
        <type>tmat&lt; size_t, 4, 1 &gt;</type>
        <definition>using psl::mat4x1_sz = typedef tmat&lt;size_t, 4, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat4x1_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="176" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1aa6e2cc826d2bcfc2d8dadab92265b513" prot="public" static="no">
        <type>tmat&lt; float, 3, 4 &gt;</type>
        <definition>using psl::mat3x4 = typedef tmat&lt;float, 3, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="179" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ac0beee23a278642d20d2f3fb0c818e54" prot="public" static="no">
        <type>tmat&lt; double, 3, 4 &gt;</type>
        <definition>using psl::dmat3x4 = typedef tmat&lt;double, 3, 4&gt;</definition>
        <argsstring></argsstring>
        <name>dmat3x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="180" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a56b503dc212d7cf4ffd0b54481fa8068" prot="public" static="no">
        <type>tmat&lt; int, 3, 4 &gt;</type>
        <definition>using psl::imat3x4 = typedef tmat&lt;int, 3, 4&gt;</definition>
        <argsstring></argsstring>
        <name>imat3x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="181" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ab63e2b2f760dddb864e23c5e232d3ecf" prot="public" static="no">
        <type>tmat&lt; size_t, 3, 4 &gt;</type>
        <definition>using psl::mat3x4_sz = typedef tmat&lt;size_t, 3, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x4_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="182" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1af2298145127037af0c5af724e322686b" prot="public" static="no">
        <type>tmat&lt; float, 3, 3 &gt;</type>
        <definition>using psl::mat3x3 = typedef tmat&lt;float, 3, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="184" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a59d30e9ee9e78e953209ccb5172716dc" prot="public" static="no">
        <type>tmat&lt; double, 3, 3 &gt;</type>
        <definition>using psl::dmat3x3 = typedef tmat&lt;double, 3, 3&gt;</definition>
        <argsstring></argsstring>
        <name>dmat3x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="185" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ae417268e76d9288cb12b4943cef1a0ae" prot="public" static="no">
        <type>tmat&lt; int, 3, 3 &gt;</type>
        <definition>using psl::imat3x3 = typedef tmat&lt;int, 3, 3&gt;</definition>
        <argsstring></argsstring>
        <name>imat3x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="186" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a25296e36ada9e8093c71adf18301f3c5" prot="public" static="no">
        <type>tmat&lt; size_t, 3, 3 &gt;</type>
        <definition>using psl::mat3x3_sz = typedef tmat&lt;size_t, 3, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x3_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="187" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a9d970ccbe4ea33a3cf115f7c9da81122" prot="public" static="no">
        <type>tmat&lt; float, 3, 2 &gt;</type>
        <definition>using psl::mat3x2 = typedef tmat&lt;float, 3, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="190" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a5164b60f6efaac3da9cf7942febde9ce" prot="public" static="no">
        <type>tmat&lt; double, 3, 2 &gt;</type>
        <definition>using psl::dmat3x2 = typedef tmat&lt;double, 3, 2&gt;</definition>
        <argsstring></argsstring>
        <name>dmat3x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="191" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a5dae9c7191eec085ccbb276095d4fafc" prot="public" static="no">
        <type>tmat&lt; int, 3, 2 &gt;</type>
        <definition>using psl::imat3x2 = typedef tmat&lt;int, 3, 2&gt;</definition>
        <argsstring></argsstring>
        <name>imat3x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="192" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a630e1e0ed6eec09c73a3c34c8b5b8bd8" prot="public" static="no">
        <type>tmat&lt; size_t, 3, 2 &gt;</type>
        <definition>using psl::mat3x2_sz = typedef tmat&lt;size_t, 3, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x2_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="193" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ad5e25cf52a9017ac0a00f969f116a5f9" prot="public" static="no">
        <type>tmat&lt; float, 3, 1 &gt;</type>
        <definition>using psl::mat3x1 = typedef tmat&lt;float, 3, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="196" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a9e68af35a669304b5f1a83b5281eec86" prot="public" static="no">
        <type>tmat&lt; double, 3, 1 &gt;</type>
        <definition>using psl::dmat3x1 = typedef tmat&lt;double, 3, 1&gt;</definition>
        <argsstring></argsstring>
        <name>dmat3x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="197" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ab51f118b0cd3279cfd6d2f4fee67ed47" prot="public" static="no">
        <type>tmat&lt; int, 3, 1 &gt;</type>
        <definition>using psl::imat3x1 = typedef tmat&lt;int, 3, 1&gt;</definition>
        <argsstring></argsstring>
        <name>imat3x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="198" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1afad43a47675b7981f7d30b5136bf14f7" prot="public" static="no">
        <type>tmat&lt; size_t, 3, 1 &gt;</type>
        <definition>using psl::mat3x1_sz = typedef tmat&lt;size_t, 3, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat3x1_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="199" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ac6e6b9392dbf38b036323f3360e3cdc5" prot="public" static="no">
        <type>tmat&lt; float, 2, 4 &gt;</type>
        <definition>using psl::mat2x4 = typedef tmat&lt;float, 2, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="201" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a6ccb53c9fc53fcd7b4cdc675859ef612" prot="public" static="no">
        <type>tmat&lt; double, 2, 4 &gt;</type>
        <definition>using psl::dmat2x4 = typedef tmat&lt;double, 2, 4&gt;</definition>
        <argsstring></argsstring>
        <name>dmat2x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="202" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a7c50918d4894fdda6518f75af1ca12d7" prot="public" static="no">
        <type>tmat&lt; int, 2, 4 &gt;</type>
        <definition>using psl::imat2x4 = typedef tmat&lt;int, 2, 4&gt;</definition>
        <argsstring></argsstring>
        <name>imat2x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="203" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a55fa28ddf274c63c6682788b8c4c86c2" prot="public" static="no">
        <type>tmat&lt; size_t, 2, 4 &gt;</type>
        <definition>using psl::mat2x4_sz = typedef tmat&lt;size_t, 2, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x4_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="204" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a8435c70bb404a2ba41138086f899e450" prot="public" static="no">
        <type>tmat&lt; float, 2, 3 &gt;</type>
        <definition>using psl::mat2x3 = typedef tmat&lt;float, 2, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="206" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ab07c0e2bb5b533eafc8a09fb82fd5ef4" prot="public" static="no">
        <type>tmat&lt; double, 2, 3 &gt;</type>
        <definition>using psl::dmat2x3 = typedef tmat&lt;double, 2, 3&gt;</definition>
        <argsstring></argsstring>
        <name>dmat2x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="207" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a957453933caa7e7cc063f77009c4a19a" prot="public" static="no">
        <type>tmat&lt; int, 2, 3 &gt;</type>
        <definition>using psl::imat2x3 = typedef tmat&lt;int, 2, 3&gt;</definition>
        <argsstring></argsstring>
        <name>imat2x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="208" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1aced8fbdcd5cf5f786bffae8c489405fa" prot="public" static="no">
        <type>tmat&lt; size_t, 2, 3 &gt;</type>
        <definition>using psl::mat2x3_sz = typedef tmat&lt;size_t, 2, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x3_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="209" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a2da10079b7423df1523e5df4ff8c6e43" prot="public" static="no">
        <type>tmat&lt; float, 2, 2 &gt;</type>
        <definition>using psl::mat2x2 = typedef tmat&lt;float, 2, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="212" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a852d16da4e0892c954c9cb3ed45f01d9" prot="public" static="no">
        <type>tmat&lt; double, 2, 2 &gt;</type>
        <definition>using psl::dmat2x2 = typedef tmat&lt;double, 2, 2&gt;</definition>
        <argsstring></argsstring>
        <name>dmat2x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="213" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a6fe652e10dcdd675ec1a99b5fecb2eb8" prot="public" static="no">
        <type>tmat&lt; int, 2, 2 &gt;</type>
        <definition>using psl::imat2x2 = typedef tmat&lt;int, 2, 2&gt;</definition>
        <argsstring></argsstring>
        <name>imat2x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="214" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a3c5ee6fffcb8c98600154fb46891c3e2" prot="public" static="no">
        <type>tmat&lt; size_t, 2, 2 &gt;</type>
        <definition>using psl::mat2x2_sz = typedef tmat&lt;size_t, 2, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x2_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="215" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a5922eef3b875fbcf3633f95a4862d3b3" prot="public" static="no">
        <type>tmat&lt; float, 2, 1 &gt;</type>
        <definition>using psl::mat2x1 = typedef tmat&lt;float, 2, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="218" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a54d2325e01fcb86cadf08a1995d84fb6" prot="public" static="no">
        <type>tmat&lt; double, 2, 1 &gt;</type>
        <definition>using psl::dmat2x1 = typedef tmat&lt;double, 2, 1&gt;</definition>
        <argsstring></argsstring>
        <name>dmat2x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="219" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a399170d1ed9767c3a3e3e312f058047c" prot="public" static="no">
        <type>tmat&lt; int, 2, 1 &gt;</type>
        <definition>using psl::imat2x1 = typedef tmat&lt;int, 2, 1&gt;</definition>
        <argsstring></argsstring>
        <name>imat2x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="220" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a15c7014f7c740ecd325025103c70ddbf" prot="public" static="no">
        <type>tmat&lt; size_t, 2, 1 &gt;</type>
        <definition>using psl::mat2x1_sz = typedef tmat&lt;size_t, 2, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat2x1_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="221" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1afac85d48a1f6c04c8055b383d55a8e82" prot="public" static="no">
        <type>tmat&lt; float, 1, 4 &gt;</type>
        <definition>using psl::mat1x4 = typedef tmat&lt;float, 1, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="223" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a7ff919068d17ec99bbab354ddd2b32e8" prot="public" static="no">
        <type>tmat&lt; double, 1, 4 &gt;</type>
        <definition>using psl::dmat1x4 = typedef tmat&lt;double, 1, 4&gt;</definition>
        <argsstring></argsstring>
        <name>dmat1x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="224" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a1459a6edfdd3047940b0df5e18b07e8e" prot="public" static="no">
        <type>tmat&lt; int, 1, 4 &gt;</type>
        <definition>using psl::imat1x4 = typedef tmat&lt;int, 1, 4&gt;</definition>
        <argsstring></argsstring>
        <name>imat1x4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="225" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a2352ca7b222ecab14c893e8605c7b126" prot="public" static="no">
        <type>tmat&lt; size_t, 1, 4 &gt;</type>
        <definition>using psl::mat1x4_sz = typedef tmat&lt;size_t, 1, 4&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x4_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="226" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1aa6a77569ac98f2c8d209b781c15449bc" prot="public" static="no">
        <type>tmat&lt; float, 1, 3 &gt;</type>
        <definition>using psl::mat1x3 = typedef tmat&lt;float, 1, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="228" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a623dd97fd8f040664e3b4c2701765a79" prot="public" static="no">
        <type>tmat&lt; double, 1, 3 &gt;</type>
        <definition>using psl::dmat1x3 = typedef tmat&lt;double, 1, 3&gt;</definition>
        <argsstring></argsstring>
        <name>dmat1x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="229" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a79b2dd6cb71c1a8f502d7ac5050fc123" prot="public" static="no">
        <type>tmat&lt; int, 1, 3 &gt;</type>
        <definition>using psl::imat1x3 = typedef tmat&lt;int, 1, 3&gt;</definition>
        <argsstring></argsstring>
        <name>imat1x3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="230" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a9e44eb992cf6b05a3b79233778f44b84" prot="public" static="no">
        <type>tmat&lt; size_t, 1, 3 &gt;</type>
        <definition>using psl::mat1x3_sz = typedef tmat&lt;size_t, 1, 3&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x3_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="231" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a63b58a6c4355a9180e99ece64d5bd799" prot="public" static="no">
        <type>tmat&lt; float, 1, 2 &gt;</type>
        <definition>using psl::mat1x2 = typedef tmat&lt;float, 1, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="234" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a45fd10f979bab4d505de8027d5eeb66f" prot="public" static="no">
        <type>tmat&lt; double, 1, 2 &gt;</type>
        <definition>using psl::dmat1x2 = typedef tmat&lt;double, 1, 2&gt;</definition>
        <argsstring></argsstring>
        <name>dmat1x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="235" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ae5346fe3b46e0904d343642c85cf2e33" prot="public" static="no">
        <type>tmat&lt; int, 1, 2 &gt;</type>
        <definition>using psl::imat1x2 = typedef tmat&lt;int, 1, 2&gt;</definition>
        <argsstring></argsstring>
        <name>imat1x2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="236" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a81fa8ed4fdb34b372c7c3bf7c4366b1f" prot="public" static="no">
        <type>tmat&lt; size_t, 1, 2 &gt;</type>
        <definition>using psl::mat1x2_sz = typedef tmat&lt;size_t, 1, 2&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x2_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="237" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a06b7c1d8a4548f2f674c627e9b2b9fde" prot="public" static="no">
        <type>tmat&lt; float, 1, 1 &gt;</type>
        <definition>using psl::mat1x1 = typedef tmat&lt;float, 1, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="240" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1adbe3c0cd3ba818705cf926630c206e3f" prot="public" static="no">
        <type>tmat&lt; double, 1, 1 &gt;</type>
        <definition>using psl::dmat1x1 = typedef tmat&lt;double, 1, 1&gt;</definition>
        <argsstring></argsstring>
        <name>dmat1x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="241" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ada2d366bcf97e3d8355ff3cf47b395ba" prot="public" static="no">
        <type>tmat&lt; int, 1, 1 &gt;</type>
        <definition>using psl::imat1x1 = typedef tmat&lt;int, 1, 1&gt;</definition>
        <argsstring></argsstring>
        <name>imat1x1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="242" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1aecd4877179aa37a24c940605f2d92a48" prot="public" static="no">
        <type>tmat&lt; size_t, 1, 1 &gt;</type>
        <definition>using psl::mat1x1_sz = typedef tmat&lt;size_t, 1, 1&gt;</definition>
        <argsstring></argsstring>
        <name>mat1x1_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" line="243" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/matrix.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ae38cf9b711b3902c3e15634de278368d" prot="public" static="no">
        <type>tquat&lt; float &gt;</type>
        <definition>using psl::quat = typedef tquat&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>quat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="59" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1adbd6ad2c6298432241921e6c762d5841" prot="public" static="no">
        <type>tquat&lt; double &gt;</type>
        <definition>using psl::dquat = typedef tquat&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>dquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="60" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a327e7bfaaea3bd1b90fd90fe2b8aba17" prot="public" static="no">
        <type>tquat&lt; int &gt;</type>
        <definition>using psl::iquat = typedef tquat&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>iquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="61" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ad20b2f92726934187df938cc8c67529e" prot="public" static="no">
        <type>tquat&lt; size_t &gt;</type>
        <definition>using psl::quat_sz = typedef tquat&lt;size_t&gt;</definition>
        <argsstring></argsstring>
        <name>quat_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="62" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1abd125ced579cb8f136ec2ad10cb53b49" prot="public" static="no">
        <type>psl::tvec&lt; float, 1 &gt;</type>
        <definition>using psl::vec1 = typedef psl::tvec&lt;float, 1&gt;</definition>
        <argsstring></argsstring>
        <name>vec1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="705" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ab9ae76006e71584db201f753b51ad791" prot="public" static="no">
        <type>psl::tvec&lt; float, 2 &gt;</type>
        <definition>using psl::vec2 = typedef psl::tvec&lt;float, 2&gt;</definition>
        <argsstring></argsstring>
        <name>vec2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="706" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a19dd7bd8998e5fb33c4e33ba9cfc69ff" prot="public" static="no">
        <type>psl::tvec&lt; float, 3 &gt;</type>
        <definition>using psl::vec3 = typedef psl::tvec&lt;float, 3&gt;</definition>
        <argsstring></argsstring>
        <name>vec3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="707" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a70044ad4a23bf8a62ab182a3444d69a0" prot="public" static="no">
        <type>psl::tvec&lt; float, 4 &gt;</type>
        <definition>using psl::vec4 = typedef psl::tvec&lt;float, 4&gt;</definition>
        <argsstring></argsstring>
        <name>vec4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="708" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a6a29f649c66df6824dddeefc4190446b" prot="public" static="no">
        <type>psl::tvec&lt; double, 1 &gt;</type>
        <definition>using psl::dvec1 = typedef psl::tvec&lt;double, 1&gt;</definition>
        <argsstring></argsstring>
        <name>dvec1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="710" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a3a7d94992d25fd4eb2b9b4356e675f22" prot="public" static="no">
        <type>psl::tvec&lt; double, 2 &gt;</type>
        <definition>using psl::dvec2 = typedef psl::tvec&lt;double, 2&gt;</definition>
        <argsstring></argsstring>
        <name>dvec2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="711" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a9eb2565b93f93d006e97d18e14ffaaac" prot="public" static="no">
        <type>psl::tvec&lt; double, 3 &gt;</type>
        <definition>using psl::dvec3 = typedef psl::tvec&lt;double, 3&gt;</definition>
        <argsstring></argsstring>
        <name>dvec3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="712" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a457779749bd9381554d69e4d60d2357e" prot="public" static="no">
        <type>psl::tvec&lt; double, 4 &gt;</type>
        <definition>using psl::dvec4 = typedef psl::tvec&lt;double, 4&gt;</definition>
        <argsstring></argsstring>
        <name>dvec4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="713" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1afe963dfe527b52934a81548212fd328d" prot="public" static="no">
        <type>psl::tvec&lt; int, 1 &gt;</type>
        <definition>using psl::ivec1 = typedef psl::tvec&lt;int, 1&gt;</definition>
        <argsstring></argsstring>
        <name>ivec1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="715" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a4cacd6ff553084dd2e38637f88513a29" prot="public" static="no">
        <type>psl::tvec&lt; int, 2 &gt;</type>
        <definition>using psl::ivec2 = typedef psl::tvec&lt;int, 2&gt;</definition>
        <argsstring></argsstring>
        <name>ivec2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="716" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ae1a7bed53737ee758cbbe6a42135d88c" prot="public" static="no">
        <type>psl::tvec&lt; int, 3 &gt;</type>
        <definition>using psl::ivec3 = typedef psl::tvec&lt;int, 3&gt;</definition>
        <argsstring></argsstring>
        <name>ivec3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="717" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ae2a7a4c4529a9853739621b97e63c853" prot="public" static="no">
        <type>psl::tvec&lt; int, 4 &gt;</type>
        <definition>using psl::ivec4 = typedef psl::tvec&lt;int, 4&gt;</definition>
        <argsstring></argsstring>
        <name>ivec4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="718" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a7dc2c6f0c28c149aa570c1573c0eed77" prot="public" static="no">
        <type>psl::tvec&lt; size_t, 1 &gt;</type>
        <definition>using psl::vec1_sz = typedef psl::tvec&lt;size_t, 1&gt;</definition>
        <argsstring></argsstring>
        <name>vec1_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="720" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a2c63ee00cae4f59076e2e12c735b591a" prot="public" static="no">
        <type>psl::tvec&lt; size_t, 2 &gt;</type>
        <definition>using psl::vec2_sz = typedef psl::tvec&lt;size_t, 2&gt;</definition>
        <argsstring></argsstring>
        <name>vec2_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="721" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a25c49c6185a235b2b2dd2e07a55e3f5c" prot="public" static="no">
        <type>psl::tvec&lt; size_t, 3 &gt;</type>
        <definition>using psl::vec3_sz = typedef psl::tvec&lt;size_t, 3&gt;</definition>
        <argsstring></argsstring>
        <name>vec3_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="722" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a7569ba89301a8b97611b561facee288d" prot="public" static="no">
        <type>psl::tvec&lt; size_t, 4 &gt;</type>
        <definition>using psl::vec4_sz = typedef psl::tvec&lt;size_t, 4&gt;</definition>
        <argsstring></argsstring>
        <name>vec4_sz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="723" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a506ea7e1f41b3bd242356c15a8703819" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, N &gt;</type>
        <definition>using psl::static_array = typedef std::array&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>static_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/static_array.hpp" line="8" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/static_array.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a43b65b204a3e0e9c10d26a59c456139a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KT</type>
          </param>
          <param>
            <type>typename VT</type>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; KT, VT &gt;</type>
        <definition>using psl::unordered_map = typedef std::unordered_map&lt;KT, VT&gt;</definition>
        <argsstring></argsstring>
        <name>unordered_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/unordered_map.hpp" line="7" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/unordered_map.hpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ac7892d6a968c132663a90145e821c26b" prot="public" static="no">
        <type>std::basic_string&lt; string8::char_t, std::char_traits&lt; string8::char_t &gt; &gt;</type>
        <definition>using psl::string8_t = typedef std::basic_string&lt;string8::char_t, std::char_traits&lt;string8::char_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>string8_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="92" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ab3800deb9beabfe4e09c075075923bec" prot="public" static="no">
        <type>std::basic_string&lt; string16::char_t, std::char_traits&lt; string16::char_t &gt; &gt;</type>
        <definition>using psl::string16_t = typedef std::basic_string&lt;string16::char_t, std::char_traits&lt;string16::char_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>string16_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="93" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a58ba03803d495f31027d7a0d431b0152" prot="public" static="no">
        <type>std::basic_string&lt; string32::char_t, std::char_traits&lt; string32::char_t &gt; &gt;</type>
        <definition>using psl::string32_t = typedef std::basic_string&lt;string32::char_t, std::char_traits&lt;string32::char_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>string32_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="94" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1aabe2b89b2fcb7960d7ae60c48eb71efa" prot="public" static="no">
        <type>platform::char_t</type>
        <definition>using psl::pchar_t = typedef platform::char_t</definition>
        <argsstring></argsstring>
        <name>pchar_t</name>
        <briefdescription>
<para>platform conditional string type, turns into char or wchar depending on the platform and compile options </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="97" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a25e0db97f096b755286f5ac2cd9f9a04" prot="public" static="no">
        <type>std::basic_string&lt; <ref refid="namespacepsl_1aabe2b89b2fcb7960d7ae60c48eb71efa" kindref="member">pchar_t</ref>, std::char_traits&lt; <ref refid="namespacepsl_1aabe2b89b2fcb7960d7ae60c48eb71efa" kindref="member">pchar_t</ref> &gt; &gt;</type>
        <definition>using psl::pstring_t = typedef std::basic_string&lt;pchar_t, std::char_traits&lt;pchar_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>pstring_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="98" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a5d21cdbe1f2c04b94b2a4674de0f5fde" prot="public" static="no">
        <type>string8_t</type>
        <definition>using psl::string = typedef string8_t</definition>
        <argsstring></argsstring>
        <name>string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="115" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1ae3a22c89857046a4886c58c5e7743060" prot="public" static="no">
        <type>string8::char_t</type>
        <definition>using psl::char_t = typedef string8::char_t</definition>
        <argsstring></argsstring>
        <name>char_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="116" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a410ffef54619c8dff3cdf8bd46755632" prot="public" static="no">
        <type>string8::view</type>
        <definition>using psl::string_view = typedef string8::view</definition>
        <argsstring></argsstring>
        <name>string_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="117" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a998da8572c087d8d101d2e52bbd04a9f" prot="public" static="no">
        <type>string8::stream</type>
        <definition>using psl::stringstream = typedef string8::stream</definition>
        <argsstring></argsstring>
        <name>stringstream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="118" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a3420815598cf09879d0f0ad82d7708c0" prot="public" static="no">
        <type>string8::ostream</type>
        <definition>using psl::ostream = typedef string8::ostream</definition>
        <argsstring></argsstring>
        <name>ostream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="119" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a217547564d3f613d97ecae1537a2e36e" prot="public" static="no">
        <type>string8::ofstream</type>
        <definition>using psl::ofstream = typedef string8::ofstream</definition>
        <argsstring></argsstring>
        <name>ofstream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="120" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a1861304bd69209326db4cbc2fdd9358e" prot="public" static="no">
        <type>string8::istream</type>
        <definition>using psl::istream = typedef string8::istream</definition>
        <argsstring></argsstring>
        <name>istream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="121" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1a3f41d926b1acc197177798373d430968" prot="public" static="no">
        <type>string8::ifstream</type>
        <definition>using psl::ifstream = typedef string8::ifstream</definition>
        <argsstring></argsstring>
        <name>ifstream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="122" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepsl_1afced1ddf9788c64c60bf55dd337a6051" prot="public" static="no">
        <type>string8::fstream</type>
        <definition>using psl::fstream = typedef string8::fstream</definition>
        <argsstring></argsstring>
        <name>fstream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="123" column="1" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepsl_1ae977a1c250287f37dc5f344a7860dce9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t psl::uchar_size</definition>
        <argsstring></argsstring>
        <name>uchar_size</name>
        <initializer>{sizeof(string8::char_t)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="114" column="25" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepsl_1a88f449c5bfc71ef19c67b07e7bcc7057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class Pred</type>
          </param>
          <param>
            <type>class Fct</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void psl::transform_if</definition>
        <argsstring>(InputIt first, InputIt last, OutputIt dest, Pred pred, Fct transform)</argsstring>
        <name>transform_if</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Pred</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>Fct</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/core/inc/resource/cache.hpp" line="19" column="6" bodyfile="/home/runner/work/paradigm/paradigm/core/inc/resource/cache.hpp" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a5cba1c92950849c27fa4716785d28a0d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Sorter</type>
          </param>
          <param>
            <type>typename It</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void psl::sort</definition>
        <argsstring>(Sorter &amp;&amp;, const It first, const It last, Pred &amp;&amp;pred) noexcept</argsstring>
        <name>sort</name>
        <param>
          <type>Sorter &amp;&amp;</type>
        </param>
        <param>
          <type>const It</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const It</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Pred &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" line="93" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" bodystart="93" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a77dffb25b3a0debcc74df6e8c4fbc9e2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Sorter</type>
          </param>
          <param>
            <type>typename It</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void psl::sort</definition>
        <argsstring>(Sorter &amp;&amp;, const It first, const It last) noexcept</argsstring>
        <name>sort</name>
        <param>
          <type>Sorter &amp;&amp;</type>
        </param>
        <param>
          <type>const It</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const It</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" line="111" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" bodystart="111" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ade2b6231b7da0b1a3d12636d12ca5185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>InputIt1</type>
        <definition>InputIt1 psl::inplace_set_difference</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, Compare comp)</argsstring>
        <name>inplace_set_difference</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" line="129" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" bodystart="129" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a443491cf748aabc3c3c4c417f460c1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
        </templateparamlist>
        <type>InputIt1</type>
        <definition>InputIt1 psl::inplace_set_difference</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2)</argsstring>
        <name>inplace_set_difference</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" line="158" column="10" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/algorithm.hpp" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a3ded86f3be6a1fa3507c7337b2701ea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IT</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::array_view</definition>
        <argsstring>(IT first, IT last) -&gt; array_view&lt; typename std::iterator_traits&lt; IT &gt;::value_type &gt;</argsstring>
        <name>array_view</name>
        <param>
          <type>IT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IT</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="202" column="1" declfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" declline="202" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aaa1c9b7ffdc9d5c35ca4fcf6859a6431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IT</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>psl::array_view</definition>
        <argsstring>(IT first, size_t count) -&gt; array_view&lt; typename std::iterator_traits&lt; IT &gt;::value_type &gt;</argsstring>
        <name>array_view</name>
        <param>
          <type>IT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" line="206" column="1" declfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/array_view.hpp" declline="206" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a209f9f0462c407afba191e6ea347b86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto psl::enumerate</definition>
        <argsstring>(T first, T last, typename enumerator&lt; T &gt;::index_t index=0) -&gt; enumerator&lt; T &gt;</argsstring>
        <name>enumerate</name>
        <param>
          <type>T</type>
          <declname>first</declname>
        </param>
        <param>
          <type>T</type>
          <declname>last</declname>
        </param>
        <param>
          <type>typename enumerator&lt; T &gt;::index_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/enumerate.hpp" line="82" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/enumerate.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad9224ce5596cfae5b16645f801802178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto psl::enumerate</definition>
        <argsstring>(T &amp;content) -&gt; enumerator&lt; T &gt;</argsstring>
        <name>enumerate</name>
        <param>
          <type>T &amp;</type>
          <declname>content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/enumerate.hpp" line="88" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/enumerate.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a9077e038c05735c20217e39303891e4f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>d1</declname>
            <defname>d1</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>d2</declname>
            <defname>d2</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>d3</declname>
            <defname>d3</defname>
          </param>
        </templateparamlist>
        <type>constexpr tmat&lt; precision_t, d1, d3 &gt;</type>
        <definition>constexpr tmat&lt;precision_t, d1, d3&gt; psl::operator*</definition>
        <argsstring>(const tmat&lt; precision_t, d1, d2 &gt; &amp;left, const tmat&lt; precision_t, d2, d3 &gt; &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tmat&lt; precision_t, d1, d2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tmat&lt; precision_t, d2, d3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/matrix.hpp" line="8" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/matrix.hpp" bodystart="8" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aec1f03dcce111b50d52de83e7310aa2a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt; &amp;</type>
        <definition>constexpr tquat&lt;precision_t&gt;&amp; psl::operator+=</definition>
        <argsstring>(tquat&lt; precision_t &gt; &amp;owner, const tquat&lt; precision_t &gt; &amp;other) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>tquat&lt; precision_t &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" line="8" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" bodystart="8" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a97bf9b855d46f3b0b8c9c0a94a7946a5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt; &amp;</type>
        <definition>constexpr tquat&lt;precision_t&gt;&amp; psl::operator*=</definition>
        <argsstring>(tquat&lt; precision_t &gt; &amp;owner, const tquat&lt; precision_t &gt; &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tquat&lt; precision_t &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" line="18" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" bodystart="18" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a095eb832545f227299b368785d8d2d97" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt; &amp;</type>
        <definition>constexpr tquat&lt;precision_t&gt;&amp; psl::operator/=</definition>
        <argsstring>(tquat&lt; precision_t &gt; &amp;owner, const tquat&lt; precision_t &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>tquat&lt; precision_t &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" line="34" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" bodystart="34" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae84f714f4906874184ce2c111bf60f92" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt; &amp;</type>
        <definition>constexpr tquat&lt;precision_t&gt;&amp; psl::operator-=</definition>
        <argsstring>(tquat&lt; precision_t &gt; &amp;owner, const tquat&lt; precision_t &gt; &amp;other) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>tquat&lt; precision_t &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" line="47" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/quaternion.hpp" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a7f5611ca9f56855959c953ec309af21a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt;&amp; psl::operator+=</definition>
        <argsstring>(tvec&lt; precision_t, 4 &gt; &amp;owner, const tvec&lt; precision_t, 4 &gt; &amp;other) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" line="8" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" bodystart="8" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a8ac30b250d04b3b95e811b843e407ffb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 4 &gt; &amp;owner, const tvec&lt; precision_t, 4 &gt; &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" line="18" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" bodystart="18" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1adee6ccb9a9efc9623e6f870369d8ed92" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 4 &gt; &amp;owner, const tvec&lt; precision_t, 4 &gt; &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" line="27" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" bodystart="27" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a3eea08e7f5109c0f714fc14373eb301b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt;&amp; psl::operator-=</definition>
        <argsstring>(tvec&lt; precision_t, 4 &gt; &amp;owner, const tvec&lt; precision_t, 4 &gt; &amp;other) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" line="36" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/fallback/vec.hpp" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a31ddc756e63c098d199910df2d86b634" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr psl::tvec&lt; precision_t, 3 &gt;</type>
        <definition>constexpr psl::tvec&lt;precision_t, 3&gt; psl::operator*</definition>
        <argsstring>(const psl::tquat&lt; precision_t &gt; &amp;quat, const psl::tvec&lt; precision_t, 3 &gt; &amp;vec) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const psl::tquat&lt; precision_t &gt; &amp;</type>
          <declname>quat</declname>
        </param>
        <param>
          <type>const psl::tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/math.hpp" line="19" column="21" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/math.hpp" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ab2ea84d5e6789f2b89a24da632d53aa5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt; &amp;</type>
        <definition>constexpr tquat&lt;precision_t&gt;&amp; psl::operator*=</definition>
        <argsstring>(tquat&lt; precision_t &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tquat&lt; precision_t &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="76" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="76" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae886cd2fa74c09f0de4543717b64b818" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt; &amp;</type>
        <definition>constexpr tquat&lt;precision_t&gt;&amp; psl::operator/=</definition>
        <argsstring>(tquat&lt; precision_t &gt; &amp;owner, const precision_t &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>tquat&lt; precision_t &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="90" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="90" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1afd9134a91b6e6fd4aef04552314b0968" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt;</type>
        <definition>constexpr tquat&lt;precision_t&gt; psl::operator+</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const tquat&lt; precision_t &gt; &amp;right) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="103" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a32c50ad9465da7c0abe292cb7b507e54" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt;</type>
        <definition>constexpr tquat&lt;precision_t&gt; psl::operator*</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const tquat&lt; precision_t &gt; &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="110" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a348ccc483f846f617de917190a8abe85" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt;</type>
        <definition>constexpr tquat&lt;precision_t&gt; psl::operator/</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const tquat&lt; precision_t &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="117" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a35ad2bb7df4f4e9bb9885621aaba5fef" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt;</type>
        <definition>constexpr tquat&lt;precision_t&gt; psl::operator*</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="124" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aa7d8872f52f5100fc5f202c9ce8fbdc5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt;</type>
        <definition>constexpr tquat&lt;precision_t&gt; psl::operator/</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const precision_t &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="131" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1af31c627c7a52520f0befa65548d725b3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tquat&lt; precision_t &gt;</type>
        <definition>constexpr tquat&lt;precision_t&gt; psl::operator-</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const tquat&lt; precision_t &gt; &amp;right) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="138" column="17" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="138" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a77ef6f1d7fa174becf275e9c9f6fdc3d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const tquat&lt; precision_t &gt; &amp;right) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="146" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a200f3ac9f33dff011e168cfce2b7e3d0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(const tquat&lt; precision_t &gt; &amp;left, const tquat&lt; precision_t &gt; &amp;right) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tquat&lt; precision_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" line="151" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/quaternion.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a0c94d7c6580b122522b29938063acae4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt;&amp; psl::operator+=</definition>
        <argsstring>(tvec&lt; precision_t, 1 &gt; &amp;owner, const tvec&lt; precision_t, 1 &gt; &amp;other) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="809" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="809" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad27caf601a7d74aa59d6be81798497a1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 1 &gt; &amp;owner, const tvec&lt; precision_t, 1 &gt; &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="816" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="816" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1af7a69875dda176f553b69cd93fc0061e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 1 &gt; &amp;owner, const tvec&lt; precision_t, 1 &gt; &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="822" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="822" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a2ebdffe3275fb7ac44fa9b4bebd89911" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 1 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="831" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="831" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a34ba4e6f1a605de583f688fd8d22d190" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 1 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="837" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="837" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a11fae26dc427cfb4e329b88d84d1b3e9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt;&amp; psl::operator-=</definition>
        <argsstring>(tvec&lt; precision_t, 1 &gt; &amp;owner, const tvec&lt; precision_t, 1 &gt; &amp;other) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="846" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="846" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a3011dd13a5f82d230343a67ca549ed11" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt; psl::operator+</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const tvec&lt; precision_t, 1 &gt; &amp;right) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="853" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="853" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a12a88b2ddbabb1823c46f526c062fac1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const tvec&lt; precision_t, 1 &gt; &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="861" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="861" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1afffe048ea19a32e0c64d83ba32e20f03" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const tvec&lt; precision_t, 1 &gt; &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="869" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="869" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aab09f41dc1a7ef23d1cd44d7c6b30ac4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="877" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="877" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a3d229deb515fca69cdd708f61f414634" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="884" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="884" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1acd791a5ea41d0f957470d9771aca742b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 1 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 1&gt; psl::operator-</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const tvec&lt; precision_t, 1 &gt; &amp;right) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="891" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="891" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a5d7bb2b05b7cc1f77d9c38ed55c44157" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const tvec&lt; precision_t, 1 &gt; &amp;right) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="900" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="900" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ac1fe337760bcd89cb44bd3458da17b5a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(const tvec&lt; precision_t, 1 &gt; &amp;left, const tvec&lt; precision_t, 1 &gt; &amp;right) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 1 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="906" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="906" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1af06307a88938097131f1aa9c8fb4d7f1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt;&amp; psl::operator+=</definition>
        <argsstring>(tvec&lt; precision_t, 2 &gt; &amp;owner, const tvec&lt; precision_t, 2 &gt; &amp;other) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="915" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="915" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ade5f1b13d0cfd82704710fa18da72080" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 2 &gt; &amp;owner, const tvec&lt; precision_t, 2 &gt; &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="923" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="923" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aec52dbe43e209f5c7c57504ca0518688" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 2 &gt; &amp;owner, const tvec&lt; precision_t, 2 &gt; &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="930" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="930" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a06198bd346f82159f4fd8e0ae7412711" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 2 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="940" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="940" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a84ee1e8a5230ad3ca6acd944fbb39fa9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 2 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="947" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="947" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a207c15467f7bc3b59a1773d77848090e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt;&amp; psl::operator-=</definition>
        <argsstring>(tvec&lt; precision_t, 2 &gt; &amp;owner, const tvec&lt; precision_t, 2 &gt; &amp;other) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="957" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="957" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a0338123c94d560e1b7aea23b3572d95c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt; psl::operator+</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const tvec&lt; precision_t, 2 &gt; &amp;right) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="965" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="965" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1acfc82c1bad11f6028f67b13bd24b0a6e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const tvec&lt; precision_t, 2 &gt; &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="974" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="974" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a0b7e7e9673e55110fc253059e598e3d2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const tvec&lt; precision_t, 2 &gt; &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="983" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="983" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a51b0c1fd93bd68d2288a7f2033887cc1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="992" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="992" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1af80c7ea55909e7e64148fa236dc513a2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1000" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1000" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ac637c3c40430648c0568522065b4d88a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 2 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 2&gt; psl::operator-</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const tvec&lt; precision_t, 2 &gt; &amp;right) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1008" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1008" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad53fa103bc59b5f3a1bf4652bc525f2c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const tvec&lt; precision_t, 2 &gt; &amp;right) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1018" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1018" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a7d1caafaf843bd5d041c6f57a41ebfc8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(const tvec&lt; precision_t, 2 &gt; &amp;left, const tvec&lt; precision_t, 2 &gt; &amp;right) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 2 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1024" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1024" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a83e1dcdef30c04c94f565ada8e463a62" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt;&amp; psl::operator+=</definition>
        <argsstring>(tvec&lt; precision_t, 3 &gt; &amp;owner, const tvec&lt; precision_t, 3 &gt; &amp;other) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1033" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1033" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ab003b76607e28d0f128d985b7e7b94d0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 3 &gt; &amp;owner, const tvec&lt; precision_t, 3 &gt; &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1042" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1042" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1abbd60cc18a5b31b3d5ca14bb1ad794c7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 3 &gt; &amp;owner, const tvec&lt; precision_t, 3 &gt; &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1050" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1050" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1addd6c1b435fd0ab5727805f5ddccf309" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 3 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1063" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1063" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad0b2ea4c8e3bc06afd8c0283dfee4d5c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 3 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1071" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1071" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a8adc2fa221cc7f35823e7a68290743f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt;&amp; psl::operator-=</definition>
        <argsstring>(tvec&lt; precision_t, 3 &gt; &amp;owner, const tvec&lt; precision_t, 3 &gt; &amp;other) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1084" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1084" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aa66401ef0a9810898e0a0ec5e2ece4b7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt; psl::operator+</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const tvec&lt; precision_t, 3 &gt; &amp;right) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1093" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1093" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a55a480567b4bf16321e9a3913c8a3fec" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const tvec&lt; precision_t, 3 &gt; &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1103" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1103" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae52e8d6754150c2645795337deff60a2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const tvec&lt; precision_t, 3 &gt; &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1113" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1113" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1abb79afefd7de89246a748f0b46a10eb8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1124" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1124" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a7801db3acdff42b3bcf9ac576338cb67" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1133" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1133" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1abcb10643d3a8f1c5395f5842193fa940" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 3 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 3&gt; psl::operator-</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const tvec&lt; precision_t, 3 &gt; &amp;right) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1143" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1143" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a25fb505949e0df4e5a5ceb2a22d21b07" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const tvec&lt; precision_t, 3 &gt; &amp;right) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1154" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1154" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a3a7464f7a8396f4b2c714635bcaea04b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(const tvec&lt; precision_t, 3 &gt; &amp;left, const tvec&lt; precision_t, 3 &gt; &amp;right) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1160" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1160" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a58724055345a42bad6fe6ce534db0b1e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, 4 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1170" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1170" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a61dd45cc7956e73260c91c1081a7fb13" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, 4 &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1179" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1179" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a94c2fb8431d86eec941794ad98fde07c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt; psl::operator+</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const tvec&lt; precision_t, 4 &gt; &amp;right) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1189" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1189" bodyend="1195"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a506e3834381a7e847b7812c3251e6e88" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const tvec&lt; precision_t, 4 &gt; &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1197" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1197" bodyend="1203"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae3a54db26dd6f89f560b55324f1abb50" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const tvec&lt; precision_t, 4 &gt; &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1205" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1205" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ade0010d92731d6c7db528aa564a97ad5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1213" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1213" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a8de6b6f97bdf1a56cb71a5588c54cba0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const precision_t &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1220" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1220" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a08c8c6a9d1f6941395ccc640f1c6af41" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, 4 &gt;</type>
        <definition>constexpr tvec&lt;precision_t, 4&gt; psl::operator-</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const tvec&lt; precision_t, 4 &gt; &amp;right) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1227" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1227" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aac52d96ab4a50cbc743412085051974d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const tvec&lt; precision_t, 4 &gt; &amp;right) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1237" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1237" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad0dd8c17d05b3734c13a7a8d384179e8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(const tvec&lt; precision_t, 4 &gt; &amp;left, const tvec&lt; precision_t, 4 &gt; &amp;right) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, 4 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1243" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1243" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a12890237c518668247f52b4a91938175" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt; psl::operator-</definition>
        <argsstring>(const tvec&lt; precision_t, dimensions &gt; &amp;owner) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1253" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1253" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ab63f687cfaf0385696e75994cb9fd845" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt;&amp; psl::operator+=</definition>
        <argsstring>(tvec&lt; precision_t, dimensions &gt; &amp;owner, const tvec&lt; precision_t, dimensions &gt; &amp;other) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1260" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1260" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a5992be721b2531334b3e98ec820d7fc5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, dimensions &gt; &amp;owner, const tvec&lt; precision_t, dimensions &gt; &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1268" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1268" bodyend="1273"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a368db3daf3dba3cbe62b6c70e1b4305d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, dimensions &gt; &amp;owner, const tvec&lt; precision_t, dimensions &gt; &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1275" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1275" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a079cf894e9814f01019117743c4adc1e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt;&amp; psl::operator*=</definition>
        <argsstring>(tvec&lt; precision_t, dimensions &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1288" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1288" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae989ae12469483fb3a77b43daf5049a6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt;&amp; psl::operator/=</definition>
        <argsstring>(tvec&lt; precision_t, dimensions &gt; &amp;owner, const precision_t &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const precision_t &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1295" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1295" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a4b50baf88ccb91a389c7272ca3e25d79" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt; &amp;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt;&amp; psl::operator-=</definition>
        <argsstring>(tvec&lt; precision_t, dimensions &gt; &amp;owner, const tvec&lt; precision_t, dimensions &gt; &amp;other) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1308" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1308" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a19c0269df4a515ca8362e30ca9191c18" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt; psl::operator+</definition>
        <argsstring>(const tvec&lt; precision_t, dimensions &gt; &amp;left, const tvec&lt; precision_t, dimensions &gt; &amp;right) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1316" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1316" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae6043db54888e730030340e096b2add7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt; psl::operator*</definition>
        <argsstring>(const tvec&lt; precision_t, dimensions &gt; &amp;left, const tvec&lt; precision_t, dimensions &gt; &amp;right) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1324" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1324" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a70361c7180bc654c9f0781c5a11ec1ab" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt; psl::operator/</definition>
        <argsstring>(const tvec&lt; precision_t, dimensions &gt; &amp;left, const tvec&lt; precision_t, dimensions &gt; &amp;right) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1332" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1332" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a8640413755ac70479db1e4ca251651ce" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr tvec&lt; precision_t, dimensions &gt;</type>
        <definition>constexpr tvec&lt;precision_t, dimensions&gt; psl::operator-</definition>
        <argsstring>(const tvec&lt; precision_t, dimensions &gt; &amp;left, const tvec&lt; precision_t, dimensions &gt; &amp;right) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1340" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1340" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a8209612140cb4327eabb96216175d5ef" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(const tvec&lt; precision_t, dimensions &gt; &amp;left, const tvec&lt; precision_t, dimensions &gt; &amp;right) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1350" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1350" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad4d475c9e898f264c8bed4fcd4201db6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename precision_t</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dimensions</declname>
            <defname>dimensions</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(const tvec&lt; precision_t, dimensions &gt; &amp;left, const tvec&lt; precision_t, dimensions &gt; &amp;right) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const tvec&lt; precision_t, dimensions &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" line="1357" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/math/vec.hpp" bodystart="1357" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a81546342cfb88ee8483cc260982668e6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool psl::valid_uid</definition>
        <argsstring>(const char *text, std::size_t size) noexcept</argsstring>
        <name>valid_uid</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/meta.hpp" line="90" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/meta.hpp" bodystart="90" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aae93ebb36d5b8697fd5d6fb28cc960c8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref></type>
        <definition>constexpr psl::UID psl::try_make_uid</definition>
        <argsstring>(const char *text, std::size_t size)</argsstring>
        <name>try_make_uid</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/meta.hpp" line="157" column="20" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/meta.hpp" bodystart="157" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ac1ea696c17255c558bbc38d3fd169ff8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structpsl_1_1_u_i_d" kindref="compound">psl::UID</ref></type>
        <definition>constexpr psl::UID psl::make_uid</definition>
        <argsstring>(const char *text, std::size_t size) noexcept</argsstring>
        <name>make_uid</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/meta.hpp" line="235" column="20" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/meta.hpp" bodystart="235" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a16cc24c3fc123d4624bd5930780ff914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>psl::pack_view&lt; Ts... &gt;</type>
        <definition>psl::pack_view&lt;Ts...&gt; psl::zip</definition>
        <argsstring>(psl::array_view&lt; Ts &gt;... range)</argsstring>
        <name>zip</name>
        <param>
          <type>psl::array_view&lt; Ts &gt;...</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp" line="553" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a7af83d6d73c9d90407cd3fe20bc28db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto psl::zip</definition>
        <argsstring>(Ts... range)</argsstring>
        <name>zip</name>
        <param>
          <type>Ts...</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp" line="559" column="6" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp" bodystart="559" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad72306108c8367f70b4dce98200bea65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>psl::pack_view&lt; Ts... &gt;</type>
        <definition>psl::pack_view&lt;Ts...&gt; psl::make_pack</definition>
        <argsstring>(const T &amp;pack)</argsstring>
        <name>make_pack</name>
        <param>
          <type>const T &amp;</type>
          <declname>pack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp" line="565" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/pack_view.hpp" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a5ad1017fc6d07ed98ea6dfb33b63f62c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>psl::string8_t</type>
        <definition>psl::string8_t psl::to_string8_t</definition>
        <argsstring>(const psl::string &amp;s)</argsstring>
        <name>to_string8_t</name>
        <param>
          <type>const psl::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converts a psl::string into a UTF-8 string. </para>
        </briefdescription>
        <detaileddescription>
<para>converts a UTF-16 string into a UTF-8 string.</para>
<para>converts a psl::string into a UTF-8 string, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a psl::string8_t based on the input psl::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="226" column="23" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a019de0ebbc90532b32c44e30add99a2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>psl::string</type>
        <definition>psl::string psl::from_string8_t</definition>
        <argsstring>(const psl::string8_t &amp;s)</argsstring>
        <name>from_string8_t</name>
        <param>
          <type>const psl::string8_t &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converts a UTF-8 string into a psl::string </para>
        </briefdescription>
        <detaileddescription>
<para>converts a UTF-8 string into a psl::string, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a psl::string based on the input UTF-8 string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="234" column="20" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a19f76888880944ed7fd7db56bf4a6109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>psl::string8_t</type>
        <definition>psl::string8_t psl::to_string8_t</definition>
        <argsstring>(psl::string_view s)</argsstring>
        <name>to_string8_t</name>
        <param>
          <type>psl::string_view</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converts a psl::string into a UTF-8 string. </para>
        </briefdescription>
        <detaileddescription>
<para>converts a psl::string into a UTF-8 string, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a psl::string8_t based on the input psl::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="242" column="23" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a7137b4dab41015dd4af435065379012c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>psl::string</type>
        <definition>psl::string psl::from_string8_t</definition>
        <argsstring>(psl::string8::view s)</argsstring>
        <name>from_string8_t</name>
        <param>
          <type>psl::string8::view</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converts a UTF-8 string into a psl::string </para>
        </briefdescription>
        <detaileddescription>
<para>converts a UTF-8 string into a UTF-16 string.</para>
<para>converts a UTF-8 string into a psl::string, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a psl::string based on the input UTF-8 string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="250" column="20" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a8c98b3a31f15573fae6753b637a2a841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>psl::pstring_t</type>
        <definition>psl::pstring_t psl::to_pstring</definition>
        <argsstring>(const psl::string8_t &amp;s)</argsstring>
        <name>to_pstring</name>
        <param>
          <type>const psl::string8_t &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converts a psl::string8_t int a psl::pstring </para>
        </briefdescription>
        <detaileddescription>
<para>converts a psl::string int a psl::pstring</para>
<para>converts a psl::string8_t into a psl::pstring, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a psl::pstring_t based on the input psl::string.</para>
</simplesect>
converts a psl::string into a psl::pstring, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a std::wstring based on the input psl::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="259" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/ustring.cpp" bodystart="47" bodyend="56" declfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" declline="259" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae4deaa7d8c1c2b103868fb760b7fe58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>psl::pstring_t</type>
        <definition>psl::pstring_t psl::to_pstring</definition>
        <argsstring>(psl::string8::view s)</argsstring>
        <name>to_pstring</name>
        <param>
          <type>psl::string8::view</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converts a psl::string int a psl::pstring </para>
        </briefdescription>
        <detaileddescription>
<para>converts a psl::string into a psl::pstring, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a psl::pstring_t based on the input psl::string.</para>
</simplesect>
converts a psl::string into a psl::pstring, depending on the bit-size (8 or 16) of psl::string this turns into a no-op. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a std::wstring based on the input psl::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="267" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/src/ustring.cpp" bodystart="58" bodyend="67" declfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" declline="267" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a10efb94352f82e168cb2cc09959677e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* psl::memset</definition>
        <argsstring>(char_t *_Dst, char_t _Val, size_t _Size)</argsstring>
        <name>memset</name>
        <param>
          <type>char_t *</type>
          <declname>_Dst</declname>
        </param>
        <param>
          <type>char_t</type>
          <declname>_Val</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_Size</declname>
        </param>
        <briefdescription>
<para>std::memset wrapper that auto-converts to std::wmemset when wchar == psl::char_t </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_Dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination location of what to memset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_Val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set the _Dst to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_Size</parametername>
</parameternamelist>
<parameterdescription>
<para>how many times this should be repeated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the location on success, or a nullptr on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="323" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="323" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ae2a1f3b5b2742103ae14ee4749575244" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* psl::popen</definition>
        <argsstring>(const char_t *_Command, const char_t *_Mode)</argsstring>
        <name>popen</name>
        <param>
          <type>const char_t *</type>
          <declname>_Command</declname>
        </param>
        <param>
          <type>const char_t *</type>
          <declname>_Mode</declname>
        </param>
        <briefdescription>
<para>wrapper for the platform specific popen command, changes its internals depending on psl::char_t size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_Command</parametername>
</parameternamelist>
<parameterdescription>
<para>the command to execute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_Mode</parametername>
</parameternamelist>
<parameterdescription>
<para>mode of the returned stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a FILE* handle on success. </para>
</simplesect>
<simplesect kind="warning"><para>this method is platform specific, please review the internals before calling so that it satisfies the requirements of the platform you call it on. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="346" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="346" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aae1bd582f97a95dcd6f584735673c861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int psl::pclose</definition>
        <argsstring>(FILE *_Stream)</argsstring>
        <name>pclose</name>
        <param>
          <type>FILE *</type>
          <declname>_Stream</declname>
        </param>
        <briefdescription>
<para>wrapper around pclose. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the FILE* handle you wish to close. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a platform specific success code depending on what happened. </para>
</simplesect>
<simplesect kind="warning"><para>this method is platform specific, please review the internals before calling so that it satisfies the requirements of the platform you call it on. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="368" column="12" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="368" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a36d8b9a383105782bcf704612d22036e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char_t *</type>
        <definition>char_t* psl::memcpy_s</definition>
        <argsstring>(char_t *const _Destination, char_t const *const _Source, size_t const _SourceSize)</argsstring>
        <name>memcpy_s</name>
        <param>
          <type>char_t *const</type>
          <declname>_Destination</declname>
        </param>
        <param>
          <type>char_t const *const</type>
          <declname>_Source</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>_SourceSize</declname>
        </param>
        <briefdescription>
<para>wrapper around std::memcpy that changes behaviour depending on the size of psl::char_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_Destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to memcpy to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_Source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source to memcpy from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_SourceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of bytes to copy from the source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="382" column="15" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="382" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a17d45a429d784672ddf15bceca3b9229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t psl::strlen</definition>
        <argsstring>(const char_t *_Str)</argsstring>
        <name>strlen</name>
        <param>
          <type>const char_t *</type>
          <declname>_Str</declname>
        </param>
        <briefdescription>
<para>wrapper around <ref refid="namespacepsl_1a17d45a429d784672ddf15bceca3b9229" kindref="member">strlen</ref> that changes behaviour depending on the size of psl::char_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_Str</parametername>
</parameternamelist>
<parameterdescription>
<para>the target string to count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the string. </para>
</simplesect>
<simplesect kind="note"><para>this method works on the &quot;platforms expectations&quot; of the string, not the actual UTF encoding. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="398" column="15" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="398" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a97a39a66497550d0ec9403540784a38e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void psl::fprintf</definition>
        <argsstring>(FILE *const _Stream, char_t const *_Format, Args &amp;&amp;... args)</argsstring>
        <name>fprintf</name>
        <param>
          <type>FILE *const</type>
          <declname>_Stream</declname>
        </param>
        <param>
          <type>char_t const *</type>
          <declname>_Format</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>wrapper around fprintf that changes behaviour depending on the size of psl::char_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a FILE object that identifies an output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_Format</parametername>
</parameternamelist>
<parameterdescription>
<para>text you wish to write to the stream, with optional formatting instructions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>stream of variables you wish to send to forward to fprintf, the behaviour is unchanged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="415" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="415" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a81f2ba09a1584614ebcb512e4d509687" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void psl::printf</definition>
        <argsstring>(char_t const *_Format, Args &amp;&amp;... args)</argsstring>
        <name>printf</name>
        <param>
          <type>char_t const *</type>
          <declname>_Format</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>wrapper around printf that changes behaviour depending on the size of psl::char_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_Format</parametername>
</parameternamelist>
<parameterdescription>
<para>text you wish to write to the stream, with optional formatting instructions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>stream of variables you wish to send to forward to fprintf, the behaviour is unchanged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" line="431" column="13" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/ustring.hpp" bodystart="431" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a5c661ab8e68278a2330ac78764142852" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(view_ptr&lt; T1 &gt; p1, view_ptr&lt; T2 &gt; p2) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T1 &gt;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T2 &gt;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="82" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a4b13936109b086957ccc90fc1888c7ed" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(view_ptr&lt; T1 &gt; p1, view_ptr&lt; T2 &gt; p2) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T1 &gt;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T2 &gt;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="88" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aecacb15a307e95d7e42b15b65fb13618" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(view_ptr&lt; T &gt; p, std::nullptr_t) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="94" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1aae2be18e02bca91924ce10d710706087" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator==</definition>
        <argsstring>(std::nullptr_t, view_ptr&lt; T &gt; p) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="100" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1ad787d9a7d1831e43d8cadc11cdcce0e6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(view_ptr&lt; T &gt; p, std::nullptr_t) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="106" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacepsl_1a0e4bf2c6da3a0231249aebe7b58ffc28" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool psl::operator!=</definition>
        <argsstring>(std::nullptr_t, view_ptr&lt; T &gt; p) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type><ref refid="classpsl_1_1view__ptr" kindref="compound">view_ptr</ref>&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" line="112" column="16" bodyfile="/home/runner/work/paradigm/paradigm/psl/inc/psl/view_ptr.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>paradigm standard library </para>
    </briefdescription>
    <detaileddescription>
<para>contains various utilities and constructs to aid you. In this you&apos;ll find constructs that allow event signalling, dealing with UTF encoded strings, etc... </para>
    </detaileddescription>
    <location file="/home/runner/work/paradigm/paradigm/core/inc/conversion_utils.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
