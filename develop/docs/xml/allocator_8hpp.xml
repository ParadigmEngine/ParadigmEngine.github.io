<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="allocator_8hpp" kind="file" language="C++">
    <compoundname>allocator.hpp</compoundname>
    <includes refid="range_8hpp" local="yes">range.hpp</includes>
    <includes refid="segment_8hpp" local="yes">segment.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">list</includes>
    <includes local="no">optional</includes>
    <includes local="no">stack</includes>
    <includes local="no">vector</includes>
    <includedby refid="psl_2inc_2psl_2buffer_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/buffer.hpp</includedby>
    <includedby refid="region_8hpp" local="yes">/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/region.hpp</includedby>
    <includedby refid="allocator_8cpp" local="yes">/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp</includedby>
    <incdepgraph>
      <node id="15">
        <label>list</label>
      </node>
      <node id="1">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp</label>
        <link refid="allocator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>psl/platform_def.hpp</label>
        <link refid="platform__def_8hpp_source"/>
      </node>
      <node id="10">
        <label>fstream</label>
      </node>
      <node id="13">
        <label>optional</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
      <node id="16">
        <label>stack</label>
      </node>
      <node id="12">
        <label>signal.h</label>
      </node>
      <node id="4">
        <label>segment.hpp</label>
        <link refid="segment_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
      <node id="9">
        <label>cstring</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="5">
        <label>psl/assertions.hpp</label>
        <link refid="assertions_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>psl/ustring.hpp</label>
        <link refid="ustring_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/pipeline.cpp</label>
        <link refid="pipeline_8cpp_source"/>
      </node>
      <node id="1">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp</label>
        <link refid="allocator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/text.cpp</label>
        <link refid="text_8cpp_source"/>
      </node>
      <node id="18">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/debug/grid.cpp</label>
        <link refid="grid_8cpp_source"/>
      </node>
      <node id="6">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/lighting.cpp</label>
        <link refid="lighting_8cpp_source"/>
      </node>
      <node id="26">
        <label>/home/runner/work/paradigm/paradigm/psl/src/memory/allocator.cpp</label>
        <link refid="allocator_8cpp_source"/>
      </node>
      <node id="23">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/material.cpp</label>
        <link refid="gfx_2material_8cpp_source"/>
      </node>
      <node id="14">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/material.cpp</label>
        <link refid="vk_2material_8cpp_source"/>
      </node>
      <node id="25">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/drawpass.cpp</label>
        <link refid="vk_2drawpass_8cpp_source"/>
      </node>
      <node id="2">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/buffer.hpp</label>
        <link refid="psl_2inc_2psl_2buffer_8hpp_source"/>
      </node>
      <node id="17">
        <label>/home/runner/work/paradigm/paradigm/core/inc/gfx/buffer.hpp</label>
        <link refid="core_2inc_2gfx_2buffer_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>/home/runner/work/paradigm/paradigm/psl/src/memory/region.cpp</label>
        <link refid="region_8cpp_source"/>
      </node>
      <node id="4">
        <label>/home/runner/work/paradigm/paradigm/core/inc/data/buffer.hpp</label>
        <link refid="core_2inc_2data_2buffer_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/bundle.cpp</label>
        <link refid="gfx_2bundle_8cpp_source"/>
      </node>
      <node id="19">
        <label>/home/runner/work/paradigm/paradigm/core/src/ecs/systems/gpu_camera.cpp</label>
        <link refid="gpu__camera_8cpp_source"/>
      </node>
      <node id="3">
        <label>/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/region.hpp</label>
        <link refid="region_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/details/instance.cpp</label>
        <link refid="instance_8cpp_source"/>
      </node>
      <node id="13">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/geometry.cpp</label>
        <link refid="vk_2geometry_8cpp_source"/>
      </node>
      <node id="7">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/buffer.cpp</label>
        <link refid="gfx_2buffer_8cpp_source"/>
      </node>
      <node id="10">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/compute.cpp</label>
        <link refid="gles_2compute_8cpp_source"/>
      </node>
      <node id="16">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/texture.cpp</label>
        <link refid="vk_2texture_8cpp_source"/>
      </node>
      <node id="24">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/drawpass.cpp</label>
        <link refid="gles_2drawpass_8cpp_source"/>
      </node>
      <node id="22">
        <label>/home/runner/work/paradigm/paradigm/core/src/gfx/geometry.cpp</label>
        <link refid="gfx_2geometry_8cpp_source"/>
      </node>
      <node id="12">
        <label>/home/runner/work/paradigm/paradigm/core/src/vk/buffer.cpp</label>
        <link refid="vk_2buffer_8cpp_source"/>
      </node>
      <node id="11">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/material.cpp</label>
        <link refid="gles_2material_8cpp_source"/>
      </node>
      <node id="9">
        <label>/home/runner/work/paradigm/paradigm/core/src/gles/buffer.cpp</label>
        <link refid="gles_2buffer_8cpp_source"/>
      </node>
      <node id="5">
        <label>/home/runner/work/paradigm/paradigm/core/src/data/buffer.cpp</label>
        <link refid="data_2buffer_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmemory_1_1allocator__base" prot="public">memory::allocator_base</innerclass>
    <innerclass refid="classmemory_1_1default__allocator" prot="public">memory::default_allocator</innerclass>
    <innerclass refid="classmemory_1_1block__allocator" prot="public">memory::block_allocator</innerclass>
    <innernamespace refid="namespacememory">memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;range.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;segment.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacememory" kindref="compound">memory</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">region;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">range_t;</highlight></codeline>
<codeline lineno="15" refid="classmemory_1_1allocator__base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmemory_1_1region" kindref="compound">region</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>physically_backed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>:<sp/>m_IsPhysicallyBacked(physically_backed)<sp/>{};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>std::optional&lt;segment&gt;<sp/>allocate(std::size_t<sp/>bytes)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bytes<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_allocate(m_Region,<sp/>bytes);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deallocate(<ref refid="classmemory_1_1segment" kindref="compound">segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;range_t&gt;<sp/>committed();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;range_t&gt;<sp/>available();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_physically_backed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_IsPhysicallyBacked;<sp/>};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>owns(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compact();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>commit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1range__t" kindref="compound">range_t</ref>&amp;<sp/>range);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1range__t" kindref="compound">memory::range_t</ref><sp/>get_range()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/>m_Region<sp/>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::optional&lt;segment&gt;<sp/>do_allocate(<ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>,<sp/>std::size_t<sp/>bytes)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_deallocate(<ref refid="classmemory_1_1segment" kindref="compound">segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize([[maybe_unused]]<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>)<sp/>{};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;range_t&gt;<sp/>get_committed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;range_t&gt;<sp/>get_available()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_compact([[maybe_unused]]<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>)<sp/>{};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_owns(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_IsPhysicallyBacked<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classmemory_1_1default__allocator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmemory_1_1default__allocator" kindref="compound">default_allocator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1default__allocator" kindref="compound">default_allocator</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>physically_backed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>(physically_backed)<sp/>{};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classmemory_1_1default__allocator" kindref="compound">default_allocator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;segment&gt;<sp/>do_allocate(<ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>,<sp/>std::size_t<sp/>bytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_deallocate(<ref refid="classmemory_1_1segment" kindref="compound">segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(<ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;range_t&gt;<sp/>get_committed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;range_t&gt;<sp/>get_available()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_compact(<ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_owns(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;range_t&gt;<sp/>m_Committed;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;range_t&gt;<sp/>m_Free;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classmemory_1_1block__allocator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmemory_1_1block__allocator" kindref="compound">block_allocator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1block__allocator" kindref="compound">block_allocator</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>block_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>physically_backed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmemory_1_1allocator__base" kindref="compound">allocator_base</ref>(physically_backed),<sp/>m_BlockSize(block_size)<sp/>{};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classmemory_1_1block__allocator" kindref="compound">block_allocator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;segment&gt;<sp/>do_allocate(<ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>,<sp/>std::size_t<sp/>bytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_deallocate(<ref refid="classmemory_1_1segment" kindref="compound">segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(<ref refid="classmemory_1_1region" kindref="compound">region</ref>*<sp/><ref refid="classmemory_1_1region" kindref="compound">region</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;range_t&gt;<sp/>get_committed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;range_t&gt;<sp/>get_available()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_owns(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmemory_1_1segment" kindref="compound">memory::segment</ref>&amp;<sp/><ref refid="classmemory_1_1segment" kindref="compound">segment</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;memory::range_t&gt;<sp/>m_Ranges;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stack&lt;size_t&gt;<sp/>m_Free;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_BlockSize;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/paradigm/paradigm/psl/inc/psl/memory/allocator.hpp"/>
  </compounddef>
</doxygen>
